//
//  UIGroover.swift
//  Groover
//
//  Created by Alex on 7/19/16.
//  Copyright (c) 2016 TCM. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class UIGroover : NSObject {

    //// Cache

    private struct Cache {
        static var fullBackground: UIImage?
        static var knobBG: UIImage?
        static var rotationBG: UIImage?

    }

    //// Images

    public class var fullBackground: UIImage {
        if Cache.fullBackground == nil {
            Cache.fullBackground = UIImage(named: "fullBackground.png")!
        }
        return Cache.fullBackground!
    }

    public class var knobBG: UIImage {
        if Cache.knobBG == nil {
            Cache.knobBG = UIImage(named: "knobBG.png")!
        }
        return Cache.knobBG!
    }

    public class var rotationBG: UIImage {
        if Cache.rotationBG == nil {
            Cache.rotationBG = UIImage(named: "rotationBG.png")!
        }
        return Cache.rotationBG!
    }

    //// Drawing Methods

    public class func drawQuarterCanvas(quarterSelected quarterSelected: Bool = false, quarterActive: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let noteGray = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        let noteDark = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let quarterDeselected = !quarterSelected

        if (quarterActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (quarterSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (quarterDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRectMake(5, 5, 44, 44), cornerRadius: 6)
            black.setFill()
            buttonBlackPath.fill()


            //// quarterLight Drawing
            let quarterLightPath = UIBezierPath()
            quarterLightPath.moveToPoint(CGPointMake(31.46, 34))
            quarterLightPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            quarterLightPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            quarterLightPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            quarterLightPath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            quarterLightPath.addLineToPoint(CGPointMake(29.48, 14))
            quarterLightPath.addLineToPoint(CGPointMake(31.48, 14))
            quarterLightPath.addLineToPoint(CGPointMake(31.48, 34))
            quarterLightPath.addLineToPoint(CGPointMake(31.46, 34))
            quarterLightPath.addLineToPoint(CGPointMake(31.46, 34))
            quarterLightPath.closePath()
            quarterLightPath.miterLimit = 4;

            quarterLightPath.usesEvenOddFillRule = true;

            noteGray.setFill()
            quarterLightPath.fill()
        }


        if (quarterActive) {
            //// quarterDark Drawing
            let quarterDarkPath = UIBezierPath()
            quarterDarkPath.moveToPoint(CGPointMake(31.46, 34))
            quarterDarkPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            quarterDarkPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            quarterDarkPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            quarterDarkPath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            quarterDarkPath.addLineToPoint(CGPointMake(29.48, 14))
            quarterDarkPath.addLineToPoint(CGPointMake(31.48, 14))
            quarterDarkPath.addLineToPoint(CGPointMake(31.48, 34))
            quarterDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            quarterDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            quarterDarkPath.closePath()
            quarterDarkPath.miterLimit = 4;

            quarterDarkPath.usesEvenOddFillRule = true;

            noteDark.setFill()
            quarterDarkPath.fill()
        }


        if (quarterSelected) {
            //// quarterBlue Drawing
            let quarterBluePath = UIBezierPath()
            quarterBluePath.moveToPoint(CGPointMake(31.46, 34))
            quarterBluePath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            quarterBluePath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            quarterBluePath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            quarterBluePath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            quarterBluePath.addLineToPoint(CGPointMake(29.48, 14))
            quarterBluePath.addLineToPoint(CGPointMake(31.48, 14))
            quarterBluePath.addLineToPoint(CGPointMake(31.48, 34))
            quarterBluePath.addLineToPoint(CGPointMake(31.46, 34))
            quarterBluePath.addLineToPoint(CGPointMake(31.46, 34))
            quarterBluePath.closePath()
            quarterBluePath.miterLimit = 4;

            quarterBluePath.usesEvenOddFillRule = true;

            lightBlue.setFill()
            quarterBluePath.fill()
        }
    }

    public class func drawEighthCanvas(eighthSelected eighthSelected: Bool = false, eighthActive: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let noteGray = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        let noteDark = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let eighthDeselected = !eighthSelected

        if (eighthActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (eighthSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (eighthDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRectMake(5, 5, 44, 44), cornerRadius: 6)
            black.setFill()
            buttonBlackPath.fill()


            //// eighthLight Drawing
            let eighthLightPath = UIBezierPath()
            eighthLightPath.moveToPoint(CGPointMake(30.61, 14))
            eighthLightPath.addLineToPoint(CGPointMake(29.48, 14))
            eighthLightPath.addLineToPoint(CGPointMake(29.48, 32.48))
            eighthLightPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            eighthLightPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            eighthLightPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            eighthLightPath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            eighthLightPath.addLineToPoint(CGPointMake(31.46, 34))
            eighthLightPath.addLineToPoint(CGPointMake(31.48, 34))
            eighthLightPath.addLineToPoint(CGPointMake(31.48, 18))
            eighthLightPath.addLineToPoint(CGPointMake(37.73, 18))
            eighthLightPath.addLineToPoint(CGPointMake(37.73, 14))
            eighthLightPath.addLineToPoint(CGPointMake(30.61, 14))
            eighthLightPath.addLineToPoint(CGPointMake(30.61, 14))
            eighthLightPath.closePath()
            eighthLightPath.miterLimit = 4;

            eighthLightPath.usesEvenOddFillRule = true;

            noteGray.setFill()
            eighthLightPath.fill()
        }


        if (eighthActive) {
            //// eighthDark Drawing
            let eighthDarkPath = UIBezierPath()
            eighthDarkPath.moveToPoint(CGPointMake(30.61, 14))
            eighthDarkPath.addLineToPoint(CGPointMake(29.48, 14))
            eighthDarkPath.addLineToPoint(CGPointMake(29.48, 32.48))
            eighthDarkPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            eighthDarkPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            eighthDarkPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            eighthDarkPath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            eighthDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            eighthDarkPath.addLineToPoint(CGPointMake(31.48, 34))
            eighthDarkPath.addLineToPoint(CGPointMake(31.48, 18))
            eighthDarkPath.addLineToPoint(CGPointMake(37.73, 18))
            eighthDarkPath.addLineToPoint(CGPointMake(37.73, 14))
            eighthDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            eighthDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            eighthDarkPath.closePath()
            eighthDarkPath.miterLimit = 4;

            eighthDarkPath.usesEvenOddFillRule = true;

            noteDark.setFill()
            eighthDarkPath.fill()
        }


        if (eighthSelected) {
            //// eighthBlue Drawing
            let eighthBluePath = UIBezierPath()
            eighthBluePath.moveToPoint(CGPointMake(30.61, 14))
            eighthBluePath.addLineToPoint(CGPointMake(29.48, 14))
            eighthBluePath.addLineToPoint(CGPointMake(29.48, 32.48))
            eighthBluePath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            eighthBluePath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            eighthBluePath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            eighthBluePath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            eighthBluePath.addLineToPoint(CGPointMake(31.46, 34))
            eighthBluePath.addLineToPoint(CGPointMake(31.48, 34))
            eighthBluePath.addLineToPoint(CGPointMake(31.48, 18))
            eighthBluePath.addLineToPoint(CGPointMake(37.73, 18))
            eighthBluePath.addLineToPoint(CGPointMake(37.73, 14))
            eighthBluePath.addLineToPoint(CGPointMake(30.61, 14))
            eighthBluePath.addLineToPoint(CGPointMake(30.61, 14))
            eighthBluePath.closePath()
            eighthBluePath.miterLimit = 4;

            eighthBluePath.usesEvenOddFillRule = true;

            lightBlue.setFill()
            eighthBluePath.fill()
        }
    }

    public class func drawSixteenthCanvas(sixteenthSelected sixteenthSelected: Bool = false, sixteenthActive: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let noteGray = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        let noteDark = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let sixteenthDeselected = !sixteenthSelected

        if (sixteenthActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (sixteenthSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (sixteenthDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRectMake(5, 5, 44, 44), cornerRadius: 6)
            black.setFill()
            buttonBlackPath.fill()


            //// sixteenthLight Drawing
            let sixteenthLightPath = UIBezierPath()
            sixteenthLightPath.moveToPoint(CGPointMake(31.48, 25))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.48, 34))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthLightPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            sixteenthLightPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            sixteenthLightPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            sixteenthLightPath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            sixteenthLightPath.addLineToPoint(CGPointMake(29.48, 14))
            sixteenthLightPath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthLightPath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthLightPath.addLineToPoint(CGPointMake(37.73, 14))
            sixteenthLightPath.addLineToPoint(CGPointMake(37.73, 18))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.48, 18))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.48, 21))
            sixteenthLightPath.addLineToPoint(CGPointMake(37.73, 21))
            sixteenthLightPath.addLineToPoint(CGPointMake(37.73, 25))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthLightPath.closePath()
            sixteenthLightPath.miterLimit = 4;

            sixteenthLightPath.usesEvenOddFillRule = true;

            noteGray.setFill()
            sixteenthLightPath.fill()
        }


        if (sixteenthActive) {
            //// sixteenthDark Drawing
            let sixteenthDarkPath = UIBezierPath()
            sixteenthDarkPath.moveToPoint(CGPointMake(31.48, 25))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.48, 34))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthDarkPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            sixteenthDarkPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            sixteenthDarkPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            sixteenthDarkPath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            sixteenthDarkPath.addLineToPoint(CGPointMake(29.48, 14))
            sixteenthDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthDarkPath.addLineToPoint(CGPointMake(37.73, 14))
            sixteenthDarkPath.addLineToPoint(CGPointMake(37.73, 18))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.48, 18))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.48, 21))
            sixteenthDarkPath.addLineToPoint(CGPointMake(37.73, 21))
            sixteenthDarkPath.addLineToPoint(CGPointMake(37.73, 25))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthDarkPath.closePath()
            sixteenthDarkPath.miterLimit = 4;

            sixteenthDarkPath.usesEvenOddFillRule = true;

            noteDark.setFill()
            sixteenthDarkPath.fill()
        }


        if (sixteenthSelected) {
            //// sixteenthBlue Drawing
            let sixteenthBluePath = UIBezierPath()
            sixteenthBluePath.moveToPoint(CGPointMake(31.48, 25))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.48, 34))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthBluePath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            sixteenthBluePath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            sixteenthBluePath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            sixteenthBluePath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            sixteenthBluePath.addLineToPoint(CGPointMake(29.48, 14))
            sixteenthBluePath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthBluePath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthBluePath.addLineToPoint(CGPointMake(37.73, 14))
            sixteenthBluePath.addLineToPoint(CGPointMake(37.73, 18))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.48, 18))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.48, 21))
            sixteenthBluePath.addLineToPoint(CGPointMake(37.73, 21))
            sixteenthBluePath.addLineToPoint(CGPointMake(37.73, 25))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthBluePath.closePath()
            sixteenthBluePath.miterLimit = 4;

            sixteenthBluePath.usesEvenOddFillRule = true;

            lightBlue.setFill()
            sixteenthBluePath.fill()
        }
    }

    public class func drawThirtysecondCanvas(thirtysecondSelected thirtysecondSelected: Bool = false, thirtysecondActive: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let noteGray = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        let noteDark = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let thirtysecondDeselected = !thirtysecondSelected

        if (thirtysecondActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (thirtysecondSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (thirtysecondDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRectMake(5, 5, 44, 44), cornerRadius: 6)
            black.setFill()
            buttonBlackPath.fill()


            //// thirtysecondLight Drawing
            let thirtysecondLightPath = UIBezierPath()
            thirtysecondLightPath.moveToPoint(CGPointMake(31.5, 24))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.5, 22))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 22))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 19))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.48, 19))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.48, 18))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.5, 18))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.5, 17))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 17))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 14))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.05, 14))
            thirtysecondLightPath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondLightPath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondLightPath.addLineToPoint(CGPointMake(29.48, 14))
            thirtysecondLightPath.addLineToPoint(CGPointMake(29.48, 32.48))
            thirtysecondLightPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            thirtysecondLightPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            thirtysecondLightPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            thirtysecondLightPath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.46, 34))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.48, 34))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.48, 27))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 27))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 24))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondLightPath.closePath()
            thirtysecondLightPath.miterLimit = 4;

            thirtysecondLightPath.usesEvenOddFillRule = true;

            noteGray.setFill()
            thirtysecondLightPath.fill()
        }


        if (thirtysecondActive) {
            //// thirtysecondDark Drawing
            let thirtysecondDarkPath = UIBezierPath()
            thirtysecondDarkPath.moveToPoint(CGPointMake(31.5, 24))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.5, 22))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 22))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 19))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.48, 19))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.48, 18))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.5, 18))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.5, 17))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 17))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 14))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.05, 14))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(29.48, 14))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(29.48, 32.48))
            thirtysecondDarkPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            thirtysecondDarkPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            thirtysecondDarkPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            thirtysecondDarkPath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.48, 34))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.48, 27))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 27))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 24))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondDarkPath.closePath()
            thirtysecondDarkPath.miterLimit = 4;

            thirtysecondDarkPath.usesEvenOddFillRule = true;

            noteDark.setFill()
            thirtysecondDarkPath.fill()
        }


        if (thirtysecondSelected) {
            //// thirtysecondBlue Drawing
            let thirtysecondBluePath = UIBezierPath()
            thirtysecondBluePath.moveToPoint(CGPointMake(31.5, 24))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.5, 22))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 22))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 19))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.48, 19))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.48, 18))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.5, 18))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.5, 17))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 17))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 14))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.05, 14))
            thirtysecondBluePath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondBluePath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondBluePath.addLineToPoint(CGPointMake(29.48, 14))
            thirtysecondBluePath.addLineToPoint(CGPointMake(29.48, 32.48))
            thirtysecondBluePath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            thirtysecondBluePath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            thirtysecondBluePath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            thirtysecondBluePath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.46, 34))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.48, 34))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.48, 27))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 27))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 24))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondBluePath.closePath()
            thirtysecondBluePath.miterLimit = 4;

            thirtysecondBluePath.usesEvenOddFillRule = true;

            lightBlue.setFill()
            thirtysecondBluePath.fill()
        }
    }

    public class func drawTripletCanvas(tripletSelected tripletSelected: Bool = false, tripletActive: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let noteGray = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        let noteDark = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let tripletDeselected = !tripletSelected

        if (tripletActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (tripletSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (tripletDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRectMake(5, 5, 44, 44), cornerRadius: 6)
            black.setFill()
            buttonBlackPath.fill()


            //// tripletLight Drawing
            let tripletLightPath = UIBezierPath()
            tripletLightPath.moveToPoint(CGPointMake(25.53, 34.5))
            tripletLightPath.addLineToPoint(CGPointMake(25.53, 21.67))
            tripletLightPath.addLineToPoint(CGPointMake(21, 21.67))
            tripletLightPath.addLineToPoint(CGPointMake(21, 19))
            tripletLightPath.addLineToPoint(CGPointMake(33.32, 19))
            tripletLightPath.addLineToPoint(CGPointMake(33.32, 21.67))
            tripletLightPath.addLineToPoint(CGPointMake(28.78, 21.67))
            tripletLightPath.addLineToPoint(CGPointMake(28.78, 34.5))
            tripletLightPath.addLineToPoint(CGPointMake(25.53, 34.5))
            tripletLightPath.closePath()
            tripletLightPath.miterLimit = 4;

            tripletLightPath.usesEvenOddFillRule = true;

            noteGray.setFill()
            tripletLightPath.fill()
        }


        if (tripletActive) {
            //// tripletDark Drawing
            let tripletDarkPath = UIBezierPath()
            tripletDarkPath.moveToPoint(CGPointMake(25.53, 34.5))
            tripletDarkPath.addLineToPoint(CGPointMake(25.53, 21.67))
            tripletDarkPath.addLineToPoint(CGPointMake(21, 21.67))
            tripletDarkPath.addLineToPoint(CGPointMake(21, 19))
            tripletDarkPath.addLineToPoint(CGPointMake(33.32, 19))
            tripletDarkPath.addLineToPoint(CGPointMake(33.32, 21.67))
            tripletDarkPath.addLineToPoint(CGPointMake(28.78, 21.67))
            tripletDarkPath.addLineToPoint(CGPointMake(28.78, 34.5))
            tripletDarkPath.addLineToPoint(CGPointMake(25.53, 34.5))
            tripletDarkPath.closePath()
            tripletDarkPath.miterLimit = 4;

            tripletDarkPath.usesEvenOddFillRule = true;

            noteDark.setFill()
            tripletDarkPath.fill()
        }


        if (tripletSelected) {
            //// tripletBlue Drawing
            let tripletBluePath = UIBezierPath()
            tripletBluePath.moveToPoint(CGPointMake(25.53, 34.5))
            tripletBluePath.addLineToPoint(CGPointMake(25.53, 21.67))
            tripletBluePath.addLineToPoint(CGPointMake(21, 21.67))
            tripletBluePath.addLineToPoint(CGPointMake(21, 19))
            tripletBluePath.addLineToPoint(CGPointMake(33.32, 19))
            tripletBluePath.addLineToPoint(CGPointMake(33.32, 21.67))
            tripletBluePath.addLineToPoint(CGPointMake(28.78, 21.67))
            tripletBluePath.addLineToPoint(CGPointMake(28.78, 34.5))
            tripletBluePath.addLineToPoint(CGPointMake(25.53, 34.5))
            tripletBluePath.closePath()
            tripletBluePath.miterLimit = 4;

            tripletBluePath.usesEvenOddFillRule = true;

            lightBlue.setFill()
            tripletBluePath.fill()
        }
    }

    public class func drawSoundParametersCanvas(soundParametersSelected soundParametersSelected: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let soundParamtersBG = UIColor(red: 0.094, green: 0.114, blue: 0.133, alpha: 1.000)
        let buttonsBGLight = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// soundParametersBase Drawing
        let soundParametersBasePath = UIBezierPath(ovalInRect: CGRectMake(1, 1, 40, 40))
        soundParamtersBG.setFill()
        soundParametersBasePath.fill()


        //// soundParametersOutline Drawing
        let soundParametersOutlinePath = UIBezierPath(ovalInRect: CGRectMake(3, 3, 36, 36))
        black.setStroke()
        soundParametersOutlinePath.lineWidth = 5
        soundParametersOutlinePath.stroke()


        //// soundParametersLight Drawing
        let soundParametersLightPath = UIBezierPath(ovalInRect: CGRectMake(11, 11, 20, 20))
        buttonsBGLight.setFill()
        soundParametersLightPath.fill()


        //// soundParametersBlue Drawing
        let soundParametersBluePath = UIBezierPath(roundedRect: CGRectMake(17, 17, 8, 8), cornerRadius: 2)
        lightBlue.setFill()
        soundParametersBluePath.fill()


        if (soundParametersSelected) {
            //// soundParametersBlueOutline Drawing
            let soundParametersBlueOutlinePath = UIBezierPath(ovalInRect: CGRectMake(11, 11, 20, 20))
            lightBlue.setStroke()
            soundParametersBlueOutlinePath.lineWidth = 2
            soundParametersBlueOutlinePath.stroke()
        }
    }

    public class func drawKnobCanvas(frame frame: CGRect = CGRectMake(1, 0, 280, 280), rotation: CGFloat = 0, clickSelected: Bool = false, clickRingActive: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let clickGray = UIColor(red: 0.400, green: 0.435, blue: 0.471, alpha: 1.000)
        let clickDarkGray = UIColor(red: 0.329, green: 0.345, blue: 0.361, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.292, green: 0.673, blue: 0.950, alpha: 1.000)
        let knobGradientColor1 = UIColor(red: 0.113, green: 0.155, blue: 0.229, alpha: 1.000)
        let knobGradientColor2 = UIColor(red: 0.251, green: 0.306, blue: 0.364, alpha: 1.000)
        let knobGradientColor3 = UIColor(red: 0.104, green: 0.140, blue: 0.202, alpha: 1.000)

        //// Gradient Declarations
        let linearGradient1 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [knobGradientColor1.CGColor, knobGradientColor2.CGColor, knobGradientColor3.CGColor], [0, 0.51, 1])!

        //// Variable Declarations
        let clickColor = clickSelected ? lightBlue : clickGray


        //// Subframes
        let knobRotation: CGRect = CGRectMake(frame.minX + floor((frame.width - 270) * 0.40000 + 0.5), frame.minY + floor((frame.height - 270) * 0.50000 + 0.5), 270, 270)
        let clickButton: CGRect = CGRectMake(frame.minX + floor((frame.width - 24) * 0.49609 + 0.5), frame.minY + floor((frame.height - 24) * 0.50000 + 0.5), 24, 24)


        //// knobBGFrame Drawing
        let knobBGFrameRect = CGRectMake(frame.minX + floor(frame.width * -0.00357 + 0.5), frame.minY + floor(frame.height * 0.00000 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * -0.00357 + 0.5), floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5))
        let knobBGFramePath = UIBezierPath(rect: knobBGFrameRect)
        CGContextSaveGState(context)
        knobBGFramePath.addClip()
        UIGroover.knobBG.drawInRect(CGRectMake(floor(knobBGFrameRect.minX + 0.5), floor(knobBGFrameRect.minY + 0.5), UIGroover.knobBG.size.width, UIGroover.knobBG.size.height))
        CGContextRestoreGState(context)


        //// knobRotation
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip knob-rotation-mask
        let knobrotationmaskPath = UIBezierPath()
        knobrotationmaskPath.moveToPoint(CGPointMake(0, 135))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(135, 0), controlPoint1: CGPointMake(74.56, 135), controlPoint2: CGPointMake(135, 74.56))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(0, -135), controlPoint1: CGPointMake(135, -74.56), controlPoint2: CGPointMake(74.56, -135))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-135, 0), controlPoint1: CGPointMake(-74.56, -135), controlPoint2: CGPointMake(-135, -74.56))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(0, 135), controlPoint1: CGPointMake(-135, 74.56), controlPoint2: CGPointMake(-74.56, 135))
        knobrotationmaskPath.addLineToPoint(CGPointMake(0, 135))
        knobrotationmaskPath.addLineToPoint(CGPointMake(0, 135))
        knobrotationmaskPath.addLineToPoint(CGPointMake(0, 135))
        knobrotationmaskPath.closePath()
        knobrotationmaskPath.moveToPoint(CGPointMake(-57.9, -120))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-71.76, -112.26), controlPoint1: CGPointMake(-62.69, -117.69), controlPoint2: CGPointMake(-67.31, -115.1))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-92.52, -89.22), controlPoint1: CGPointMake(-78.21, -104.31), controlPoint2: CGPointMake(-85.13, -96.62))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-113.11, -70.42), controlPoint1: CGPointMake(-99.16, -82.58), controlPoint2: CGPointMake(-106.03, -76.31))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-113.11, -70.42))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-118.92, -60.12), controlPoint1: CGPointMake(-115.19, -67.08), controlPoint2: CGPointMake(-117.13, -63.65))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-118.92, -60.12))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-118.52, -58.65), controlPoint1: CGPointMake(-118.46, -59.79), controlPoint2: CGPointMake(-118.29, -59.18))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-123.37, -47.75))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-124.67, -47.05), controlPoint1: CGPointMake(-123.6, -47.23), controlPoint2: CGPointMake(-124.14, -46.95))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-130, -29.26), controlPoint1: CGPointMake(-126.85, -41.3), controlPoint2: CGPointMake(-128.63, -35.36))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-130, -29.26))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-128.32, 2.65), controlPoint1: CGPointMake(-128.89, -18.78), controlPoint2: CGPointMake(-128.32, -8.13))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-129.64, 30.94), controlPoint1: CGPointMake(-128.32, 12.19), controlPoint2: CGPointMake(-128.76, 21.62))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-125.46, 45.03), controlPoint1: CGPointMake(-128.5, 35.74), controlPoint2: CGPointMake(-127.1, 40.44))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-124.18, 45.72), controlPoint1: CGPointMake(-124.94, 44.95), controlPoint2: CGPointMake(-124.4, 45.22))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-119.33, 56.63))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-119.92, 58.21), controlPoint1: CGPointMake(-119.06, 57.23), controlPoint2: CGPointMake(-119.32, 57.93))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-119.92, 58.21))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-112.01, 72.26), controlPoint1: CGPointMake(-117.56, 63.06), controlPoint2: CGPointMake(-114.92, 67.75))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-89.66, 92.52), controlPoint1: CGPointMake(-104.31, 78.57), controlPoint2: CGPointMake(-96.84, 85.32))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-71.24, 112.69), controlPoint1: CGPointMake(-83.15, 99.02), controlPoint2: CGPointMake(-77.02, 105.76))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-71.24, 112.69))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-58.76, 119.69), controlPoint1: CGPointMake(-67.22, 115.24), controlPoint2: CGPointMake(-63.06, 117.58))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-58.76, 119.69))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-57.42, 119.41), controlPoint1: CGPointMake(-58.43, 119.34), controlPoint2: CGPointMake(-57.89, 119.21))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-46.44, 124.08))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-45.72, 125.26), controlPoint1: CGPointMake(-45.96, 124.28), controlPoint2: CGPointMake(-45.68, 124.76))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-29.58, 130), controlPoint1: CGPointMake(-40.48, 127.17), controlPoint2: CGPointMake(-35.1, 128.75))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-29.58, 130))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(0.69, 128.48), controlPoint1: CGPointMake(-19.63, 129), controlPoint2: CGPointMake(-9.53, 128.48))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(29.73, 129.88), controlPoint1: CGPointMake(10.49, 128.48), controlPoint2: CGPointMake(20.17, 128.95))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(44.43, 125.58), controlPoint1: CGPointMake(34.74, 128.72), controlPoint2: CGPointMake(39.65, 127.29))
        knobrotationmaskPath.addLineToPoint(CGPointMake(44.36, 125.4))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(44.99, 123.84), controlPoint1: CGPointMake(44.1, 124.8), controlPoint2: CGPointMake(44.39, 124.09))
        knobrotationmaskPath.addLineToPoint(CGPointMake(55.97, 119.17))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(57.54, 119.8), controlPoint1: CGPointMake(56.58, 118.91), controlPoint2: CGPointMake(57.28, 119.19))
        knobrotationmaskPath.addLineToPoint(CGPointMake(57.64, 120.05))
        knobrotationmaskPath.addLineToPoint(CGPointMake(57.64, 120.05))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(70.27, 113.06), controlPoint1: CGPointMake(61.99, 117.95), controlPoint2: CGPointMake(66.21, 115.61))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(91.05, 90.02), controlPoint1: CGPointMake(76.73, 105.11), controlPoint2: CGPointMake(83.65, 97.42))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(113, 70.09), controlPoint1: CGPointMake(98.11, 82.95), controlPoint2: CGPointMake(105.44, 76.3))
        knobrotationmaskPath.addLineToPoint(CGPointMake(113, 70.09))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(119.1, 59.1), controlPoint1: CGPointMake(115.2, 66.54), controlPoint2: CGPointMake(117.23, 62.87))
        knobrotationmaskPath.addLineToPoint(CGPointMake(119.1, 59.1))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(118.56, 57.58), controlPoint1: CGPointMake(118.55, 58.82), controlPoint2: CGPointMake(118.31, 58.15))
        knobrotationmaskPath.addLineToPoint(CGPointMake(123.22, 46.59))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(124.75, 45.94), controlPoint1: CGPointMake(123.47, 45.99), controlPoint2: CGPointMake(124.15, 45.7))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(130, 27.61), controlPoint1: CGPointMake(126.92, 40.01), controlPoint2: CGPointMake(128.68, 33.9))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(128.71, -0.32), controlPoint1: CGPointMake(129.15, 18.42), controlPoint2: CGPointMake(128.71, 9.1))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(129.95, -27.73), controlPoint1: CGPointMake(128.71, -9.56), controlPoint2: CGPointMake(129.13, -18.71))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(125.08, -44.9), controlPoint1: CGPointMake(128.71, -33.61), controlPoint2: CGPointMake(127.08, -39.34))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(123.68, -45.59), controlPoint1: CGPointMake(124.52, -44.75), controlPoint2: CGPointMake(123.91, -45.04))
        knobrotationmaskPath.addLineToPoint(CGPointMake(119.02, -56.58))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(119.54, -58.1), controlPoint1: CGPointMake(118.78, -57.15), controlPoint2: CGPointMake(119.01, -57.8))
        knobrotationmaskPath.addLineToPoint(CGPointMake(119.54, -58.1))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(111.59, -72.21), controlPoint1: CGPointMake(117.17, -62.97), controlPoint2: CGPointMake(114.52, -67.68))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(90.54, -91.39), controlPoint1: CGPointMake(104.35, -78.2), controlPoint2: CGPointMake(97.33, -84.6))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(71.76, -112.01), controlPoint1: CGPointMake(83.9, -98.04), controlPoint2: CGPointMake(77.64, -104.92))
        knobrotationmaskPath.addLineToPoint(CGPointMake(71.76, -112.01))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(60.41, -118.56), controlPoint1: CGPointMake(68.1, -114.37), controlPoint2: CGPointMake(64.31, -116.56))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(59.06, -118.3), controlPoint1: CGPointMake(60.07, -118.21), controlPoint2: CGPointMake(59.53, -118.09))
        knobrotationmaskPath.addLineToPoint(CGPointMake(48.17, -123.16))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(47.46, -124.35), controlPoint1: CGPointMake(47.69, -123.37), controlPoint2: CGPointMake(47.41, -123.86))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(28.72, -130), controlPoint1: CGPointMake(41.41, -126.68), controlPoint2: CGPointMake(35.15, -128.57))
        knobrotationmaskPath.addLineToPoint(CGPointMake(28.72, -130))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-0.26, -128.61), controlPoint1: CGPointMake(19.18, -129.08), controlPoint2: CGPointMake(9.52, -128.61))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-29.14, -129.99), controlPoint1: CGPointMake(-10, -128.61), controlPoint2: CGPointMake(-19.64, -129.08))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-44.69, -125.52), controlPoint1: CGPointMake(-34.45, -128.81), controlPoint2: CGPointMake(-39.64, -127.31))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-44.58, -125.26))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-45.23, -123.7), controlPoint1: CGPointMake(-44.33, -124.65), controlPoint2: CGPointMake(-44.62, -123.95))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-56.25, -119.13))
        knobrotationmaskPath.addCurveToPoint(CGPointMake(-57.81, -119.77), controlPoint1: CGPointMake(-56.86, -118.87), controlPoint2: CGPointMake(-57.55, -119.16))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-57.9, -120))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-57.9, -120))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-57.9, -120))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-57.9, -120))
        knobrotationmaskPath.addLineToPoint(CGPointMake(-57.9, -120))
        knobrotationmaskPath.closePath()
        knobrotationmaskPath.miterLimit = 4;

        knobrotationmaskPath.usesEvenOddFillRule = true;

                var knobrotationmaskTransformation = CGAffineTransformIdentity
        knobrotationmaskTransformation = CGAffineTransformTranslate(knobrotationmaskTransformation, knobRotation.minX + 135, knobRotation.minY + 135)
        knobrotationmaskTransformation = CGAffineTransformRotate(knobrotationmaskTransformation, -rotation * CGFloat(M_PI) / 180)

        knobrotationmaskPath.applyTransform(knobrotationmaskTransformation)
        knobrotationmaskPath.addClip()


        //// rotationBGFrame Drawing
        let rotationBGFrameRect = CGRectMake(knobRotation.minX - 5, knobRotation.minY - 5, 280, 280)
        let rotationBGFramePath = UIBezierPath(rect: rotationBGFrameRect)
        CGContextSaveGState(context)
        rotationBGFramePath.addClip()
        UIGroover.rotationBG.drawInRect(CGRectMake(floor(rotationBGFrameRect.minX + 0.5), floor(rotationBGFrameRect.minY + 0.5), UIGroover.rotationBG.size.width, UIGroover.rotationBG.size.height))
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// rotationBevels
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.49643 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextRotateCTM(context, -rotation * CGFloat(M_PI) / 180)



        //// bevel-8 Drawing
        let bevel8Path = UIBezierPath()
        bevel8Path.moveToPoint(CGPointMake(-73.06, -111.29))
        bevel8Path.addCurveToPoint(CGPointMake(-114.39, -69.98), controlPoint1: CGPointMake(-87.25, -94.4), controlPoint2: CGPointMake(-94.31, -86.86))
        bevel8Path.addLineToPoint(CGPointMake(-111.8, -73.66))
        bevel8Path.addCurveToPoint(CGPointMake(-77.22, -108.29), controlPoint1: CGPointMake(-96.51, -88.32), controlPoint2: CGPointMake(-89.79, -94.22))
        bevel8Path.addLineToPoint(CGPointMake(-73.06, -111.29))
        bevel8Path.closePath()
        bevel8Path.miterLimit = 4;

        bevel8Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        bevel8Path.addClip()
        CGContextDrawLinearGradient(context, linearGradient1,
            CGPointMake(-74.67, -111.32),
            CGPointMake(-112.97, -73.1),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)


        //// bevel-7 Drawing
        let bevel7Path = UIBezierPath()
        bevel7Path.moveToPoint(CGPointMake(-130.18, -29))
        bevel7Path.addCurveToPoint(CGPointMake(-130.2, 29.44), controlPoint1: CGPointMake(-128.27, -7.02), controlPoint2: CGPointMake(-127.93, 3.31))
        bevel7Path.addLineToPoint(CGPointMake(-130.97, 25))
        bevel7Path.addCurveToPoint(CGPointMake(-131, -23.93), controlPoint1: CGPointMake(-130.52, 3.82), controlPoint2: CGPointMake(-129.95, -5.1))
        bevel7Path.addLineToPoint(CGPointMake(-130.18, -29))
        bevel7Path.closePath()
        bevel7Path.miterLimit = 4;

        bevel7Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        bevel7Path.addClip()
        CGContextDrawLinearGradient(context, linearGradient1,
            CGPointMake(-131.34, -27.88),
            CGPointMake(-131.4, 26.23),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)


        //// bevel-6 Drawing
        let bevel6Path = UIBezierPath()
        bevel6Path.moveToPoint(CGPointMake(-111.68, 73))
        bevel6Path.addCurveToPoint(CGPointMake(-70.37, 114.33), controlPoint1: CGPointMake(-94.79, 87.19), controlPoint2: CGPointMake(-87.24, 94.25))
        bevel6Path.addLineToPoint(CGPointMake(-74.05, 111.75))
        bevel6Path.addCurveToPoint(CGPointMake(-108.68, 77.16), controlPoint1: CGPointMake(-88.71, 96.45), controlPoint2: CGPointMake(-94.61, 89.74))
        bevel6Path.addLineToPoint(CGPointMake(-111.68, 73))
        bevel6Path.closePath()
        bevel6Path.miterLimit = 4;

        bevel6Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        bevel6Path.addClip()
        CGContextDrawLinearGradient(context, linearGradient1,
            CGPointMake(-111.71, 74.61),
            CGPointMake(-73.49, 112.91),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)


        //// bevel-5 Drawing
        let bevel5Path = UIBezierPath()
        bevel5Path.moveToPoint(CGPointMake(-29.39, 130.19))
        bevel5Path.addCurveToPoint(CGPointMake(29.05, 130.21), controlPoint1: CGPointMake(-7.41, 128.28), controlPoint2: CGPointMake(2.92, 127.94))
        bevel5Path.addLineToPoint(CGPointMake(24.62, 130.98))
        bevel5Path.addCurveToPoint(CGPointMake(-24.32, 131.01), controlPoint1: CGPointMake(3.43, 130.53), controlPoint2: CGPointMake(-5.49, 129.96))
        bevel5Path.addLineToPoint(CGPointMake(-29.39, 130.19))
        bevel5Path.closePath()
        bevel5Path.miterLimit = 4;

        bevel5Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        bevel5Path.addClip()
        CGContextDrawLinearGradient(context, linearGradient1,
            CGPointMake(-28.27, 131.35),
            CGPointMake(25.84, 131.41),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)


        //// bevel-4 Drawing
        let bevel4Path = UIBezierPath()
        bevel4Path.moveToPoint(CGPointMake(70.11, 112.52))
        bevel4Path.addCurveToPoint(CGPointMake(111.44, 71.21), controlPoint1: CGPointMake(84.3, 95.63), controlPoint2: CGPointMake(91.36, 88.08))
        bevel4Path.addLineToPoint(CGPointMake(108.86, 74.89))
        bevel4Path.addCurveToPoint(CGPointMake(74.27, 109.51), controlPoint1: CGPointMake(93.56, 89.55), controlPoint2: CGPointMake(86.85, 95.45))
        bevel4Path.addLineToPoint(CGPointMake(70.11, 112.52))
        bevel4Path.closePath()
        bevel4Path.miterLimit = 4;

        bevel4Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        bevel4Path.addClip()
        CGContextDrawLinearGradient(context, linearGradient1,
            CGPointMake(71.73, 112.55),
            CGPointMake(110.02, 74.33),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)


        //// bevel-3 Drawing
        let bevel3Path = UIBezierPath()
        bevel3Path.moveToPoint(CGPointMake(129.79, 29.69))
        bevel3Path.addCurveToPoint(CGPointMake(130.1, -29), controlPoint1: CGPointMake(127.98, 7.63), controlPoint2: CGPointMake(127.69, -2.74))
        bevel3Path.addLineToPoint(CGPointMake(130.86, -24.55))
        bevel3Path.addCurveToPoint(CGPointMake(130.64, 24.6), controlPoint1: CGPointMake(130.3, -3.27), controlPoint2: CGPointMake(129.67, 5.69))
        bevel3Path.addLineToPoint(CGPointMake(129.79, 29.69))
        bevel3Path.closePath()
        bevel3Path.miterLimit = 4;

        bevel3Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        bevel3Path.addClip()
        CGContextDrawLinearGradient(context, linearGradient1,
            CGPointMake(130.96, 28.56),
            CGPointMake(131.29, -25.78),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)


        //// bevel-2 Drawing
        let bevel2Path = UIBezierPath()
        bevel2Path.moveToPoint(CGPointMake(111.7, -71.97))
        bevel2Path.addCurveToPoint(CGPointMake(71.34, -112.35), controlPoint1: CGPointMake(95.19, -85.84), controlPoint2: CGPointMake(87.82, -92.73))
        bevel2Path.addLineToPoint(CGPointMake(74.93, -109.82))
        bevel2Path.addCurveToPoint(CGPointMake(108.76, -76.04), controlPoint1: CGPointMake(89.26, -94.88), controlPoint2: CGPointMake(95.02, -88.32))
        bevel2Path.addLineToPoint(CGPointMake(111.7, -71.97))
        bevel2Path.closePath()
        bevel2Path.miterLimit = 4;

        bevel2Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        bevel2Path.addClip()
        CGContextDrawLinearGradient(context, linearGradient1,
            CGPointMake(111.72, -73.55),
            CGPointMake(74.38, -110.96),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)


        //// bevel-1 Drawing
        let bevel1Path = UIBezierPath()
        bevel1Path.moveToPoint(CGPointMake(29.38, -129.89))
        bevel1Path.addCurveToPoint(CGPointMake(-29.05, -129.9), controlPoint1: CGPointMake(7.4, -127.98), controlPoint2: CGPointMake(-2.92, -127.64))
        bevel1Path.addLineToPoint(CGPointMake(-24.62, -130.68))
        bevel1Path.addCurveToPoint(CGPointMake(24.31, -130.71), controlPoint1: CGPointMake(-3.44, -130.23), controlPoint2: CGPointMake(5.48, -129.65))
        bevel1Path.addLineToPoint(CGPointMake(29.38, -129.89))
        bevel1Path.closePath()
        bevel1Path.miterLimit = 4;

        bevel1Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        bevel1Path.addClip()
        CGContextDrawLinearGradient(context, linearGradient1,
            CGPointMake(28.26, -131.05),
            CGPointMake(-25.84, -131.1),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)



        CGContextRestoreGState(context)


        //// clickButton
        //// clickOval7 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, clickButton.minX + 12, clickButton.minY + 21)

        let clickOval7Path = UIBezierPath(ovalInRect: CGRectMake(-3, -3, 6, 6))
        clickColor.setFill()
        clickOval7Path.fill()
        clickDarkGray.setStroke()
        clickOval7Path.lineWidth = 1
        clickOval7Path.stroke()

        CGContextRestoreGState(context)


        //// clickOval6 Drawing
        let clickOval6Path = UIBezierPath(ovalInRect: CGRectMake(clickButton.minX, clickButton.minY + 18, 6, 6))
        clickColor.setFill()
        clickOval6Path.fill()
        clickDarkGray.setStroke()
        clickOval6Path.lineWidth = 1
        clickOval6Path.stroke()


        //// clickOval5 Drawing
        let clickOval5Path = UIBezierPath(ovalInRect: CGRectMake(clickButton.minX + 18, clickButton.minY + 9, 6, 6))
        clickColor.setFill()
        clickOval5Path.fill()
        clickDarkGray.setStroke()
        clickOval5Path.lineWidth = 1
        clickOval5Path.stroke()


        //// clickOval4 Drawing
        let clickOval4Path = UIBezierPath(ovalInRect: CGRectMake(clickButton.minX + 9, clickButton.minY + 9, 6, 6))
        clickColor.setFill()
        clickOval4Path.fill()
        clickDarkGray.setStroke()
        clickOval4Path.lineWidth = 1
        clickOval4Path.stroke()


        //// clickOval3 Drawing
        let clickOval3Path = UIBezierPath(ovalInRect: CGRectMake(clickButton.minX, clickButton.minY + 9, 6, 6))
        clickColor.setFill()
        clickOval3Path.fill()
        clickDarkGray.setStroke()
        clickOval3Path.lineWidth = 1
        clickOval3Path.stroke()


        //// clickOval2 Drawing
        let clickOval2Path = UIBezierPath(ovalInRect: CGRectMake(clickButton.minX + 18, clickButton.minY, 6, 6))
        clickColor.setFill()
        clickOval2Path.fill()
        clickDarkGray.setStroke()
        clickOval2Path.lineWidth = 1
        clickOval2Path.stroke()


        //// clickOval1 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, clickButton.minX + 12, clickButton.minY + 3)

        let clickOval1Path = UIBezierPath(ovalInRect: CGRectMake(-3, -3, 6, 6))
        clickColor.setFill()
        clickOval1Path.fill()
        clickDarkGray.setStroke()
        clickOval1Path.lineWidth = 1
        clickOval1Path.stroke()

        CGContextRestoreGState(context)




        if (clickRingActive) {
            //// clickRing Drawing
            let clickRingPath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.28571 + 0.5), frame.minY + floor((frame.height - 118) * 0.50000 + 0.5), floor(frame.width * 0.70714 + 0.5) - floor(frame.width * 0.28571 + 0.5), 118))
            strokeColor2.setStroke()
            clickRingPath.lineWidth = 2
            clickRingPath.stroke()
        }
    }

    public class func drawPositionsCanvas(position1Selected position1Selected: Bool = false, position2Selected: Bool = false, position3Selected: Bool = false, position4Selected: Bool = false, position5Selected: Bool = false, position6Selected: Bool = false, position7Selected: Bool = false, position8Selected: Bool = false, position9Selected: Bool = false, position10Selected: Bool = false, position11Selected: Bool = false, position12Selected: Bool = false, position13Selected: Bool = false, position14Selected: Bool = false, position15Selected: Bool = false, position16Selected: Bool = false, position17Selected: Bool = false, position18Selected: Bool = false) {
        //// Color Declarations
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let buttonsBGLight = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let position1Color = position1Selected ? lightBlue : buttonsBGLight
        let position2Color = position2Selected ? lightBlue : buttonsBGLight
        let position3Color = position3Selected ? lightBlue : buttonsBGLight
        let position4Color = position4Selected ? lightBlue : buttonsBGLight
        let position5Color = position5Selected ? lightBlue : buttonsBGLight
        let position6Color = position6Selected ? lightBlue : buttonsBGLight
        let position7Color = position7Selected ? lightBlue : buttonsBGLight
        let position8Color = position8Selected ? lightBlue : buttonsBGLight
        let position9Color = position9Selected ? lightBlue : buttonsBGLight
        let position10Color = position10Selected ? lightBlue : buttonsBGLight
        let position11Color = position11Selected ? lightBlue : buttonsBGLight
        let position12Color = position12Selected ? lightBlue : buttonsBGLight
        let position13Color = position13Selected ? lightBlue : buttonsBGLight
        let position14Color = position14Selected ? lightBlue : buttonsBGLight
        let position15Color = position15Selected ? lightBlue : buttonsBGLight
        let position16Color = position16Selected ? lightBlue : buttonsBGLight
        let position17Color = position17Selected ? lightBlue : buttonsBGLight
        let position18Color = position18Selected ? lightBlue : buttonsBGLight

        //// position1 Drawing
        let position1Path = UIBezierPath(roundedRect: CGRectMake(26, 0, 13, 13), cornerRadius: 2)
        position1Color.setFill()
        position1Path.fill()


        //// position2 Drawing
        let position2Path = UIBezierPath(roundedRect: CGRectMake(41, 0, 13, 13), cornerRadius: 2)
        position2Color.setFill()
        position2Path.fill()


        //// position3 Drawing
        let position3Path = UIBezierPath(roundedRect: CGRectMake(56, 0, 13, 13), cornerRadius: 2)
        position3Color.setFill()
        position3Path.fill()


        //// position4 Drawing
        let position4Path = UIBezierPath(roundedRect: CGRectMake(71, 0, 13, 13), cornerRadius: 2)
        position4Color.setFill()
        position4Path.fill()


        //// position5 Drawing
        let position5Path = UIBezierPath(roundedRect: CGRectMake(86, 0, 13, 13), cornerRadius: 2)
        position5Color.setFill()
        position5Path.fill()


        //// position6 Drawing
        let position6Path = UIBezierPath(roundedRect: CGRectMake(101, 0, 13, 13), cornerRadius: 2)
        position6Color.setFill()
        position6Path.fill()


        //// position7 Drawing
        let position7Path = UIBezierPath(roundedRect: CGRectMake(116, 0, 13, 13), cornerRadius: 2)
        position7Color.setFill()
        position7Path.fill()


        //// position8 Drawing
        let position8Path = UIBezierPath(roundedRect: CGRectMake(131, 0, 13, 13), cornerRadius: 2)
        position8Color.setFill()
        position8Path.fill()


        //// position9 Drawing
        let position9Path = UIBezierPath(roundedRect: CGRectMake(146, 0, 13, 13), cornerRadius: 2)
        position9Color.setFill()
        position9Path.fill()


        //// position10 Drawing
        let position10Path = UIBezierPath(roundedRect: CGRectMake(161, 0, 13, 13), cornerRadius: 2)
        position10Color.setFill()
        position10Path.fill()


        //// position11 Drawing
        let position11Path = UIBezierPath(roundedRect: CGRectMake(176, 0, 13, 13), cornerRadius: 2)
        position11Color.setFill()
        position11Path.fill()


        //// position12 Drawing
        let position12Path = UIBezierPath(roundedRect: CGRectMake(191, 0, 13, 13), cornerRadius: 2)
        position12Color.setFill()
        position12Path.fill()


        //// position13 Drawing
        let position13Path = UIBezierPath(roundedRect: CGRectMake(206, 0, 13, 13), cornerRadius: 2)
        position13Color.setFill()
        position13Path.fill()


        //// position14 Drawing
        let position14Path = UIBezierPath(roundedRect: CGRectMake(221, 0, 13, 13), cornerRadius: 2)
        position14Color.setFill()
        position14Path.fill()


        //// position15 Drawing
        let position15Path = UIBezierPath(roundedRect: CGRectMake(236, 0, 13, 13), cornerRadius: 2)
        position15Color.setFill()
        position15Path.fill()


        //// position16 Drawing
        let position16Path = UIBezierPath(roundedRect: CGRectMake(251, 0, 13, 13), cornerRadius: 2)
        position16Color.setFill()
        position16Path.fill()


        //// position17 Drawing
        let position17Path = UIBezierPath(roundedRect: CGRectMake(266, 0, 13, 13), cornerRadius: 2)
        position17Color.setFill()
        position17Path.fill()


        //// position18 Drawing
        let position18Path = UIBezierPath(roundedRect: CGRectMake(281, 0, 13, 13), cornerRadius: 2)
        position18Color.setFill()
        position18Path.fill()
    }

    public class func drawPlayCanvas(playSelected playSelected: Bool = false) {
        //// Color Declarations
        let transportDark = UIColor(red: 0.043, green: 0.082, blue: 0.157, alpha: 1.000)
        let transportGreen = UIColor(red: 0.078, green: 0.576, blue: 0.059, alpha: 1.000)

        //// Variable Declarations
        let playColor = playSelected ? transportGreen : transportDark

        //// playButton Drawing
        let playButtonPath = UIBezierPath()
        playButtonPath.moveToPoint(CGPointMake(11, 33))
        playButtonPath.addLineToPoint(CGPointMake(11, 11))
        playButtonPath.addLineToPoint(CGPointMake(33, 22))
        playButtonPath.addLineToPoint(CGPointMake(11, 33))
        playButtonPath.closePath()
        playButtonPath.miterLimit = 4;

        playButtonPath.usesEvenOddFillRule = true;

        playColor.setFill()
        playButtonPath.fill()
    }
    
    public class func drawClearCanvas(clearSelected clearSelected: Bool = false) {
        //// Color Declarations
        let transportDark = UIColor(red: 0.043, green: 0.082, blue: 0.157, alpha: 1.000)
        let transportPurple = UIColor(red: 0.79, green: 0.48, blue: 0.90, alpha: 1.000)
        
        //// Variable Declarations
        let clearColor = clearSelected ? transportPurple : transportDark
        
        //// recordButton Drawing
        let clearButtonPath = UIBezierPath(ovalInRect: CGRectMake(0, 0, 22, 22))
        clearColor.setFill()
        clearButtonPath.fill()
        
    }

    public class func drawRecordCanvas(recordSelected recordSelected: Bool = false) {
        //// Color Declarations
        let transportDark = UIColor(red: 0.043, green: 0.082, blue: 0.157, alpha: 1.000)
        let transportRed = UIColor(red: 0.616, green: 0.141, blue: 0.157, alpha: 1.000)

        //// Variable Declarations
        let recordColor = recordSelected ? transportRed : transportDark

        //// recordButton Drawing
        let recordButtonPath = UIBezierPath(ovalInRect: CGRectMake(11, 11, 22, 22))
        recordColor.setFill()
        recordButtonPath.fill()
    }

    public class func drawHamburgerCanvas(hamburgerSelected hamburgerSelected: Bool = false) {
        //// Color Declarations
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let menuGray = UIColor(red: 0.800, green: 0.847, blue: 0.890, alpha: 1.000)

        //// Variable Declarations
        let hamburgerColor = hamburgerSelected ? lightBlue : menuGray

        //// hamburgerBottom Drawing
        let hamburgerBottomPath = UIBezierPath(roundedRect: CGRectMake(0, 12, 22, 3), cornerRadius: 1)
        hamburgerColor.setFill()
        hamburgerBottomPath.fill()


        //// hamburgerMiddle Drawing
        let hamburgerMiddlePath = UIBezierPath(roundedRect: CGRectMake(0, 6, 22, 3), cornerRadius: 1)
        hamburgerColor.setFill()
        hamburgerMiddlePath.fill()


        //// hamburgerTop Drawing
        let hamburgerTopPath = UIBezierPath(roundedRect: CGRectMake(0, 0, 22, 3), cornerRadius: 1)
        hamburgerColor.setFill()
        hamburgerTopPath.fill()
    }

    public class func drawSettingsIconCanvas(settingsSelected settingsSelected: Bool = false) {
        //// Color Declarations
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let menuGray = UIColor(red: 0.800, green: 0.847, blue: 0.890, alpha: 1.000)

        //// Variable Declarations
        let settingsColor = settingsSelected ? lightBlue : menuGray

        //// settingsButton Drawing
        let settingsButtonPath = UIBezierPath()
        settingsButtonPath.moveToPoint(CGPointMake(22, 12.35))
        settingsButtonPath.addLineToPoint(CGPointMake(22, 9.6))
        settingsButtonPath.addLineToPoint(CGPointMake(18.73, 9.07))
        settingsButtonPath.addCurveToPoint(CGPointMake(17.83, 6.9), controlPoint1: CGPointMake(18.53, 8.29), controlPoint2: CGPointMake(18.23, 7.56))
        settingsButtonPath.addLineToPoint(CGPointMake(19.74, 4.18))
        settingsButtonPath.addLineToPoint(CGPointMake(17.79, 2.24))
        settingsButtonPath.addLineToPoint(CGPointMake(15.11, 4.17))
        settingsButtonPath.addCurveToPoint(CGPointMake(12.92, 3.26), controlPoint1: CGPointMake(14.44, 3.76), controlPoint2: CGPointMake(13.7, 3.45))
        settingsButtonPath.addLineToPoint(CGPointMake(12.35, 0))
        settingsButtonPath.addLineToPoint(CGPointMake(9.6, 0))
        settingsButtonPath.addLineToPoint(CGPointMake(9.07, 3.25))
        settingsButtonPath.addCurveToPoint(CGPointMake(6.88, 4.15), controlPoint1: CGPointMake(8.29, 3.44), controlPoint2: CGPointMake(7.56, 3.74))
        settingsButtonPath.addLineToPoint(CGPointMake(4.21, 2.23))
        settingsButtonPath.addLineToPoint(CGPointMake(2.26, 4.18))
        settingsButtonPath.addLineToPoint(CGPointMake(4.15, 6.87))
        settingsButtonPath.addCurveToPoint(CGPointMake(3.23, 9.07), controlPoint1: CGPointMake(3.74, 7.54), controlPoint2: CGPointMake(3.43, 8.28))
        settingsButtonPath.addLineToPoint(CGPointMake(0, 9.6))
        settingsButtonPath.addLineToPoint(CGPointMake(0, 12.35))
        settingsButtonPath.addLineToPoint(CGPointMake(3.23, 12.93))
        settingsButtonPath.addCurveToPoint(CGPointMake(4.14, 15.12), controlPoint1: CGPointMake(3.42, 13.71), controlPoint2: CGPointMake(3.73, 14.45))
        settingsButtonPath.addLineToPoint(CGPointMake(2.23, 17.79))
        settingsButtonPath.addLineToPoint(CGPointMake(4.18, 19.73))
        settingsButtonPath.addLineToPoint(CGPointMake(6.87, 17.85))
        settingsButtonPath.addCurveToPoint(CGPointMake(9.06, 18.75), controlPoint1: CGPointMake(7.55, 18.25), controlPoint2: CGPointMake(8.28, 18.56))
        settingsButtonPath.addLineToPoint(CGPointMake(9.6, 22))
        settingsButtonPath.addLineToPoint(CGPointMake(12.35, 22))
        settingsButtonPath.addLineToPoint(CGPointMake(12.93, 18.74))
        settingsButtonPath.addCurveToPoint(CGPointMake(15.11, 17.83), controlPoint1: CGPointMake(13.71, 18.55), controlPoint2: CGPointMake(14.44, 18.24))
        settingsButtonPath.addLineToPoint(CGPointMake(17.82, 19.73))
        settingsButtonPath.addLineToPoint(CGPointMake(19.77, 17.79))
        settingsButtonPath.addLineToPoint(CGPointMake(17.83, 15.1))
        settingsButtonPath.addCurveToPoint(CGPointMake(18.73, 12.93), controlPoint1: CGPointMake(18.23, 14.43), controlPoint2: CGPointMake(18.54, 13.7))
        settingsButtonPath.addLineToPoint(CGPointMake(22, 12.35))
        settingsButtonPath.addLineToPoint(CGPointMake(22, 12.35))
        settingsButtonPath.closePath()
        settingsButtonPath.moveToPoint(CGPointMake(11, 14.67))
        settingsButtonPath.addCurveToPoint(CGPointMake(7.33, 11), controlPoint1: CGPointMake(8.98, 14.67), controlPoint2: CGPointMake(7.33, 13.02))
        settingsButtonPath.addCurveToPoint(CGPointMake(11, 7.33), controlPoint1: CGPointMake(7.33, 8.98), controlPoint2: CGPointMake(8.98, 7.33))
        settingsButtonPath.addCurveToPoint(CGPointMake(14.67, 11), controlPoint1: CGPointMake(13.02, 7.33), controlPoint2: CGPointMake(14.67, 8.98))
        settingsButtonPath.addCurveToPoint(CGPointMake(11, 14.67), controlPoint1: CGPointMake(14.67, 13.02), controlPoint2: CGPointMake(13.02, 14.67))
        settingsButtonPath.addLineToPoint(CGPointMake(11, 14.67))
        settingsButtonPath.closePath()
        settingsButtonPath.miterLimit = 4;

        settingsButtonPath.usesEvenOddFillRule = true;

        settingsColor.setFill()
        settingsButtonPath.fill()
    }

    public class func drawLeftCanvas() {
        //// Color Declarations
        let popupElements = UIColor(red: 0.800, green: 0.847, blue: 0.890, alpha: 0.698)

        //// leftArrow Drawing
        let leftArrowPath = UIBezierPath()
        leftArrowPath.moveToPoint(CGPointMake(0, 6))
        leftArrowPath.addLineToPoint(CGPointMake(12, 12))
        leftArrowPath.addLineToPoint(CGPointMake(12, 0))
        leftArrowPath.addLineToPoint(CGPointMake(0, 6))
        leftArrowPath.closePath()
        leftArrowPath.miterLimit = 4;

        leftArrowPath.usesEvenOddFillRule = true;

        popupElements.setFill()
        leftArrowPath.fill()
    }

    public class func drawRightCanvas() {
        //// Color Declarations
        let popupElements = UIColor(red: 0.800, green: 0.847, blue: 0.890, alpha: 0.698)

        //// rightButton Drawing
        let rightButtonPath = UIBezierPath()
        rightButtonPath.moveToPoint(CGPointMake(12, 6))
        rightButtonPath.addLineToPoint(CGPointMake(0, 12))
        rightButtonPath.addLineToPoint(CGPointMake(0, 0))
        rightButtonPath.addLineToPoint(CGPointMake(12, 6))
        rightButtonPath.closePath()
        rightButtonPath.miterLimit = 4;

        rightButtonPath.usesEvenOddFillRule = true;

        popupElements.setFill()
        rightButtonPath.fill()
    }
    
    public class func drawPopupCanvas(popupPath: UIBezierPath){
        popupPath.moveToPoint(CGPointMake(36.27, 302))
        popupPath.addLineToPoint(CGPointMake(59.54, 302))
        popupPath.addLineToPoint(CGPointMake(71.33, 313.79))
        popupPath.addCurveToPoint(CGPointMake(75.58, 313.79), controlPoint1: CGPointMake(72.5, 314.96), controlPoint2: CGPointMake(74.41, 314.96))
        popupPath.addLineToPoint(CGPointMake(87.37, 302))
        popupPath.addLineToPoint(CGPointMake(87.37, 302))
        popupPath.addLineToPoint(CGPointMake(187.18, 302))
        popupPath.addLineToPoint(CGPointMake(297.01, 302))
        popupPath.addCurveToPoint(CGPointMake(300, 299), controlPoint1: CGPointMake(298.66, 302), controlPoint2: CGPointMake(300, 300.66))
        popupPath.addLineToPoint(CGPointMake(300, 3))
        popupPath.addCurveToPoint(CGPointMake(297.01, 0), controlPoint1: CGPointMake(300, 1.35), controlPoint2: CGPointMake(298.66, 0))
        popupPath.addLineToPoint(CGPointMake(2.99, 0))
        popupPath.addCurveToPoint(CGPointMake(0, 3), controlPoint1: CGPointMake(1.34, 0), controlPoint2: CGPointMake(0, 1.34))
        popupPath.addLineToPoint(CGPointMake(0, 299))
        popupPath.addCurveToPoint(CGPointMake(2.99, 302), controlPoint1: CGPointMake(0, 300.65), controlPoint2: CGPointMake(1.34, 302))
        popupPath.addLineToPoint(CGPointMake(36.27, 302))
        popupPath.closePath()
        popupPath.usesEvenOddFillRule = true
        
    }

    public class func drawParametersPopupCanvas(largePopupFrame largePopupFrame: CGRect = CGRectMake(10, 11, 300, 345)) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)


        //// Subframes
        let smallPopupFrame = CGRectMake(largePopupFrame.minX + floor((largePopupFrame.width - 50) * 1.00000 + 0.5), largePopupFrame.minY - 13, 50, 42)


        //// popupBody Drawing
        let popupBodyPath = UIBezierPath(roundedRect: CGRectMake(smallPopupFrame.minX - 250, smallPopupFrame.minY + 13, smallPopupFrame.width + 250, smallPopupFrame.height + 303), cornerRadius: 3)
        black.setFill()
        popupBodyPath.fill()


        //// popupPointer Drawing
        let popupPointerPath = UIBezierPath()
        popupPointerPath.moveToPoint(CGPointMake(smallPopupFrame.minX + 25.29, smallPopupFrame.minY + 1.5))
        popupPointerPath.addCurveToPoint(CGPointMake(smallPopupFrame.minX + 26.66, smallPopupFrame.minY + 2.66), controlPoint1: CGPointMake(smallPopupFrame.minX + 25.73, smallPopupFrame.minY + 1.73), controlPoint2: CGPointMake(smallPopupFrame.minX + 26.04, smallPopupFrame.minY + 2.04))
        popupPointerPath.addCurveToPoint(CGPointMake(smallPopupFrame.minX + 46, smallPopupFrame.minY + 22), controlPoint1: CGPointMake(smallPopupFrame.minX + 26.66, smallPopupFrame.minY + 2.66), controlPoint2: CGPointMake(smallPopupFrame.minX + 36.21, smallPopupFrame.minY + 12.21))
        popupPointerPath.addLineToPoint(CGPointMake(smallPopupFrame.minX + 3, smallPopupFrame.minY + 22))
        popupPointerPath.addCurveToPoint(CGPointMake(smallPopupFrame.minX + 22.34, smallPopupFrame.minY + 2.66), controlPoint1: CGPointMake(smallPopupFrame.minX + 12.79, smallPopupFrame.minY + 12.21), controlPoint2: CGPointMake(smallPopupFrame.minX + 22.34, smallPopupFrame.minY + 2.66))
        popupPointerPath.addCurveToPoint(CGPointMake(smallPopupFrame.minX + 23.65, smallPopupFrame.minY + 1.54), controlPoint1: CGPointMake(smallPopupFrame.minX + 22.96, smallPopupFrame.minY + 2.04), controlPoint2: CGPointMake(smallPopupFrame.minX + 23.27, smallPopupFrame.minY + 1.73))
        popupPointerPath.addCurveToPoint(CGPointMake(smallPopupFrame.minX + 25.29, smallPopupFrame.minY + 1.5), controlPoint1: CGPointMake(smallPopupFrame.minX + 24.21, smallPopupFrame.minY + 1.27), controlPoint2: CGPointMake(smallPopupFrame.minX + 24.79, smallPopupFrame.minY + 1.27))
        popupPointerPath.closePath()
        black.setFill()
        popupPointerPath.fill()
    }

    public class func drawPopupButtonCanvas() {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Button Drawing
        let buttonPath = UIBezierPath(roundedRect: CGRectMake(0, 0, 114, 44), cornerRadius: 6)
        black.setFill()
        buttonPath.fill()
    }

}
