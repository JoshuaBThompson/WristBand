//
//  UIGroover.swift
//  Groover
//
//  Created by Alex on 2/21/17.
//  Copyright Â© 2017 TCM. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class UIGroover : NSObject {

    //// Cache

    private struct Cache {
        static let black: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let lightBlue: UIColor = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        static let noteGray: UIColor = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        static let noteDark: UIColor = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)
        static let soundParamtersBG: UIColor = UIColor(red: 0.094, green: 0.114, blue: 0.133, alpha: 1.000)
        static let buttonsBGLight: UIColor = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)
        static let transportDark: UIColor = UIColor(red: 0.043, green: 0.082, blue: 0.157, alpha: 1.000)
        static let transportGreen: UIColor = UIColor(red: 0.078, green: 0.576, blue: 0.059, alpha: 1.000)
        static let transportRed: UIColor = UIColor(red: 0.616, green: 0.141, blue: 0.157, alpha: 1.000)
        static let menuGray: UIColor = UIColor(red: 0.800, green: 0.847, blue: 0.890, alpha: 1.000)
        static let strokeColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let clickGray: UIColor = UIColor(red: 0.400, green: 0.435, blue: 0.471, alpha: 1.000)
        static let clickDarkGray: UIColor = UIColor(red: 0.329, green: 0.345, blue: 0.361, alpha: 1.000)
        static let popupElements: UIColor = UIColor(red: 0.800, green: 0.847, blue: 0.890, alpha: 0.698)
        static let white: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let knobGradientColor1: UIColor = UIColor(red: 0.113, green: 0.155, blue: 0.229, alpha: 1.000)
        static let knobGradientColor2: UIColor = UIColor(red: 0.251, green: 0.306, blue: 0.364, alpha: 1.000)
        static let knobGradientColor3: UIColor = UIColor(red: 0.104, green: 0.140, blue: 0.202, alpha: 1.000)
        static let measureDark: UIColor = UIColor(red: 0.137, green: 0.431, blue: 0.604, alpha: 1.000)
        static let transparent: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)
        static let popupContentLight: UIColor = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        static let popupContentDark: UIColor = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)
        static var fullBackground: UIImage?
        static var knobBG: UIImage?
        static var rotationBG: UIImage?
        static var hamburgerIconImage: UIImage?
        static var settingsIconImage: UIImage?
        static var fullBackgroundBlur: UIImage?
        static var fullPopupBackgroundBlur: UIImage?
        static var drumIcon: UIImage?
        static var cassetteIcon: UIImage?
        static var gearIcon: UIImage?
        static var drumIconSelected: UIImage?
        static var cassetteIconSelected: UIImage?
        static var geariconSelected: UIImage?

    }

    //// Colors

    public dynamic class var black: UIColor { return Cache.black }
    public dynamic class var lightBlue: UIColor { return Cache.lightBlue }
    public dynamic class var noteGray: UIColor { return Cache.noteGray }
    public dynamic class var noteDark: UIColor { return Cache.noteDark }
    public dynamic class var soundParamtersBG: UIColor { return Cache.soundParamtersBG }
    public dynamic class var buttonsBGLight: UIColor { return Cache.buttonsBGLight }
    public dynamic class var transportDark: UIColor { return Cache.transportDark }
    public dynamic class var transportGreen: UIColor { return Cache.transportGreen }
    public dynamic class var transportRed: UIColor { return Cache.transportRed }
    public dynamic class var menuGray: UIColor { return Cache.menuGray }
    public dynamic class var strokeColor: UIColor { return Cache.strokeColor }
    public dynamic class var clickGray: UIColor { return Cache.clickGray }
    public dynamic class var clickDarkGray: UIColor { return Cache.clickDarkGray }
    public dynamic class var popupElements: UIColor { return Cache.popupElements }
    public dynamic class var white: UIColor { return Cache.white }
    public dynamic class var knobGradientColor1: UIColor { return Cache.knobGradientColor1 }
    public dynamic class var knobGradientColor2: UIColor { return Cache.knobGradientColor2 }
    public dynamic class var knobGradientColor3: UIColor { return Cache.knobGradientColor3 }
    public dynamic class var measureDark: UIColor { return Cache.measureDark }
    public dynamic class var transparent: UIColor { return Cache.transparent }
    public dynamic class var popupContentLight: UIColor { return Cache.popupContentLight }
    public dynamic class var popupContentDark: UIColor { return Cache.popupContentDark }

    //// Images

    public dynamic class var fullBackground: UIImage {
        if Cache.fullBackground == nil {
            Cache.fullBackground = UIImage(named: "fullBackground.png")!
        }
        return Cache.fullBackground!
    }

    public dynamic class var knobBG: UIImage {
        if Cache.knobBG == nil {
            Cache.knobBG = UIImage(named: "knobBG.png")!
        }
        return Cache.knobBG!
    }

    public dynamic class var rotationBG: UIImage {
        if Cache.rotationBG == nil {
            Cache.rotationBG = UIImage(named: "rotationBG.png")!
        }
        return Cache.rotationBG!
    }

    public dynamic class var hamburgerIconImage: UIImage {
        if Cache.hamburgerIconImage == nil {
            Cache.hamburgerIconImage = UIImage(named: "hamburgerIconImage.png")!
        }
        return Cache.hamburgerIconImage!
    }

    public dynamic class var settingsIconImage: UIImage {
        if Cache.settingsIconImage == nil {
            Cache.settingsIconImage = UIImage(named: "settingsIconImage.png")!
        }
        return Cache.settingsIconImage!
    }

    public dynamic class var fullBackgroundBlur: UIImage {
        if Cache.fullBackgroundBlur == nil {
            Cache.fullBackgroundBlur = UIImage(named: "fullBackgroundBlur.png")!
        }
        return Cache.fullBackgroundBlur!
    }

    public dynamic class var fullPopupBackgroundBlur: UIImage {
        if Cache.fullPopupBackgroundBlur == nil {
            Cache.fullPopupBackgroundBlur = UIImage(named: "fullPopupBackgroundBlur.png")!
        }
        return Cache.fullPopupBackgroundBlur!
    }

    public dynamic class var drumIcon: UIImage {
        if Cache.drumIcon == nil {
            Cache.drumIcon = UIImage(named: "drumIcon.png")!
        }
        return Cache.drumIcon!
    }

    public dynamic class var cassetteIcon: UIImage {
        if Cache.cassetteIcon == nil {
            Cache.cassetteIcon = UIImage(named: "cassetteIcon.png")!
        }
        return Cache.cassetteIcon!
    }

    public dynamic class var gearIcon: UIImage {
        if Cache.gearIcon == nil {
            Cache.gearIcon = UIImage(named: "gearIcon.png")!
        }
        return Cache.gearIcon!
    }

    public dynamic class var drumIconSelected: UIImage {
        if Cache.drumIconSelected == nil {
            Cache.drumIconSelected = UIImage(named: "drumIconSelected.png")!
        }
        return Cache.drumIconSelected!
    }

    public dynamic class var cassetteIconSelected: UIImage {
        if Cache.cassetteIconSelected == nil {
            Cache.cassetteIconSelected = UIImage(named: "cassetteIconSelected.png")!
        }
        return Cache.cassetteIconSelected!
    }

    public dynamic class var geariconSelected: UIImage {
        if Cache.geariconSelected == nil {
            Cache.geariconSelected = UIImage(named: "geariconSelected.png")!
        }
        return Cache.geariconSelected!
    }

    //// Drawing Methods

    public dynamic class func drawSoundParametersCanvas(soundParamteresFrame: CGRect = CGRect(x: 0, y: 0, width: 42, height: 42), soundParametersSelected: Bool = false) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// soundParametersBase Drawing
        let soundParametersBasePath = UIBezierPath(ovalIn: CGRect(x: soundParamteresFrame.minX + fastFloor(soundParamteresFrame.width * 0.02381 + 0.5), y: soundParamteresFrame.minY + fastFloor(soundParamteresFrame.height * 0.02381 + 0.5), width: fastFloor(soundParamteresFrame.width * 0.97619 + 0.5) - fastFloor(soundParamteresFrame.width * 0.02381 + 0.5), height: fastFloor(soundParamteresFrame.height * 0.97619 + 0.5) - fastFloor(soundParamteresFrame.height * 0.02381 + 0.5)))
        UIGroover.soundParamtersBG.setFill()
        soundParametersBasePath.fill()


        //// soundParametersOutline Drawing
        let soundParametersOutlinePath = UIBezierPath(ovalIn: CGRect(x: soundParamteresFrame.minX + fastFloor(soundParamteresFrame.width * 0.07143 + 0.5), y: soundParamteresFrame.minY + fastFloor(soundParamteresFrame.height * 0.07143 + 0.5), width: fastFloor(soundParamteresFrame.width * 0.92857 + 0.5) - fastFloor(soundParamteresFrame.width * 0.07143 + 0.5), height: fastFloor(soundParamteresFrame.height * 0.92857 + 0.5) - fastFloor(soundParamteresFrame.height * 0.07143 + 0.5)))
        UIGroover.black.setStroke()
        soundParametersOutlinePath.lineWidth = 5
        soundParametersOutlinePath.stroke()


        //// soundParametersLight Drawing
        let soundParametersLightPath = UIBezierPath(ovalIn: CGRect(x: soundParamteresFrame.minX + fastFloor(soundParamteresFrame.width * 0.26190 + 0.5), y: soundParamteresFrame.minY + fastFloor(soundParamteresFrame.height * 0.26190 + 0.5), width: fastFloor(soundParamteresFrame.width * 0.73810 + 0.5) - fastFloor(soundParamteresFrame.width * 0.26190 + 0.5), height: fastFloor(soundParamteresFrame.height * 0.73810 + 0.5) - fastFloor(soundParamteresFrame.height * 0.26190 + 0.5)))
        UIGroover.buttonsBGLight.setFill()
        soundParametersLightPath.fill()


        //// soundParametersBlue Drawing
        let soundParametersBluePath = UIBezierPath(roundedRect: CGRect(x: soundParamteresFrame.minX + fastFloor(soundParamteresFrame.width * 0.40476 + 0.5), y: soundParamteresFrame.minY + fastFloor(soundParamteresFrame.height * 0.40476 + 0.5), width: fastFloor(soundParamteresFrame.width * 0.59524 + 0.5) - fastFloor(soundParamteresFrame.width * 0.40476 + 0.5), height: fastFloor(soundParamteresFrame.height * 0.59524 + 0.5) - fastFloor(soundParamteresFrame.height * 0.40476 + 0.5)), cornerRadius: 2)
        UIGroover.lightBlue.setFill()
        soundParametersBluePath.fill()


        if (soundParametersSelected) {
            //// soundParametersBlueOutline Drawing
            let soundParametersBlueOutlinePath = UIBezierPath(ovalIn: CGRect(x: soundParamteresFrame.minX + fastFloor(soundParamteresFrame.width * 0.26190 + 0.5), y: soundParamteresFrame.minY + fastFloor(soundParamteresFrame.height * 0.26190 + 0.5), width: fastFloor(soundParamteresFrame.width * 0.73810 + 0.5) - fastFloor(soundParamteresFrame.width * 0.26190 + 0.5), height: fastFloor(soundParamteresFrame.height * 0.73810 + 0.5) - fastFloor(soundParamteresFrame.height * 0.26190 + 0.5)))
            UIGroover.lightBlue.setStroke()
            soundParametersBlueOutlinePath.lineWidth = 2
            soundParametersBlueOutlinePath.stroke()
        }
    }

    public dynamic class func drawKnobCanvasSE(knobFrame: CGRect = CGRect(x: 0, y: 0, width: 270, height: 270), rotation: CGFloat = 0, clickSelected: Bool = false, clickRingActive: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Gradient Declarations
        let linearGradient1 = CGGradient(colorsSpace: nil, colors: [UIGroover.knobGradientColor1.cgColor, UIGroover.knobGradientColor2.cgColor, UIGroover.knobGradientColor3.cgColor] as CFArray, locations: [0, 0.51, 1])!

        //// Variable Declarations
        let clickColor = clickSelected ? UIGroover.lightBlue : UIGroover.clickGray


        //// Subframes
        let knobRotation: CGRect = CGRect(x: knobFrame.minX + fastFloor((knobFrame.width - 270) / 2 + 0.5), y: knobFrame.minY + fastFloor((knobFrame.height - 270) / 2 + 0.5), width: 270, height: 270)
        let clickButton: CGRect = CGRect(x: knobFrame.minX + fastFloor((knobFrame.width - 24) * 0.50000 + 0.5), y: knobFrame.minY + fastFloor((knobFrame.height - 24) * 0.50000 + 0.5), width: 24, height: 24)


        //// knobRotation
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip knob-rotation-mask
        let knobrotationmaskPath = UIBezierPath()
        knobrotationmaskPath.move(to: CGPoint(x: 0, y: 135))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 135, y: 0), controlPoint1: CGPoint(x: 74.56, y: 135), controlPoint2: CGPoint(x: 135, y: 74.56))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 0, y: -135), controlPoint1: CGPoint(x: 135, y: -74.56), controlPoint2: CGPoint(x: 74.56, y: -135))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -135, y: 0), controlPoint1: CGPoint(x: -74.56, y: -135), controlPoint2: CGPoint(x: -135, y: -74.56))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 0, y: 135), controlPoint1: CGPoint(x: -135, y: 74.56), controlPoint2: CGPoint(x: -74.56, y: 135))
        knobrotationmaskPath.addLine(to: CGPoint(x: 0, y: 135))
        knobrotationmaskPath.addLine(to: CGPoint(x: 0, y: 135))
        knobrotationmaskPath.addLine(to: CGPoint(x: 0, y: 135))
        knobrotationmaskPath.close()
        knobrotationmaskPath.move(to: CGPoint(x: -57.9, y: -120))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -71.76, y: -112.26), controlPoint1: CGPoint(x: -62.69, y: -117.69), controlPoint2: CGPoint(x: -67.31, y: -115.1))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -92.52, y: -89.22), controlPoint1: CGPoint(x: -78.21, y: -104.31), controlPoint2: CGPoint(x: -85.13, y: -96.62))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -113.11, y: -70.42), controlPoint1: CGPoint(x: -99.16, y: -82.58), controlPoint2: CGPoint(x: -106.03, y: -76.31))
        knobrotationmaskPath.addLine(to: CGPoint(x: -113.11, y: -70.42))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -118.92, y: -60.12), controlPoint1: CGPoint(x: -115.19, y: -67.08), controlPoint2: CGPoint(x: -117.13, y: -63.65))
        knobrotationmaskPath.addLine(to: CGPoint(x: -118.92, y: -60.12))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -118.52, y: -58.65), controlPoint1: CGPoint(x: -118.46, y: -59.79), controlPoint2: CGPoint(x: -118.29, y: -59.18))
        knobrotationmaskPath.addLine(to: CGPoint(x: -123.37, y: -47.75))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -124.67, y: -47.05), controlPoint1: CGPoint(x: -123.6, y: -47.23), controlPoint2: CGPoint(x: -124.14, y: -46.95))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -130, y: -29.26), controlPoint1: CGPoint(x: -126.85, y: -41.3), controlPoint2: CGPoint(x: -128.63, y: -35.36))
        knobrotationmaskPath.addLine(to: CGPoint(x: -130, y: -29.26))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -128.32, y: 2.65), controlPoint1: CGPoint(x: -128.89, y: -18.78), controlPoint2: CGPoint(x: -128.32, y: -8.13))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -129.64, y: 30.94), controlPoint1: CGPoint(x: -128.32, y: 12.19), controlPoint2: CGPoint(x: -128.76, y: 21.62))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -125.46, y: 45.03), controlPoint1: CGPoint(x: -128.5, y: 35.74), controlPoint2: CGPoint(x: -127.1, y: 40.44))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -124.18, y: 45.72), controlPoint1: CGPoint(x: -124.94, y: 44.95), controlPoint2: CGPoint(x: -124.4, y: 45.22))
        knobrotationmaskPath.addLine(to: CGPoint(x: -119.33, y: 56.63))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -119.92, y: 58.21), controlPoint1: CGPoint(x: -119.06, y: 57.23), controlPoint2: CGPoint(x: -119.32, y: 57.93))
        knobrotationmaskPath.addLine(to: CGPoint(x: -119.92, y: 58.21))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -112.01, y: 72.26), controlPoint1: CGPoint(x: -117.56, y: 63.06), controlPoint2: CGPoint(x: -114.92, y: 67.75))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -89.66, y: 92.52), controlPoint1: CGPoint(x: -104.31, y: 78.57), controlPoint2: CGPoint(x: -96.84, y: 85.32))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -71.24, y: 112.69), controlPoint1: CGPoint(x: -83.15, y: 99.02), controlPoint2: CGPoint(x: -77.02, y: 105.76))
        knobrotationmaskPath.addLine(to: CGPoint(x: -71.24, y: 112.69))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -58.76, y: 119.69), controlPoint1: CGPoint(x: -67.22, y: 115.24), controlPoint2: CGPoint(x: -63.06, y: 117.58))
        knobrotationmaskPath.addLine(to: CGPoint(x: -58.76, y: 119.69))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -57.42, y: 119.41), controlPoint1: CGPoint(x: -58.43, y: 119.34), controlPoint2: CGPoint(x: -57.89, y: 119.21))
        knobrotationmaskPath.addLine(to: CGPoint(x: -46.44, y: 124.08))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -45.72, y: 125.26), controlPoint1: CGPoint(x: -45.96, y: 124.28), controlPoint2: CGPoint(x: -45.68, y: 124.76))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -29.58, y: 130), controlPoint1: CGPoint(x: -40.48, y: 127.17), controlPoint2: CGPoint(x: -35.1, y: 128.75))
        knobrotationmaskPath.addLine(to: CGPoint(x: -29.58, y: 130))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 0.69, y: 128.48), controlPoint1: CGPoint(x: -19.63, y: 129), controlPoint2: CGPoint(x: -9.53, y: 128.48))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 29.73, y: 129.88), controlPoint1: CGPoint(x: 10.49, y: 128.48), controlPoint2: CGPoint(x: 20.17, y: 128.95))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 44.43, y: 125.58), controlPoint1: CGPoint(x: 34.74, y: 128.72), controlPoint2: CGPoint(x: 39.65, y: 127.29))
        knobrotationmaskPath.addLine(to: CGPoint(x: 44.36, y: 125.4))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 44.99, y: 123.84), controlPoint1: CGPoint(x: 44.1, y: 124.8), controlPoint2: CGPoint(x: 44.39, y: 124.09))
        knobrotationmaskPath.addLine(to: CGPoint(x: 55.97, y: 119.17))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 57.54, y: 119.8), controlPoint1: CGPoint(x: 56.58, y: 118.91), controlPoint2: CGPoint(x: 57.28, y: 119.19))
        knobrotationmaskPath.addLine(to: CGPoint(x: 57.64, y: 120.05))
        knobrotationmaskPath.addLine(to: CGPoint(x: 57.64, y: 120.05))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 70.27, y: 113.06), controlPoint1: CGPoint(x: 61.99, y: 117.95), controlPoint2: CGPoint(x: 66.21, y: 115.61))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 91.05, y: 90.02), controlPoint1: CGPoint(x: 76.73, y: 105.11), controlPoint2: CGPoint(x: 83.65, y: 97.42))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 113, y: 70.09), controlPoint1: CGPoint(x: 98.11, y: 82.95), controlPoint2: CGPoint(x: 105.44, y: 76.3))
        knobrotationmaskPath.addLine(to: CGPoint(x: 113, y: 70.09))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 119.1, y: 59.1), controlPoint1: CGPoint(x: 115.2, y: 66.54), controlPoint2: CGPoint(x: 117.23, y: 62.87))
        knobrotationmaskPath.addLine(to: CGPoint(x: 119.1, y: 59.1))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 118.56, y: 57.58), controlPoint1: CGPoint(x: 118.55, y: 58.82), controlPoint2: CGPoint(x: 118.31, y: 58.15))
        knobrotationmaskPath.addLine(to: CGPoint(x: 123.22, y: 46.59))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 124.75, y: 45.94), controlPoint1: CGPoint(x: 123.47, y: 45.99), controlPoint2: CGPoint(x: 124.15, y: 45.7))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 130, y: 27.61), controlPoint1: CGPoint(x: 126.92, y: 40.01), controlPoint2: CGPoint(x: 128.68, y: 33.9))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 128.71, y: -0.32), controlPoint1: CGPoint(x: 129.15, y: 18.42), controlPoint2: CGPoint(x: 128.71, y: 9.1))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 129.95, y: -27.73), controlPoint1: CGPoint(x: 128.71, y: -9.56), controlPoint2: CGPoint(x: 129.13, y: -18.71))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 125.08, y: -44.9), controlPoint1: CGPoint(x: 128.71, y: -33.61), controlPoint2: CGPoint(x: 127.08, y: -39.34))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 123.68, y: -45.59), controlPoint1: CGPoint(x: 124.52, y: -44.75), controlPoint2: CGPoint(x: 123.91, y: -45.04))
        knobrotationmaskPath.addLine(to: CGPoint(x: 119.02, y: -56.58))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 119.54, y: -58.1), controlPoint1: CGPoint(x: 118.78, y: -57.15), controlPoint2: CGPoint(x: 119.01, y: -57.8))
        knobrotationmaskPath.addLine(to: CGPoint(x: 119.54, y: -58.1))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 111.59, y: -72.21), controlPoint1: CGPoint(x: 117.17, y: -62.97), controlPoint2: CGPoint(x: 114.52, y: -67.68))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 90.54, y: -91.39), controlPoint1: CGPoint(x: 104.35, y: -78.2), controlPoint2: CGPoint(x: 97.33, y: -84.6))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 71.76, y: -112.01), controlPoint1: CGPoint(x: 83.9, y: -98.04), controlPoint2: CGPoint(x: 77.64, y: -104.92))
        knobrotationmaskPath.addLine(to: CGPoint(x: 71.76, y: -112.01))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 60.41, y: -118.56), controlPoint1: CGPoint(x: 68.1, y: -114.37), controlPoint2: CGPoint(x: 64.31, y: -116.56))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 59.06, y: -118.3), controlPoint1: CGPoint(x: 60.07, y: -118.21), controlPoint2: CGPoint(x: 59.53, y: -118.09))
        knobrotationmaskPath.addLine(to: CGPoint(x: 48.17, y: -123.16))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 47.46, y: -124.35), controlPoint1: CGPoint(x: 47.69, y: -123.37), controlPoint2: CGPoint(x: 47.41, y: -123.86))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 28.72, y: -130), controlPoint1: CGPoint(x: 41.41, y: -126.68), controlPoint2: CGPoint(x: 35.15, y: -128.57))
        knobrotationmaskPath.addLine(to: CGPoint(x: 28.72, y: -130))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -0.26, y: -128.61), controlPoint1: CGPoint(x: 19.18, y: -129.08), controlPoint2: CGPoint(x: 9.52, y: -128.61))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -29.14, y: -129.99), controlPoint1: CGPoint(x: -10, y: -128.61), controlPoint2: CGPoint(x: -19.64, y: -129.08))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -44.69, y: -125.52), controlPoint1: CGPoint(x: -34.45, y: -128.81), controlPoint2: CGPoint(x: -39.64, y: -127.31))
        knobrotationmaskPath.addLine(to: CGPoint(x: -44.58, y: -125.26))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -45.23, y: -123.7), controlPoint1: CGPoint(x: -44.33, y: -124.65), controlPoint2: CGPoint(x: -44.62, y: -123.95))
        knobrotationmaskPath.addLine(to: CGPoint(x: -56.25, y: -119.13))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -57.81, y: -119.77), controlPoint1: CGPoint(x: -56.86, y: -118.87), controlPoint2: CGPoint(x: -57.55, y: -119.16))
        knobrotationmaskPath.addLine(to: CGPoint(x: -57.9, y: -120))
        knobrotationmaskPath.addLine(to: CGPoint(x: -57.9, y: -120))
        knobrotationmaskPath.addLine(to: CGPoint(x: -57.9, y: -120))
        knobrotationmaskPath.addLine(to: CGPoint(x: -57.9, y: -120))
        knobrotationmaskPath.addLine(to: CGPoint(x: -57.9, y: -120))
        knobrotationmaskPath.close()
        knobrotationmaskPath.usesEvenOddFillRule = true
        var knobrotationmaskTransformation = CGAffineTransform.identity
        knobrotationmaskTransformation = knobrotationmaskTransformation.translatedBy(x: knobRotation.minX + 135, y: knobRotation.minY + 135)
        knobrotationmaskTransformation = knobrotationmaskTransformation.rotated(by: -rotation * CGFloat.pi/180)
        knobrotationmaskPath.apply(knobrotationmaskTransformation)
        knobrotationmaskPath.addClip()


        //// rotationBGFrame Drawing
        let rotationBGFrameRect = CGRect(x: knobRotation.minX - 5, y: knobRotation.minY - 5, width: 280, height: 280)
        let rotationBGFramePath = UIBezierPath(rect: rotationBGFrameRect)
        context.saveGState()
        rotationBGFramePath.addClip()
        UIGroover.rotationBG.draw(in: CGRect(x: floor(rotationBGFrameRect.minX + 0.5), y: floor(rotationBGFrameRect.minY + 0.5), width: UIGroover.rotationBG.size.width, height: UIGroover.rotationBG.size.height))
        context.restoreGState()


        //// rotationBevels
        context.saveGState()
        context.translateBy(x: knobRotation.minX + 135, y: knobRotation.minY + 135)
        context.rotate(by: -rotation * CGFloat.pi/180)



        //// bevel-8 Drawing
        let bevel8Path = UIBezierPath()
        bevel8Path.move(to: CGPoint(x: -73.06, y: -111.29))
        bevel8Path.addCurve(to: CGPoint(x: -114.39, y: -69.98), controlPoint1: CGPoint(x: -87.25, y: -94.4), controlPoint2: CGPoint(x: -94.31, y: -86.86))
        bevel8Path.addLine(to: CGPoint(x: -111.8, y: -73.66))
        bevel8Path.addCurve(to: CGPoint(x: -77.22, y: -108.29), controlPoint1: CGPoint(x: -96.51, y: -88.32), controlPoint2: CGPoint(x: -89.79, y: -94.22))
        bevel8Path.addLine(to: CGPoint(x: -73.06, y: -111.29))
        bevel8Path.close()
        bevel8Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel8Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -74.67, y: -111.32),
            end: CGPoint(x: -112.97, y: -73.1),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-7 Drawing
        let bevel7Path = UIBezierPath()
        bevel7Path.move(to: CGPoint(x: -130.18, y: -29))
        bevel7Path.addCurve(to: CGPoint(x: -130.2, y: 29.44), controlPoint1: CGPoint(x: -128.27, y: -7.02), controlPoint2: CGPoint(x: -127.93, y: 3.31))
        bevel7Path.addLine(to: CGPoint(x: -130.97, y: 25))
        bevel7Path.addCurve(to: CGPoint(x: -131, y: -23.93), controlPoint1: CGPoint(x: -130.52, y: 3.82), controlPoint2: CGPoint(x: -129.95, y: -5.1))
        bevel7Path.addLine(to: CGPoint(x: -130.18, y: -29))
        bevel7Path.close()
        bevel7Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel7Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -131.34, y: -27.88),
            end: CGPoint(x: -131.4, y: 26.23),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-6 Drawing
        let bevel6Path = UIBezierPath()
        bevel6Path.move(to: CGPoint(x: -111.68, y: 73))
        bevel6Path.addCurve(to: CGPoint(x: -70.37, y: 114.33), controlPoint1: CGPoint(x: -94.79, y: 87.19), controlPoint2: CGPoint(x: -87.24, y: 94.25))
        bevel6Path.addLine(to: CGPoint(x: -74.05, y: 111.75))
        bevel6Path.addCurve(to: CGPoint(x: -108.68, y: 77.16), controlPoint1: CGPoint(x: -88.71, y: 96.45), controlPoint2: CGPoint(x: -94.61, y: 89.74))
        bevel6Path.addLine(to: CGPoint(x: -111.68, y: 73))
        bevel6Path.close()
        bevel6Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel6Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -111.71, y: 74.61),
            end: CGPoint(x: -73.49, y: 112.91),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-5 Drawing
        let bevel5Path = UIBezierPath()
        bevel5Path.move(to: CGPoint(x: -29.39, y: 130.19))
        bevel5Path.addCurve(to: CGPoint(x: 29.05, y: 130.21), controlPoint1: CGPoint(x: -7.41, y: 128.28), controlPoint2: CGPoint(x: 2.92, y: 127.94))
        bevel5Path.addLine(to: CGPoint(x: 24.62, y: 130.98))
        bevel5Path.addCurve(to: CGPoint(x: -24.32, y: 131.01), controlPoint1: CGPoint(x: 3.43, y: 130.53), controlPoint2: CGPoint(x: -5.49, y: 129.96))
        bevel5Path.addLine(to: CGPoint(x: -29.39, y: 130.19))
        bevel5Path.close()
        bevel5Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel5Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -28.27, y: 131.35),
            end: CGPoint(x: 25.84, y: 131.41),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-4 Drawing
        let bevel4Path = UIBezierPath()
        bevel4Path.move(to: CGPoint(x: 70.11, y: 112.52))
        bevel4Path.addCurve(to: CGPoint(x: 111.44, y: 71.21), controlPoint1: CGPoint(x: 84.3, y: 95.63), controlPoint2: CGPoint(x: 91.36, y: 88.08))
        bevel4Path.addLine(to: CGPoint(x: 108.86, y: 74.89))
        bevel4Path.addCurve(to: CGPoint(x: 74.27, y: 109.51), controlPoint1: CGPoint(x: 93.56, y: 89.55), controlPoint2: CGPoint(x: 86.85, y: 95.45))
        bevel4Path.addLine(to: CGPoint(x: 70.11, y: 112.52))
        bevel4Path.close()
        bevel4Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel4Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 71.73, y: 112.55),
            end: CGPoint(x: 110.02, y: 74.33),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-3 Drawing
        let bevel3Path = UIBezierPath()
        bevel3Path.move(to: CGPoint(x: 129.79, y: 29.69))
        bevel3Path.addCurve(to: CGPoint(x: 130.1, y: -29), controlPoint1: CGPoint(x: 127.98, y: 7.63), controlPoint2: CGPoint(x: 127.69, y: -2.74))
        bevel3Path.addLine(to: CGPoint(x: 130.86, y: -24.55))
        bevel3Path.addCurve(to: CGPoint(x: 130.64, y: 24.6), controlPoint1: CGPoint(x: 130.3, y: -3.27), controlPoint2: CGPoint(x: 129.67, y: 5.69))
        bevel3Path.addLine(to: CGPoint(x: 129.79, y: 29.69))
        bevel3Path.close()
        bevel3Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel3Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 130.96, y: 28.56),
            end: CGPoint(x: 131.29, y: -25.78),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-2 Drawing
        let bevel2Path = UIBezierPath()
        bevel2Path.move(to: CGPoint(x: 111.7, y: -71.97))
        bevel2Path.addCurve(to: CGPoint(x: 71.34, y: -112.35), controlPoint1: CGPoint(x: 95.19, y: -85.84), controlPoint2: CGPoint(x: 87.82, y: -92.73))
        bevel2Path.addLine(to: CGPoint(x: 74.93, y: -109.82))
        bevel2Path.addCurve(to: CGPoint(x: 108.76, y: -76.04), controlPoint1: CGPoint(x: 89.26, y: -94.88), controlPoint2: CGPoint(x: 95.02, y: -88.32))
        bevel2Path.addLine(to: CGPoint(x: 111.7, y: -71.97))
        bevel2Path.close()
        bevel2Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel2Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 111.72, y: -73.55),
            end: CGPoint(x: 74.38, y: -110.96),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-1 Drawing
        let bevel1Path = UIBezierPath()
        bevel1Path.move(to: CGPoint(x: 29.38, y: -129.89))
        bevel1Path.addCurve(to: CGPoint(x: -29.05, y: -129.9), controlPoint1: CGPoint(x: 7.4, y: -127.98), controlPoint2: CGPoint(x: -2.92, y: -127.64))
        bevel1Path.addLine(to: CGPoint(x: -24.62, y: -130.68))
        bevel1Path.addCurve(to: CGPoint(x: 24.31, y: -130.71), controlPoint1: CGPoint(x: -3.44, y: -130.23), controlPoint2: CGPoint(x: 5.48, y: -129.65))
        bevel1Path.addLine(to: CGPoint(x: 29.38, y: -129.89))
        bevel1Path.close()
        bevel1Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel1Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 28.26, y: -131.05),
            end: CGPoint(x: -25.84, y: -131.1),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()



        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// clickButton
        //// clickOval7 Drawing
        context.saveGState()
        context.translateBy(x: clickButton.minX + 12, y: clickButton.minY + 21)

        let clickOval7Path = UIBezierPath(ovalIn: CGRect(x: -3, y: -3, width: 6, height: 6))
        clickColor.setFill()
        clickOval7Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval7Path.lineWidth = 1
        clickOval7Path.stroke()

        context.restoreGState()


        //// clickOval6 Drawing
        let clickOval6Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX, y: clickButton.minY + 18, width: 6, height: 6))
        clickColor.setFill()
        clickOval6Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval6Path.lineWidth = 1
        clickOval6Path.stroke()


        //// clickOval5 Drawing
        let clickOval5Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX + 18, y: clickButton.minY + 9, width: 6, height: 6))
        clickColor.setFill()
        clickOval5Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval5Path.lineWidth = 1
        clickOval5Path.stroke()


        //// clickOval4 Drawing
        let clickOval4Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX + 9, y: clickButton.minY + 9, width: 6, height: 6))
        clickColor.setFill()
        clickOval4Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval4Path.lineWidth = 1
        clickOval4Path.stroke()


        //// clickOval3 Drawing
        let clickOval3Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX, y: clickButton.minY + 9, width: 6, height: 6))
        clickColor.setFill()
        clickOval3Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval3Path.lineWidth = 1
        clickOval3Path.stroke()


        //// clickOval2 Drawing
        let clickOval2Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX + 18, y: clickButton.minY, width: 6, height: 6))
        clickColor.setFill()
        clickOval2Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval2Path.lineWidth = 1
        clickOval2Path.stroke()


        //// clickOval1 Drawing
        context.saveGState()
        context.translateBy(x: clickButton.minX + 12, y: clickButton.minY + 3)

        let clickOval1Path = UIBezierPath(ovalIn: CGRect(x: -3, y: -3, width: 6, height: 6))
        clickColor.setFill()
        clickOval1Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval1Path.lineWidth = 1
        clickOval1Path.stroke()

        context.restoreGState()




        if (clickRingActive) {
            //// clickRing Drawing
            let clickRingPath = UIBezierPath(ovalIn: CGRect(x: knobFrame.minX + fastFloor(knobFrame.width * 0.28148 + 0.5), y: knobFrame.minY + fastFloor(knobFrame.height * 0.28148 + 0.5), width: fastFloor(knobFrame.width * 0.71852 + 0.5) - fastFloor(knobFrame.width * 0.28148 + 0.5), height: fastFloor(knobFrame.height * 0.71852 + 0.5) - fastFloor(knobFrame.height * 0.28148 + 0.5)))
            UIGroover.lightBlue.setStroke()
            clickRingPath.lineWidth = 2
            clickRingPath.stroke()
        }
    }

    public dynamic class func drawKnobCanvas6and7(knobFrame: CGRect = CGRect(x: 0, y: 0, width: 316, height: 316), rotation: CGFloat = 0, clickSelected: Bool = false, clickRingActive: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let rotationGradientBGColor = UIColor(red: 0.133, green: 0.188, blue: 0.224, alpha: 1.000)
        let rotationGradientBGColor2 = UIColor(red: 0.016, green: 0.078, blue: 0.137, alpha: 1.000)

        //// Gradient Declarations
        let linearGradient1 = CGGradient(colorsSpace: nil, colors: [UIGroover.knobGradientColor1.cgColor, UIGroover.knobGradientColor2.cgColor, UIGroover.knobGradientColor3.cgColor] as CFArray, locations: [0, 0.51, 1])!
        let rotationGradientBG = CGGradient(colorsSpace: nil, colors: [rotationGradientBGColor.cgColor, rotationGradientBGColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let clickColor = clickSelected ? UIGroover.lightBlue : UIGroover.clickGray


        //// Subframes
        let knobRotation: CGRect = CGRect(x: knobFrame.minX + fastFloor((knobFrame.width - 316) / 2 + 0.5), y: knobFrame.minY + fastFloor((knobFrame.height - 316) / 2 + 0.5), width: 316, height: 316)
        let clickButton: CGRect = CGRect(x: knobFrame.minX + fastFloor((knobFrame.width - 38) * 0.50000 + 0.5), y: knobFrame.minY + fastFloor((knobFrame.height - 38) * 0.50000 + 0.5), width: 38, height: 38)


        //// knobRotation
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip knob-rotation-mask
        let knobrotationmaskPath = UIBezierPath()
        knobrotationmaskPath.move(to: CGPoint(x: 0, y: 157))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 158, y: -1), controlPoint1: CGPoint(x: 87.26, y: 157), controlPoint2: CGPoint(x: 158, y: 86.26))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 0, y: -159), controlPoint1: CGPoint(x: 158, y: -88.26), controlPoint2: CGPoint(x: 87.26, y: -159))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -158, y: -1), controlPoint1: CGPoint(x: -87.26, y: -159), controlPoint2: CGPoint(x: -158, y: -88.26))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 0, y: 157), controlPoint1: CGPoint(x: -158, y: 86.26), controlPoint2: CGPoint(x: -87.26, y: 157))
        knobrotationmaskPath.addLine(to: CGPoint(x: 0, y: 157))
        knobrotationmaskPath.addLine(to: CGPoint(x: 0, y: 157))
        knobrotationmaskPath.addLine(to: CGPoint(x: 0, y: 157))
        knobrotationmaskPath.close()
        knobrotationmaskPath.move(to: CGPoint(x: -67.77, y: -141.45))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -83.98, y: -132.38), controlPoint1: CGPoint(x: -73.37, y: -138.74), controlPoint2: CGPoint(x: -78.78, y: -135.71))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -108.29, y: -105.42), controlPoint1: CGPoint(x: -91.53, y: -123.08), controlPoint2: CGPoint(x: -99.64, y: -114.08))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -132.38, y: -83.42), controlPoint1: CGPoint(x: -116.05, y: -97.64), controlPoint2: CGPoint(x: -124.09, y: -90.31))
        knobrotationmaskPath.addLine(to: CGPoint(x: -132.38, y: -83.42))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -139.18, y: -71.36), controlPoint1: CGPoint(x: -134.82, y: -79.51), controlPoint2: CGPoint(x: -137.09, y: -75.49))
        knobrotationmaskPath.addLine(to: CGPoint(x: -139.18, y: -71.36))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -138.71, y: -69.65), controlPoint1: CGPoint(x: -138.65, y: -70.98), controlPoint2: CGPoint(x: -138.44, y: -70.26))
        knobrotationmaskPath.addLine(to: CGPoint(x: -144.39, y: -56.88))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -145.92, y: -56.07), controlPoint1: CGPoint(x: -144.66, y: -56.28), controlPoint2: CGPoint(x: -145.29, y: -55.95))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -152.15, y: -35.25), controlPoint1: CGPoint(x: -148.46, y: -49.34), controlPoint2: CGPoint(x: -150.55, y: -42.39))
        knobrotationmaskPath.addLine(to: CGPoint(x: -152.15, y: -35.25))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -150.18, y: 2.1), controlPoint1: CGPoint(x: -150.85, y: -22.98), controlPoint2: CGPoint(x: -150.18, y: -10.52))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -151.73, y: 35.21), controlPoint1: CGPoint(x: -150.18, y: 13.26), controlPoint2: CGPoint(x: -150.7, y: 24.31))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -146.83, y: 51.7), controlPoint1: CGPoint(x: -150.39, y: 40.83), controlPoint2: CGPoint(x: -148.76, y: 46.33))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -145.34, y: 52.51), controlPoint1: CGPoint(x: -146.22, y: 51.6), controlPoint2: CGPoint(x: -145.6, y: 51.93))
        knobrotationmaskPath.addLine(to: CGPoint(x: -139.66, y: 65.28))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -140.35, y: 67.12), controlPoint1: CGPoint(x: -139.35, y: 65.98), controlPoint2: CGPoint(x: -139.65, y: 66.8))
        knobrotationmaskPath.addLine(to: CGPoint(x: -140.35, y: 67.12))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -131.09, y: 83.57), controlPoint1: CGPoint(x: -137.59, y: 72.81), controlPoint2: CGPoint(x: -134.5, y: 78.3))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -104.93, y: 107.28), controlPoint1: CGPoint(x: -122.08, y: 90.95), controlPoint2: CGPoint(x: -113.34, y: 98.86))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -83.38, y: 130.89), controlPoint1: CGPoint(x: -97.32, y: 114.9), controlPoint2: CGPoint(x: -90.14, y: 122.78))
        knobrotationmaskPath.addLine(to: CGPoint(x: -83.38, y: 130.89))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -68.77, y: 139.08), controlPoint1: CGPoint(x: -78.67, y: 133.88), controlPoint2: CGPoint(x: -73.8, y: 136.61))
        knobrotationmaskPath.addLine(to: CGPoint(x: -68.77, y: 139.08))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -67.21, y: 138.75), controlPoint1: CGPoint(x: -68.38, y: 138.67), controlPoint2: CGPoint(x: -67.75, y: 138.52))
        knobrotationmaskPath.addLine(to: CGPoint(x: -54.36, y: 144.22))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -53.5, y: 145.6), controlPoint1: CGPoint(x: -53.79, y: 144.46), controlPoint2: CGPoint(x: -53.46, y: 145.02))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -34.62, y: 151.15), controlPoint1: CGPoint(x: -47.38, y: 147.83), controlPoint2: CGPoint(x: -41.07, y: 149.69))
        knobrotationmaskPath.addLine(to: CGPoint(x: -34.62, y: 151.15))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 0.81, y: 149.37), controlPoint1: CGPoint(x: -22.97, y: 149.97), controlPoint2: CGPoint(x: -11.15, y: 149.37))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 34.79, y: 151.01), controlPoint1: CGPoint(x: 12.27, y: 149.37), controlPoint2: CGPoint(x: 23.61, y: 149.92))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 52, y: 145.98), controlPoint1: CGPoint(x: 40.66, y: 149.66), controlPoint2: CGPoint(x: 46.41, y: 147.97))
        knobrotationmaskPath.addLine(to: CGPoint(x: 51.91, y: 145.77))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 52.66, y: 143.94), controlPoint1: CGPoint(x: 51.61, y: 145.06), controlPoint2: CGPoint(x: 51.96, y: 144.23))
        knobrotationmaskPath.addLine(to: CGPoint(x: 65.51, y: 138.47))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 67.34, y: 139.21), controlPoint1: CGPoint(x: 66.22, y: 138.17), controlPoint2: CGPoint(x: 67.04, y: 138.5))
        knobrotationmaskPath.addLine(to: CGPoint(x: 67.46, y: 139.5))
        knobrotationmaskPath.addLine(to: CGPoint(x: 67.46, y: 139.5))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 82.25, y: 131.33), controlPoint1: CGPoint(x: 72.55, y: 137.04), controlPoint2: CGPoint(x: 77.49, y: 134.31))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 106.56, y: 104.36), controlPoint1: CGPoint(x: 89.8, y: 122.02), controlPoint2: CGPoint(x: 97.9, y: 113.02))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 132.25, y: 81.03), controlPoint1: CGPoint(x: 114.82, y: 96.08), controlPoint2: CGPoint(x: 123.4, y: 88.3))
        knobrotationmaskPath.addLine(to: CGPoint(x: 132.25, y: 81.03))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 139.39, y: 68.17), controlPoint1: CGPoint(x: 134.82, y: 76.87), controlPoint2: CGPoint(x: 137.21, y: 72.58))
        knobrotationmaskPath.addLine(to: CGPoint(x: 139.39, y: 68.17))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 138.75, y: 66.39), controlPoint1: CGPoint(x: 138.75, y: 67.84), controlPoint2: CGPoint(x: 138.47, y: 67.06))
        knobrotationmaskPath.addLine(to: CGPoint(x: 144.21, y: 53.52))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 146, y: 52.76), controlPoint1: CGPoint(x: 144.51, y: 52.82), controlPoint2: CGPoint(x: 145.3, y: 52.49))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 152.15, y: 31.32), controlPoint1: CGPoint(x: 148.54, y: 45.83), controlPoint2: CGPoint(x: 150.6, y: 38.67))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 150.64, y: -1.38), controlPoint1: CGPoint(x: 151.15, y: 20.55), controlPoint2: CGPoint(x: 150.64, y: 9.65))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 152.09, y: -33.46), controlPoint1: CGPoint(x: 150.64, y: -12.19), controlPoint2: CGPoint(x: 151.13, y: -22.89))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 146.4, y: -53.55), controlPoint1: CGPoint(x: 150.63, y: -40.33), controlPoint2: CGPoint(x: 148.73, y: -47.04))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 144.75, y: -54.36), controlPoint1: CGPoint(x: 145.73, y: -53.38), controlPoint2: CGPoint(x: 145.03, y: -53.72))
        knobrotationmaskPath.addLine(to: CGPoint(x: 139.3, y: -67.22))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 139.9, y: -68.99), controlPoint1: CGPoint(x: 139.02, y: -67.89), controlPoint2: CGPoint(x: 139.28, y: -68.65))
        knobrotationmaskPath.addLine(to: CGPoint(x: 139.9, y: -68.99))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 130.61, y: -85.51), controlPoint1: CGPoint(x: 137.13, y: -74.7), controlPoint2: CGPoint(x: 134.03, y: -80.22))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 105.97, y: -107.96), controlPoint1: CGPoint(x: 122.13, y: -92.53), controlPoint2: CGPoint(x: 113.91, y: -100.01))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 83.99, y: -132.09), controlPoint1: CGPoint(x: 98.2, y: -115.74), controlPoint2: CGPoint(x: 90.87, y: -123.79))
        knobrotationmaskPath.addLine(to: CGPoint(x: 83.99, y: -132.09))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 70.7, y: -139.76), controlPoint1: CGPoint(x: 79.7, y: -134.86), controlPoint2: CGPoint(x: 75.27, y: -137.42))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 69.12, y: -139.45), controlPoint1: CGPoint(x: 70.3, y: -139.35), controlPoint2: CGPoint(x: 69.67, y: -139.21))
        knobrotationmaskPath.addLine(to: CGPoint(x: 56.37, y: -145.14))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 55.54, y: -146.54), controlPoint1: CGPoint(x: 55.81, y: -145.39), controlPoint2: CGPoint(x: 55.49, y: -145.96))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 33.61, y: -153.15), controlPoint1: CGPoint(x: 48.47, y: -149.26), controlPoint2: CGPoint(x: 41.14, y: -151.48))
        knobrotationmaskPath.addLine(to: CGPoint(x: 33.61, y: -153.15))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -0.3, y: -151.52), controlPoint1: CGPoint(x: 22.45, y: -152.07), controlPoint2: CGPoint(x: 11.14, y: -151.52))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -34.1, y: -153.14), controlPoint1: CGPoint(x: -11.71, y: -151.52), controlPoint2: CGPoint(x: -22.98, y: -152.07))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -52.3, y: -147.91), controlPoint1: CGPoint(x: -40.32, y: -151.76), controlPoint2: CGPoint(x: -46.39, y: -150.01))
        knobrotationmaskPath.addLine(to: CGPoint(x: -52.17, y: -147.6))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -52.93, y: -145.77), controlPoint1: CGPoint(x: -51.88, y: -146.89), controlPoint2: CGPoint(x: -52.23, y: -146.06))
        knobrotationmaskPath.addLine(to: CGPoint(x: -65.83, y: -140.42))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -67.65, y: -141.18), controlPoint1: CGPoint(x: -66.54, y: -140.13), controlPoint2: CGPoint(x: -67.36, y: -140.46))
        knobrotationmaskPath.addLine(to: CGPoint(x: -67.77, y: -141.45))
        knobrotationmaskPath.addLine(to: CGPoint(x: -67.77, y: -141.45))
        knobrotationmaskPath.addLine(to: CGPoint(x: -67.77, y: -141.45))
        knobrotationmaskPath.addLine(to: CGPoint(x: -67.77, y: -141.45))
        knobrotationmaskPath.addLine(to: CGPoint(x: -67.77, y: -141.45))
        knobrotationmaskPath.close()
        knobrotationmaskPath.usesEvenOddFillRule = true
        var knobrotationmaskTransformation = CGAffineTransform.identity
        knobrotationmaskTransformation = knobrotationmaskTransformation.translatedBy(x: knobRotation.minX + 158, y: knobRotation.minY + 159)
        knobrotationmaskTransformation = knobrotationmaskTransformation.rotated(by: -rotation * CGFloat.pi/180)
        knobrotationmaskPath.apply(knobrotationmaskTransformation)
        knobrotationmaskPath.addClip()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: knobRotation.minX + fastFloor(knobRotation.width * 0.00000 + 0.5), y: knobRotation.minY + fastFloor(knobRotation.height * 0.00316 + 0.5), width: fastFloor(knobRotation.width * 1.00000 + 0.5) - fastFloor(knobRotation.width * 0.00000 + 0.5), height: fastFloor(knobRotation.height * 1.00316 + 0.5) - fastFloor(knobRotation.height * 0.00316 + 0.5)))
        context.saveGState()
        ovalPath.addClip()
        let ovalRotatedPath = UIBezierPath()
        ovalRotatedPath.append(ovalPath)
        var ovalTransform = CGAffineTransform(rotationAngle: 45 * -CGFloat.pi/180)
        ovalRotatedPath.apply(ovalTransform)
        let ovalBounds = ovalRotatedPath.cgPath.boundingBoxOfPath
        ovalTransform = ovalTransform.inverted()
        context.drawLinearGradient(rotationGradientBG,
            start: CGPoint(x: ovalBounds.minX, y: ovalBounds.midY).applying(ovalTransform),
            end: CGPoint(x: ovalBounds.maxX, y: ovalBounds.midY).applying(ovalTransform),
            options: [])
        context.restoreGState()


        //// rotationBevels
        context.saveGState()
        context.translateBy(x: knobRotation.minX + 0.50000 * knobRotation.width, y: knobRotation.minY + 0.50000 * knobRotation.height)
        context.rotate(by: -rotation * CGFloat.pi/180)



        //// bevel-8 Drawing
        let bevel8Path = UIBezierPath()
        bevel8Path.move(to: CGPoint(x: -86.16, y: -131.46))
        bevel8Path.addCurve(to: CGPoint(x: -134.91, y: -82.73), controlPoint1: CGPoint(x: -102.9, y: -111.53), controlPoint2: CGPoint(x: -111.23, y: -102.64))
        bevel8Path.addLine(to: CGPoint(x: -131.86, y: -87.07))
        bevel8Path.addCurve(to: CGPoint(x: -91.07, y: -127.91), controlPoint1: CGPoint(x: -113.81, y: -104.37), controlPoint2: CGPoint(x: -105.9, y: -111.33))
        bevel8Path.addLine(to: CGPoint(x: -86.16, y: -131.46))
        bevel8Path.close()
        bevel8Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel8Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -88.06, y: -131.49),
            end: CGPoint(x: -133.23, y: -86.41),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-7 Drawing
        let bevel7Path = UIBezierPath()
        bevel7Path.move(to: CGPoint(x: -153.53, y: -34.39))
        bevel7Path.addCurve(to: CGPoint(x: -153.55, y: 34.54), controlPoint1: CGPoint(x: -151.28, y: -8.46), controlPoint2: CGPoint(x: -150.88, y: 3.72))
        bevel7Path.addLine(to: CGPoint(x: -154.47, y: 29.31))
        bevel7Path.addCurve(to: CGPoint(x: -154.5, y: -28.41), controlPoint1: CGPoint(x: -153.94, y: 4.33), controlPoint2: CGPoint(x: -153.26, y: -6.19))
        bevel7Path.addLine(to: CGPoint(x: -153.53, y: -34.39))
        bevel7Path.close()
        bevel7Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel7Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -154.9, y: -33.07),
            end: CGPoint(x: -154.97, y: 30.75),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-6 Drawing
        let bevel6Path = UIBezierPath()
        bevel6Path.move(to: CGPoint(x: -131.71, y: 85.93))
        bevel6Path.addCurve(to: CGPoint(x: -82.99, y: 134.68), controlPoint1: CGPoint(x: -111.79, y: 102.67), controlPoint2: CGPoint(x: -102.89, y: 111))
        bevel6Path.addLine(to: CGPoint(x: -87.33, y: 131.63))
        bevel6Path.addCurve(to: CGPoint(x: -128.17, y: 90.84), controlPoint1: CGPoint(x: -104.62, y: 113.59), controlPoint2: CGPoint(x: -111.58, y: 105.67))
        bevel6Path.addLine(to: CGPoint(x: -131.71, y: 85.93))
        bevel6Path.close()
        bevel6Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel6Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -131.75, y: 87.83),
            end: CGPoint(x: -86.67, y: 133.01),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-5 Drawing
        let bevel5Path = UIBezierPath()
        bevel5Path.move(to: CGPoint(x: -34.65, y: 153.39))
        bevel5Path.addCurve(to: CGPoint(x: 34.27, y: 153.41), controlPoint1: CGPoint(x: -8.73, y: 151.14), controlPoint2: CGPoint(x: 3.45, y: 150.74))
        bevel5Path.addLine(to: CGPoint(x: 29.05, y: 154.32))
        bevel5Path.addCurve(to: CGPoint(x: -28.67, y: 154.36), controlPoint1: CGPoint(x: 4.06, y: 153.79), controlPoint2: CGPoint(x: -6.46, y: 153.12))
        bevel5Path.addLine(to: CGPoint(x: -34.65, y: 153.39))
        bevel5Path.close()
        bevel5Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel5Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -33.33, y: 154.76),
            end: CGPoint(x: 30.49, y: 154.83),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-4 Drawing
        let bevel4Path = UIBezierPath()
        bevel4Path.move(to: CGPoint(x: 82.71, y: 132.54))
        bevel4Path.addCurve(to: CGPoint(x: 131.46, y: 83.82), controlPoint1: CGPoint(x: 99.45, y: 112.62), controlPoint2: CGPoint(x: 107.78, y: 103.72))
        bevel4Path.addLine(to: CGPoint(x: 128.41, y: 88.16))
        bevel4Path.addCurve(to: CGPoint(x: 87.62, y: 129), controlPoint1: CGPoint(x: 110.36, y: 105.45), controlPoint2: CGPoint(x: 102.45, y: 112.41))
        bevel4Path.addLine(to: CGPoint(x: 82.71, y: 132.54))
        bevel4Path.close()
        bevel4Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel4Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 84.61, y: 132.58),
            end: CGPoint(x: 129.78, y: 87.49),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-3 Drawing
        let bevel3Path = UIBezierPath()
        bevel3Path.move(to: CGPoint(x: 153.09, y: 34.84))
        bevel3Path.addCurve(to: CGPoint(x: 153.47, y: -34.39), controlPoint1: CGPoint(x: 150.97, y: 8.81), controlPoint2: CGPoint(x: 150.62, y: -3.42))
        bevel3Path.addLine(to: CGPoint(x: 154.36, y: -29.14))
        bevel3Path.addCurve(to: CGPoint(x: 154.1, y: 28.83), controlPoint1: CGPoint(x: 153.7, y: -4.04), controlPoint2: CGPoint(x: 152.96, y: 6.53))
        bevel3Path.addLine(to: CGPoint(x: 153.09, y: 34.84))
        bevel3Path.close()
        bevel3Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel3Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 154.48, y: 33.51),
            end: CGPoint(x: 154.87, y: -30.59),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-2 Drawing
        let bevel2Path = UIBezierPath()
        bevel2Path.move(to: CGPoint(x: 131.76, y: -85.07))
        bevel2Path.addCurve(to: CGPoint(x: 84.15, y: -132.71), controlPoint1: CGPoint(x: 112.29, y: -101.43), controlPoint2: CGPoint(x: 103.6, y: -109.57))
        bevel2Path.addLine(to: CGPoint(x: 88.4, y: -129.73))
        bevel2Path.addCurve(to: CGPoint(x: 128.3, y: -89.87), controlPoint1: CGPoint(x: 105.29, y: -112.1), controlPoint2: CGPoint(x: 112.09, y: -104.36))
        bevel2Path.addLine(to: CGPoint(x: 131.76, y: -85.07))
        bevel2Path.close()
        bevel2Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel2Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 131.79, y: -86.93),
            end: CGPoint(x: 87.75, y: -131.07),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-1 Drawing
        let bevel1Path = UIBezierPath()
        bevel1Path.move(to: CGPoint(x: 34.67, y: -153.39))
        bevel1Path.addCurve(to: CGPoint(x: -34.26, y: -153.41), controlPoint1: CGPoint(x: 8.74, y: -151.14), controlPoint2: CGPoint(x: -3.44, y: -150.74))
        bevel1Path.addLine(to: CGPoint(x: -29.03, y: -154.32))
        bevel1Path.addCurve(to: CGPoint(x: 28.69, y: -154.36), controlPoint1: CGPoint(x: -4.04, y: -153.79), controlPoint2: CGPoint(x: 6.47, y: -153.12))
        bevel1Path.addLine(to: CGPoint(x: 34.67, y: -153.39))
        bevel1Path.close()
        bevel1Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel1Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 33.35, y: -154.76),
            end: CGPoint(x: -30.47, y: -154.83),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()



        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        if (clickRingActive) {
            //// clickRing Drawing
            let clickRingPath = UIBezierPath(ovalIn: CGRect(x: knobFrame.minX + fastFloor(knobFrame.width * 0.28165 + 0.5), y: knobFrame.minY + fastFloor(knobFrame.height * 0.28165 + 0.5), width: fastFloor(knobFrame.width * 0.71835 + 0.5) - fastFloor(knobFrame.width * 0.28165 + 0.5), height: fastFloor(knobFrame.height * 0.71835 + 0.5) - fastFloor(knobFrame.height * 0.28165 + 0.5)))
            UIGroover.lightBlue.setStroke()
            clickRingPath.lineWidth = 2
            clickRingPath.stroke()
        }


        //// clickButton
        //// clickOval7 Drawing
        context.saveGState()
        context.translateBy(x: clickButton.minX + 19, y: clickButton.minY + 33.25)

        let clickOval7Path = UIBezierPath(ovalIn: CGRect(x: -4.75, y: -4.75, width: 9.5, height: 9.5))
        clickColor.setFill()
        clickOval7Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval7Path.lineWidth = 1
        clickOval7Path.stroke()

        context.restoreGState()


        //// clickOval6 Drawing
        let clickOval6Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX, y: clickButton.minY + 29, width: 9, height: 9))
        clickColor.setFill()
        clickOval6Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval6Path.lineWidth = 1
        clickOval6Path.stroke()


        //// clickOval5 Drawing
        let clickOval5Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX + 29, y: clickButton.minY + 14, width: 9, height: 10))
        clickColor.setFill()
        clickOval5Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval5Path.lineWidth = 1
        clickOval5Path.stroke()


        //// clickOval4 Drawing
        let clickOval4Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX + 14, y: clickButton.minY + 14, width: 10, height: 10))
        clickColor.setFill()
        clickOval4Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval4Path.lineWidth = 1
        clickOval4Path.stroke()


        //// clickOval3 Drawing
        let clickOval3Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX, y: clickButton.minY + 14, width: 9, height: 10))
        clickColor.setFill()
        clickOval3Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval3Path.lineWidth = 1
        clickOval3Path.stroke()


        //// clickOval2 Drawing
        let clickOval2Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX + 29, y: clickButton.minY, width: 9, height: 9))
        clickColor.setFill()
        clickOval2Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval2Path.lineWidth = 1
        clickOval2Path.stroke()


        //// clickOval1 Drawing
        context.saveGState()
        context.translateBy(x: clickButton.minX + 19, y: clickButton.minY + 4.75)

        let clickOval1Path = UIBezierPath(ovalIn: CGRect(x: -4.75, y: -4.75, width: 9.5, height: 9.5))
        clickColor.setFill()
        clickOval1Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval1Path.lineWidth = 1
        clickOval1Path.stroke()

        context.restoreGState()
    }

    public dynamic class func drawKnobCanvas6and7plus(knobFrame: CGRect = CGRect(x: 0, y: 0, width: 347, height: 347), rotation: CGFloat = 0, clickSelected: Bool = false, clickRingActive: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let rotationGradientBGColor = UIColor(red: 0.133, green: 0.188, blue: 0.224, alpha: 1.000)
        let rotationGradientBGColor2 = UIColor(red: 0.016, green: 0.078, blue: 0.137, alpha: 1.000)

        //// Gradient Declarations
        let linearGradient1 = CGGradient(colorsSpace: nil, colors: [UIGroover.knobGradientColor1.cgColor, UIGroover.knobGradientColor2.cgColor, UIGroover.knobGradientColor3.cgColor] as CFArray, locations: [0, 0.51, 1])!
        let rotationGradientBG = CGGradient(colorsSpace: nil, colors: [rotationGradientBGColor.cgColor, rotationGradientBGColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let clickColor = clickSelected ? UIGroover.lightBlue : UIGroover.clickGray


        //// Subframes
        let knobRotation: CGRect = CGRect(x: knobFrame.minX + fastFloor((knobFrame.width - 347) / 2 + 0.5), y: knobFrame.minY + fastFloor((knobFrame.height - 347) / 2 + 0.5), width: 347, height: 347)
        let clickButton: CGRect = CGRect(x: knobFrame.minX + fastFloor((knobFrame.width - 38) * 0.49515 + 0.5), y: knobFrame.minY + fastFloor((knobFrame.height - 38) * 0.49515 + 0.5), width: 38, height: 38)


        //// knobRotation
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip knob-rotation-mask
        let knobrotationmaskPath = UIBezierPath()
        knobrotationmaskPath.move(to: CGPoint(x: 0, y: 172.4))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 173.5, y: -1.1), controlPoint1: CGPoint(x: 95.82, y: 172.4), controlPoint2: CGPoint(x: 173.5, y: 94.72))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 0, y: -174.6), controlPoint1: CGPoint(x: 173.5, y: -96.92), controlPoint2: CGPoint(x: 95.82, y: -174.6))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -173.5, y: -1.1), controlPoint1: CGPoint(x: -95.82, y: -174.6), controlPoint2: CGPoint(x: -173.5, y: -96.92))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 0, y: 172.4), controlPoint1: CGPoint(x: -173.5, y: 94.72), controlPoint2: CGPoint(x: -95.82, y: 172.4))
        knobrotationmaskPath.addLine(to: CGPoint(x: 0, y: 172.4))
        knobrotationmaskPath.addLine(to: CGPoint(x: 0, y: 172.4))
        knobrotationmaskPath.addLine(to: CGPoint(x: 0, y: 172.4))
        knobrotationmaskPath.close()
        knobrotationmaskPath.move(to: CGPoint(x: -74.41, y: -155.32))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -92.22, y: -145.37), controlPoint1: CGPoint(x: -80.56, y: -152.35), controlPoint2: CGPoint(x: -86.51, y: -149.03))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -118.91, y: -115.76), controlPoint1: CGPoint(x: -100.51, y: -135.16), controlPoint2: CGPoint(x: -109.41, y: -125.27))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -145.36, y: -91.61), controlPoint1: CGPoint(x: -127.44, y: -107.22), controlPoint2: CGPoint(x: -136.27, y: -99.17))
        knobrotationmaskPath.addLine(to: CGPoint(x: -145.36, y: -91.61))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -152.83, y: -78.36), controlPoint1: CGPoint(x: -148.04, y: -87.31), controlPoint2: CGPoint(x: -150.53, y: -82.9))
        knobrotationmaskPath.addLine(to: CGPoint(x: -152.83, y: -78.36))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -152.32, y: -76.48), controlPoint1: CGPoint(x: -152.25, y: -77.94), controlPoint2: CGPoint(x: -152.02, y: -77.15))
        knobrotationmaskPath.addLine(to: CGPoint(x: -158.55, y: -62.46))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -160.23, y: -61.57), controlPoint1: CGPoint(x: -158.85, y: -61.8), controlPoint2: CGPoint(x: -159.55, y: -61.44))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -167.07, y: -38.71), controlPoint1: CGPoint(x: -163.02, y: -54.18), controlPoint2: CGPoint(x: -165.32, y: -46.54))
        knobrotationmaskPath.addLine(to: CGPoint(x: -167.07, y: -38.71))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -164.91, y: 2.3), controlPoint1: CGPoint(x: -165.64, y: -25.23), controlPoint2: CGPoint(x: -164.91, y: -11.55))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -166.61, y: 38.66), controlPoint1: CGPoint(x: -164.91, y: 14.57), controlPoint2: CGPoint(x: -165.49, y: 26.69))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -161.24, y: 56.77), controlPoint1: CGPoint(x: -165.15, y: 44.83), controlPoint2: CGPoint(x: -163.35, y: 50.88))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -159.6, y: 57.66), controlPoint1: CGPoint(x: -160.57, y: 56.67), controlPoint2: CGPoint(x: -159.88, y: 57.02))
        knobrotationmaskPath.addLine(to: CGPoint(x: -153.36, y: 71.69))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -154.12, y: 73.71), controlPoint1: CGPoint(x: -153.02, y: 72.46), controlPoint2: CGPoint(x: -153.35, y: 73.35))
        knobrotationmaskPath.addLine(to: CGPoint(x: -154.12, y: 73.71))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -143.96, y: 91.77), controlPoint1: CGPoint(x: -151.09, y: 79.95), controlPoint2: CGPoint(x: -147.69, y: 85.98))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -115.22, y: 117.8), controlPoint1: CGPoint(x: -134.05, y: 99.87), controlPoint2: CGPoint(x: -124.46, y: 108.55))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -91.56, y: 143.74), controlPoint1: CGPoint(x: -106.87, y: 126.17), controlPoint2: CGPoint(x: -98.98, y: 134.82))
        knobrotationmaskPath.addLine(to: CGPoint(x: -91.56, y: 143.74))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -75.52, y: 152.73), controlPoint1: CGPoint(x: -86.39, y: 147.01), controlPoint2: CGPoint(x: -81.04, y: 150.01))
        knobrotationmaskPath.addLine(to: CGPoint(x: -75.52, y: 152.73))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -73.8, y: 152.37), controlPoint1: CGPoint(x: -75.09, y: 152.27), controlPoint2: CGPoint(x: -74.4, y: 152.11))
        knobrotationmaskPath.addLine(to: CGPoint(x: -59.69, y: 158.36))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -58.75, y: 159.88), controlPoint1: CGPoint(x: -59.07, y: 158.63), controlPoint2: CGPoint(x: -58.71, y: 159.24))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -38.01, y: 165.98), controlPoint1: CGPoint(x: -52.03, y: 162.33), controlPoint2: CGPoint(x: -45.1, y: 164.38))
        knobrotationmaskPath.addLine(to: CGPoint(x: -38.01, y: 165.98))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 0.89, y: 164.02), controlPoint1: CGPoint(x: -25.22, y: 164.69), controlPoint2: CGPoint(x: -12.24, y: 164.02))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 38.21, y: 165.82), controlPoint1: CGPoint(x: 13.48, y: 164.02), controlPoint2: CGPoint(x: 25.93, y: 164.63))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 57.1, y: 160.3), controlPoint1: CGPoint(x: 44.65, y: 164.34), controlPoint2: CGPoint(x: 50.96, y: 162.49))
        knobrotationmaskPath.addLine(to: CGPoint(x: 57.01, y: 160.07))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 57.82, y: 158.06), controlPoint1: CGPoint(x: 56.68, y: 159.29), controlPoint2: CGPoint(x: 57.05, y: 158.38))
        knobrotationmaskPath.addLine(to: CGPoint(x: 71.93, y: 152.06))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 73.95, y: 152.87), controlPoint1: CGPoint(x: 72.72, y: 151.73), controlPoint2: CGPoint(x: 73.61, y: 152.08))
        knobrotationmaskPath.addLine(to: CGPoint(x: 74.08, y: 153.19))
        knobrotationmaskPath.addLine(to: CGPoint(x: 74.08, y: 153.19))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 90.31, y: 144.21), controlPoint1: CGPoint(x: 79.67, y: 150.48), controlPoint2: CGPoint(x: 85.09, y: 147.48))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 117.01, y: 114.59), controlPoint1: CGPoint(x: 98.61, y: 133.99), controlPoint2: CGPoint(x: 107.51, y: 124.11))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 145.23, y: 88.98), controlPoint1: CGPoint(x: 126.09, y: 105.5), controlPoint2: CGPoint(x: 135.51, y: 96.97))
        knobrotationmaskPath.addLine(to: CGPoint(x: 145.23, y: 88.98))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 153.06, y: 74.86), controlPoint1: CGPoint(x: 148.05, y: 84.41), controlPoint2: CGPoint(x: 150.67, y: 79.7))
        knobrotationmaskPath.addLine(to: CGPoint(x: 153.06, y: 74.86))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 152.37, y: 72.9), controlPoint1: CGPoint(x: 152.36, y: 74.49), controlPoint2: CGPoint(x: 152.05, y: 73.63))
        knobrotationmaskPath.addLine(to: CGPoint(x: 158.36, y: 58.77))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 160.32, y: 57.94), controlPoint1: CGPoint(x: 158.68, y: 58), controlPoint2: CGPoint(x: 159.55, y: 57.63))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 167.07, y: 34.39), controlPoint1: CGPoint(x: 163.11, y: 50.33), controlPoint2: CGPoint(x: 165.38, y: 42.46))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 165.42, y: -1.51), controlPoint1: CGPoint(x: 165.98, y: 22.57), controlPoint2: CGPoint(x: 165.42, y: 10.59))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 167.01, y: -36.74), controlPoint1: CGPoint(x: 165.42, y: -13.39), controlPoint2: CGPoint(x: 165.96, y: -25.14))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 160.76, y: -58.8), controlPoint1: CGPoint(x: 165.41, y: -44.29), controlPoint2: CGPoint(x: 163.32, y: -51.66))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 158.95, y: -59.69), controlPoint1: CGPoint(x: 160.03, y: -58.61), controlPoint2: CGPoint(x: 159.25, y: -58.99))
        knobrotationmaskPath.addLine(to: CGPoint(x: 152.97, y: -73.82))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 153.63, y: -75.76), controlPoint1: CGPoint(x: 152.65, y: -74.55), controlPoint2: CGPoint(x: 152.95, y: -75.39))
        knobrotationmaskPath.addLine(to: CGPoint(x: 153.63, y: -75.76))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 143.42, y: -93.9), controlPoint1: CGPoint(x: 150.59, y: -82.03), controlPoint2: CGPoint(x: 147.17, y: -88.08))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 116.37, y: -118.55), controlPoint1: CGPoint(x: 134.11, y: -101.61), controlPoint2: CGPoint(x: 125.08, y: -109.82))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 92.23, y: -145.05), controlPoint1: CGPoint(x: 107.83, y: -127.09), controlPoint2: CGPoint(x: 99.79, y: -135.94))
        knobrotationmaskPath.addLine(to: CGPoint(x: 92.23, y: -145.05))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 77.64, y: -153.47), controlPoint1: CGPoint(x: 87.52, y: -148.09), controlPoint2: CGPoint(x: 82.65, y: -150.9))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 75.91, y: -153.13), controlPoint1: CGPoint(x: 77.2, y: -153.02), controlPoint2: CGPoint(x: 76.51, y: -152.87))
        knobrotationmaskPath.addLine(to: CGPoint(x: 61.9, y: -159.38))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 60.99, y: -160.92), controlPoint1: CGPoint(x: 61.29, y: -159.65), controlPoint2: CGPoint(x: 60.94, y: -160.28))
        knobrotationmaskPath.addCurve(to: CGPoint(x: 36.91, y: -168.17), controlPoint1: CGPoint(x: 53.22, y: -163.9), controlPoint2: CGPoint(x: 45.18, y: -166.34))
        knobrotationmaskPath.addLine(to: CGPoint(x: 36.91, y: -168.17))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -0.33, y: -166.38), controlPoint1: CGPoint(x: 24.65, y: -166.99), controlPoint2: CGPoint(x: 12.23, y: -166.38))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -37.45, y: -168.16), controlPoint1: CGPoint(x: -12.85, y: -166.38), controlPoint2: CGPoint(x: -25.24, y: -166.99))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -57.43, y: -162.42), controlPoint1: CGPoint(x: -44.27, y: -166.64), controlPoint2: CGPoint(x: -50.94, y: -164.72))
        knobrotationmaskPath.addLine(to: CGPoint(x: -57.29, y: -162.08))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -58.12, y: -160.07), controlPoint1: CGPoint(x: -56.97, y: -161.29), controlPoint2: CGPoint(x: -57.35, y: -160.39))
        knobrotationmaskPath.addLine(to: CGPoint(x: -72.29, y: -154.2))
        knobrotationmaskPath.addCurve(to: CGPoint(x: -74.29, y: -155.03), controlPoint1: CGPoint(x: -73.07, y: -153.87), controlPoint2: CGPoint(x: -73.97, y: -154.24))
        knobrotationmaskPath.addLine(to: CGPoint(x: -74.41, y: -155.32))
        knobrotationmaskPath.addLine(to: CGPoint(x: -74.41, y: -155.32))
        knobrotationmaskPath.addLine(to: CGPoint(x: -74.41, y: -155.32))
        knobrotationmaskPath.addLine(to: CGPoint(x: -74.41, y: -155.32))
        knobrotationmaskPath.addLine(to: CGPoint(x: -74.41, y: -155.32))
        knobrotationmaskPath.close()
        knobrotationmaskPath.usesEvenOddFillRule = true
        var knobrotationmaskTransformation = CGAffineTransform.identity
        knobrotationmaskTransformation = knobrotationmaskTransformation.translatedBy(x: knobRotation.minX + 173.5, y: knobRotation.minY + 174.6)
        knobrotationmaskTransformation = knobrotationmaskTransformation.rotated(by: -rotation * CGFloat.pi/180)
        knobrotationmaskPath.apply(knobrotationmaskTransformation)
        knobrotationmaskPath.addClip()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: knobRotation.minX + fastFloor(knobRotation.width * 0.00000 + 0.5), y: knobRotation.minY + fastFloor(knobRotation.height * 0.00288 + 0.5), width: fastFloor(knobRotation.width * 1.00000 + 0.5) - fastFloor(knobRotation.width * 0.00000 + 0.5), height: fastFloor(knobRotation.height * 1.00288 + 0.5) - fastFloor(knobRotation.height * 0.00288 + 0.5)))
        context.saveGState()
        ovalPath.addClip()
        let ovalRotatedPath = UIBezierPath()
        ovalRotatedPath.append(ovalPath)
        var ovalTransform = CGAffineTransform(rotationAngle: 45 * -CGFloat.pi/180)
        ovalRotatedPath.apply(ovalTransform)
        let ovalBounds = ovalRotatedPath.cgPath.boundingBoxOfPath
        ovalTransform = ovalTransform.inverted()
        context.drawLinearGradient(rotationGradientBG,
            start: CGPoint(x: ovalBounds.minX, y: ovalBounds.midY).applying(ovalTransform),
            end: CGPoint(x: ovalBounds.maxX, y: ovalBounds.midY).applying(ovalTransform),
            options: [])
        context.restoreGState()


        //// rotationBevels
        context.saveGState()
        context.translateBy(x: knobRotation.minX + 0.45533 * knobRotation.width, y: knobRotation.minY + 0.45533 * knobRotation.height)
        context.rotate(by: -rotation * CGFloat.pi/180)



        //// bevel-8 Drawing
        let bevel8Path = UIBezierPath()
        bevel8Path.move(to: CGPoint(x: -79.52, y: -128.23))
        bevel8Path.addCurve(to: CGPoint(x: -133, y: -74.77), controlPoint1: CGPoint(x: -97.89, y: -106.37), controlPoint2: CGPoint(x: -107.02, y: -96.61))
        bevel8Path.addLine(to: CGPoint(x: -129.66, y: -79.53))
        bevel8Path.addCurve(to: CGPoint(x: -84.91, y: -124.34), controlPoint1: CGPoint(x: -109.86, y: -98.51), controlPoint2: CGPoint(x: -101.18, y: -106.14))
        bevel8Path.addLine(to: CGPoint(x: -79.52, y: -128.23))
        bevel8Path.close()
        bevel8Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel8Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -81.61, y: -128.27),
            end: CGPoint(x: -131.17, y: -78.81),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-7 Drawing
        let bevel7Path = UIBezierPath()
        bevel7Path.move(to: CGPoint(x: -153.44, y: -21.73))
        bevel7Path.addCurve(to: CGPoint(x: -153.46, y: 53.9), controlPoint1: CGPoint(x: -150.97, y: 6.72), controlPoint2: CGPoint(x: -150.53, y: 20.08))
        bevel7Path.addLine(to: CGPoint(x: -154.46, y: 48.16))
        bevel7Path.addCurve(to: CGPoint(x: -154.5, y: -15.17), controlPoint1: CGPoint(x: -153.88, y: 20.75), controlPoint2: CGPoint(x: -153.14, y: 9.21))
        bevel7Path.addLine(to: CGPoint(x: -153.44, y: -21.73))
        bevel7Path.close()
        bevel7Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel7Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -154.94, y: -20.28),
            end: CGPoint(x: -155.01, y: 49.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-6 Drawing
        let bevel6Path = UIBezierPath()
        bevel6Path.move(to: CGPoint(x: -129.5, y: 110.28))
        bevel6Path.addCurve(to: CGPoint(x: -76.04, y: 163.77), controlPoint1: CGPoint(x: -107.64, y: 128.65), controlPoint2: CGPoint(x: -97.88, y: 137.79))
        bevel6Path.addLine(to: CGPoint(x: -80.81, y: 160.42))
        bevel6Path.addCurve(to: CGPoint(x: -125.61, y: 115.67), controlPoint1: CGPoint(x: -99.78, y: 140.63), controlPoint2: CGPoint(x: -107.41, y: 131.94))
        bevel6Path.addLine(to: CGPoint(x: -129.5, y: 110.28))
        bevel6Path.close()
        bevel6Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel6Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -129.54, y: 112.37),
            end: CGPoint(x: -80.08, y: 161.93),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-5 Drawing
        let bevel5Path = UIBezierPath()
        bevel5Path.move(to: CGPoint(x: -23.01, y: 184.3))
        bevel5Path.addCurve(to: CGPoint(x: 52.61, y: 184.32), controlPoint1: CGPoint(x: 5.43, y: 181.83), controlPoint2: CGPoint(x: 18.8, y: 181.39))
        bevel5Path.addLine(to: CGPoint(x: 46.88, y: 185.32))
        bevel5Path.addCurve(to: CGPoint(x: -16.45, y: 185.36), controlPoint1: CGPoint(x: 19.46, y: 184.74), controlPoint2: CGPoint(x: 7.92, y: 183.99))
        bevel5Path.addLine(to: CGPoint(x: -23.01, y: 184.3))
        bevel5Path.close()
        bevel5Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel5Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: -21.56, y: 185.8),
            end: CGPoint(x: 48.46, y: 185.87),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-4 Drawing
        let bevel4Path = UIBezierPath()
        bevel4Path.move(to: CGPoint(x: 105.75, y: 161.42))
        bevel4Path.addCurve(to: CGPoint(x: 159.23, y: 107.96), controlPoint1: CGPoint(x: 124.12, y: 139.56), controlPoint2: CGPoint(x: 133.25, y: 129.8))
        bevel4Path.addLine(to: CGPoint(x: 155.89, y: 112.72))
        bevel4Path.addCurve(to: CGPoint(x: 111.14, y: 157.53), controlPoint1: CGPoint(x: 136.09, y: 131.7), controlPoint2: CGPoint(x: 127.41, y: 139.33))
        bevel4Path.addLine(to: CGPoint(x: 105.75, y: 161.42))
        bevel4Path.close()
        bevel4Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel4Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 107.84, y: 161.46),
            end: CGPoint(x: 157.4, y: 112),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-3 Drawing
        let bevel3Path = UIBezierPath()
        bevel3Path.move(to: CGPoint(x: 182.97, y: 54.23))
        bevel3Path.addCurve(to: CGPoint(x: 183.38, y: -21.73), controlPoint1: CGPoint(x: 180.64, y: 25.67), controlPoint2: CGPoint(x: 180.26, y: 12.25))
        bevel3Path.addLine(to: CGPoint(x: 184.36, y: -15.98))
        bevel3Path.addCurve(to: CGPoint(x: 184.07, y: 47.64), controlPoint1: CGPoint(x: 183.63, y: 11.56), controlPoint2: CGPoint(x: 182.83, y: 23.16))
        bevel3Path.addLine(to: CGPoint(x: 182.97, y: 54.23))
        bevel3Path.close()
        bevel3Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel3Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 184.49, y: 52.77),
            end: CGPoint(x: 184.92, y: -17.57),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-2 Drawing
        let bevel2Path = UIBezierPath()
        bevel2Path.move(to: CGPoint(x: 159.56, y: -77.34))
        bevel2Path.addCurve(to: CGPoint(x: 107.34, y: -129.6), controlPoint1: CGPoint(x: 138.21, y: -95.29), controlPoint2: CGPoint(x: 128.67, y: -104.21))
        bevel2Path.addLine(to: CGPoint(x: 111.99, y: -126.33))
        bevel2Path.addCurve(to: CGPoint(x: 155.76, y: -82.6), controlPoint1: CGPoint(x: 130.53, y: -106.99), controlPoint2: CGPoint(x: 137.98, y: -98.5))
        bevel2Path.addLine(to: CGPoint(x: 159.56, y: -77.34))
        bevel2Path.close()
        bevel2Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel2Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 159.6, y: -79.38),
            end: CGPoint(x: 111.28, y: -127.81),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// bevel-1 Drawing
        let bevel1Path = UIBezierPath()
        bevel1Path.move(to: CGPoint(x: 53.04, y: -152.3))
        bevel1Path.addCurve(to: CGPoint(x: -22.58, y: -152.32), controlPoint1: CGPoint(x: 24.6, y: -149.83), controlPoint2: CGPoint(x: 11.24, y: -149.39))
        bevel1Path.addLine(to: CGPoint(x: -16.84, y: -153.32))
        bevel1Path.addCurve(to: CGPoint(x: 46.48, y: -153.36), controlPoint1: CGPoint(x: 10.57, y: -152.74), controlPoint2: CGPoint(x: 22.11, y: -151.99))
        bevel1Path.addLine(to: CGPoint(x: 53.04, y: -152.3))
        bevel1Path.close()
        bevel1Path.usesEvenOddFillRule = true
        context.saveGState()
        bevel1Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 51.59, y: -153.8),
            end: CGPoint(x: -18.42, y: -153.87),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()



        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        if (clickRingActive) {
            //// clickRing Drawing
            let clickRingPath = UIBezierPath(ovalIn: CGRect(x: knobFrame.minX + fastFloor(knobFrame.width * 0.28242 + 0.5), y: knobFrame.minY + fastFloor(knobFrame.height * 0.28242 + 0.5), width: fastFloor(knobFrame.width * 0.71758 + 0.5) - fastFloor(knobFrame.width * 0.28242 + 0.5), height: fastFloor(knobFrame.height * 0.71758 + 0.5) - fastFloor(knobFrame.height * 0.28242 + 0.5)))
            UIGroover.lightBlue.setStroke()
            clickRingPath.lineWidth = 2
            clickRingPath.stroke()
        }


        //// clickButton
        //// clickOval7 Drawing
        context.saveGState()
        context.translateBy(x: clickButton.minX + 19, y: clickButton.minY + 33.25)

        let clickOval7Path = UIBezierPath(ovalIn: CGRect(x: -4.75, y: -4.75, width: 9.5, height: 9.5))
        clickColor.setFill()
        clickOval7Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval7Path.lineWidth = 1
        clickOval7Path.stroke()

        context.restoreGState()


        //// clickOval6 Drawing
        let clickOval6Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX, y: clickButton.minY + 29, width: 9, height: 9))
        clickColor.setFill()
        clickOval6Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval6Path.lineWidth = 1
        clickOval6Path.stroke()


        //// clickOval5 Drawing
        let clickOval5Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX + 29, y: clickButton.minY + 14, width: 9, height: 10))
        clickColor.setFill()
        clickOval5Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval5Path.lineWidth = 1
        clickOval5Path.stroke()


        //// clickOval4 Drawing
        let clickOval4Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX + 14, y: clickButton.minY + 14, width: 10, height: 10))
        clickColor.setFill()
        clickOval4Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval4Path.lineWidth = 1
        clickOval4Path.stroke()


        //// clickOval3 Drawing
        let clickOval3Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX, y: clickButton.minY + 14, width: 9, height: 10))
        clickColor.setFill()
        clickOval3Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval3Path.lineWidth = 1
        clickOval3Path.stroke()


        //// clickOval2 Drawing
        let clickOval2Path = UIBezierPath(ovalIn: CGRect(x: clickButton.minX + 29, y: clickButton.minY, width: 9, height: 9))
        clickColor.setFill()
        clickOval2Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval2Path.lineWidth = 1
        clickOval2Path.stroke()


        //// clickOval1 Drawing
        context.saveGState()
        context.translateBy(x: clickButton.minX + 19, y: clickButton.minY + 4.75)

        let clickOval1Path = UIBezierPath(ovalIn: CGRect(x: -4.75, y: -4.75, width: 9.5, height: 9.5))
        clickColor.setFill()
        clickOval1Path.fill()
        UIGroover.clickDarkGray.setStroke()
        clickOval1Path.lineWidth = 1
        clickOval1Path.stroke()

        context.restoreGState()
    }

    public dynamic class func drawPositionsCanvas(position1Selected: Bool = false, position2Selected: Bool = false, position3Selected: Bool = false, position4Selected: Bool = false, position5Selected: Bool = false, position6Selected: Bool = false, position7Selected: Bool = false, position8Selected: Bool = false, position9Selected: Bool = false, position10Selected: Bool = false, position11Selected: Bool = false, position12Selected: Bool = false, position13Selected: Bool = false, position14Selected: Bool = false, position15Selected: Bool = false, position16Selected: Bool = false, position17Selected: Bool = false, position18Selected: Bool = false) {

        //// Variable Declarations
        let position1Color = position1Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position2Color = position2Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position3Color = position3Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position4Color = position4Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position5Color = position5Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position6Color = position6Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position7Color = position7Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position8Color = position8Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position9Color = position9Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position10Color = position10Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position11Color = position11Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position12Color = position12Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position13Color = position13Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position14Color = position14Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position15Color = position15Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position16Color = position16Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position17Color = position17Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight
        let position18Color = position18Selected ? UIGroover.lightBlue : UIGroover.buttonsBGLight

        //// position18 Drawing
        let position18Path = UIBezierPath(roundedRect: CGRect(x: 255, y: 0, width: 13, height: 13), cornerRadius: 2)
        position18Color.setFill()
        position18Path.fill()


        //// position17 Drawing
        let position17Path = UIBezierPath(roundedRect: CGRect(x: 240, y: 0, width: 13, height: 13), cornerRadius: 2)
        position17Color.setFill()
        position17Path.fill()


        //// position16 Drawing
        let position16Path = UIBezierPath(roundedRect: CGRect(x: 225, y: 0, width: 13, height: 13), cornerRadius: 2)
        position16Color.setFill()
        position16Path.fill()


        //// position15 Drawing
        let position15Path = UIBezierPath(roundedRect: CGRect(x: 210, y: 0, width: 13, height: 13), cornerRadius: 2)
        position15Color.setFill()
        position15Path.fill()


        //// position14 Drawing
        let position14Path = UIBezierPath(roundedRect: CGRect(x: 195, y: 0, width: 13, height: 13), cornerRadius: 2)
        position14Color.setFill()
        position14Path.fill()


        //// position13 Drawing
        let position13Path = UIBezierPath(roundedRect: CGRect(x: 180, y: 0, width: 13, height: 13), cornerRadius: 2)
        position13Color.setFill()
        position13Path.fill()


        //// position12 Drawing
        let position12Path = UIBezierPath(roundedRect: CGRect(x: 165, y: 0, width: 13, height: 13), cornerRadius: 2)
        position12Color.setFill()
        position12Path.fill()


        //// position11 Drawing
        let position11Path = UIBezierPath(roundedRect: CGRect(x: 150, y: 0, width: 13, height: 13), cornerRadius: 2)
        position11Color.setFill()
        position11Path.fill()


        //// position10 Drawing
        let position10Path = UIBezierPath(roundedRect: CGRect(x: 135, y: 0, width: 13, height: 13), cornerRadius: 2)
        position10Color.setFill()
        position10Path.fill()


        //// position9 Drawing
        let position9Path = UIBezierPath(roundedRect: CGRect(x: 120, y: 0, width: 13, height: 13), cornerRadius: 2)
        position9Color.setFill()
        position9Path.fill()


        //// position8 Drawing
        let position8Path = UIBezierPath(roundedRect: CGRect(x: 105, y: 0, width: 13, height: 13), cornerRadius: 2)
        position8Color.setFill()
        position8Path.fill()


        //// position7 Drawing
        let position7Path = UIBezierPath(roundedRect: CGRect(x: 90, y: 0, width: 13, height: 13), cornerRadius: 2)
        position7Color.setFill()
        position7Path.fill()


        //// position6 Drawing
        let position6Path = UIBezierPath(roundedRect: CGRect(x: 75, y: 0, width: 13, height: 13), cornerRadius: 2)
        position6Color.setFill()
        position6Path.fill()


        //// position5 Drawing
        let position5Path = UIBezierPath(roundedRect: CGRect(x: 60, y: 0, width: 13, height: 13), cornerRadius: 2)
        position5Color.setFill()
        position5Path.fill()


        //// position4 Drawing
        let position4Path = UIBezierPath(roundedRect: CGRect(x: 45, y: 0, width: 13, height: 13), cornerRadius: 2)
        position4Color.setFill()
        position4Path.fill()


        //// position3 Drawing
        let position3Path = UIBezierPath(roundedRect: CGRect(x: 30, y: 0, width: 13, height: 13), cornerRadius: 2)
        position3Color.setFill()
        position3Path.fill()


        //// position2 Drawing
        let position2Path = UIBezierPath(roundedRect: CGRect(x: 15, y: 0, width: 13, height: 13), cornerRadius: 2)
        position2Color.setFill()
        position2Path.fill()


        //// position1 Drawing
        let position1Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 13, height: 13), cornerRadius: 2)
        position1Color.setFill()
        position1Path.fill()
    }

    public dynamic class func drawSettingsIconCanvas(settingsSelected: Bool = false) {

        //// Variable Declarations
        let settingsColor = settingsSelected ? UIGroover.lightBlue : UIGroover.menuGray

        //// settingsButton Drawing
        let settingsButtonPath = UIBezierPath()
        settingsButtonPath.move(to: CGPoint(x: 33, y: 23.35))
        settingsButtonPath.addLine(to: CGPoint(x: 33, y: 20.6))
        settingsButtonPath.addLine(to: CGPoint(x: 29.73, y: 20.07))
        settingsButtonPath.addCurve(to: CGPoint(x: 28.83, y: 17.9), controlPoint1: CGPoint(x: 29.53, y: 19.29), controlPoint2: CGPoint(x: 29.23, y: 18.56))
        settingsButtonPath.addLine(to: CGPoint(x: 30.74, y: 15.18))
        settingsButtonPath.addLine(to: CGPoint(x: 28.79, y: 13.24))
        settingsButtonPath.addLine(to: CGPoint(x: 26.11, y: 15.17))
        settingsButtonPath.addCurve(to: CGPoint(x: 23.92, y: 14.26), controlPoint1: CGPoint(x: 25.44, y: 14.76), controlPoint2: CGPoint(x: 24.7, y: 14.45))
        settingsButtonPath.addLine(to: CGPoint(x: 23.35, y: 11))
        settingsButtonPath.addLine(to: CGPoint(x: 20.6, y: 11))
        settingsButtonPath.addLine(to: CGPoint(x: 20.07, y: 14.25))
        settingsButtonPath.addCurve(to: CGPoint(x: 17.88, y: 15.15), controlPoint1: CGPoint(x: 19.29, y: 14.44), controlPoint2: CGPoint(x: 18.56, y: 14.74))
        settingsButtonPath.addLine(to: CGPoint(x: 15.21, y: 13.23))
        settingsButtonPath.addLine(to: CGPoint(x: 13.26, y: 15.18))
        settingsButtonPath.addLine(to: CGPoint(x: 15.15, y: 17.87))
        settingsButtonPath.addCurve(to: CGPoint(x: 14.23, y: 20.07), controlPoint1: CGPoint(x: 14.74, y: 18.54), controlPoint2: CGPoint(x: 14.43, y: 19.28))
        settingsButtonPath.addLine(to: CGPoint(x: 11, y: 20.6))
        settingsButtonPath.addLine(to: CGPoint(x: 11, y: 23.35))
        settingsButtonPath.addLine(to: CGPoint(x: 14.23, y: 23.93))
        settingsButtonPath.addCurve(to: CGPoint(x: 15.14, y: 26.12), controlPoint1: CGPoint(x: 14.42, y: 24.71), controlPoint2: CGPoint(x: 14.73, y: 25.45))
        settingsButtonPath.addLine(to: CGPoint(x: 13.23, y: 28.79))
        settingsButtonPath.addLine(to: CGPoint(x: 15.18, y: 30.73))
        settingsButtonPath.addLine(to: CGPoint(x: 17.87, y: 28.85))
        settingsButtonPath.addCurve(to: CGPoint(x: 20.06, y: 29.75), controlPoint1: CGPoint(x: 18.55, y: 29.25), controlPoint2: CGPoint(x: 19.28, y: 29.56))
        settingsButtonPath.addLine(to: CGPoint(x: 20.6, y: 33))
        settingsButtonPath.addLine(to: CGPoint(x: 23.35, y: 33))
        settingsButtonPath.addLine(to: CGPoint(x: 23.93, y: 29.74))
        settingsButtonPath.addCurve(to: CGPoint(x: 26.11, y: 28.83), controlPoint1: CGPoint(x: 24.71, y: 29.55), controlPoint2: CGPoint(x: 25.44, y: 29.24))
        settingsButtonPath.addLine(to: CGPoint(x: 28.82, y: 30.73))
        settingsButtonPath.addLine(to: CGPoint(x: 30.77, y: 28.79))
        settingsButtonPath.addLine(to: CGPoint(x: 28.83, y: 26.1))
        settingsButtonPath.addCurve(to: CGPoint(x: 29.73, y: 23.93), controlPoint1: CGPoint(x: 29.23, y: 25.43), controlPoint2: CGPoint(x: 29.54, y: 24.7))
        settingsButtonPath.addLine(to: CGPoint(x: 33, y: 23.35))
        settingsButtonPath.addLine(to: CGPoint(x: 33, y: 23.35))
        settingsButtonPath.close()
        settingsButtonPath.move(to: CGPoint(x: 22, y: 25.67))
        settingsButtonPath.addCurve(to: CGPoint(x: 18.33, y: 22), controlPoint1: CGPoint(x: 19.98, y: 25.67), controlPoint2: CGPoint(x: 18.33, y: 24.02))
        settingsButtonPath.addCurve(to: CGPoint(x: 22, y: 18.33), controlPoint1: CGPoint(x: 18.33, y: 19.98), controlPoint2: CGPoint(x: 19.98, y: 18.33))
        settingsButtonPath.addCurve(to: CGPoint(x: 25.67, y: 22), controlPoint1: CGPoint(x: 24.02, y: 18.33), controlPoint2: CGPoint(x: 25.67, y: 19.98))
        settingsButtonPath.addCurve(to: CGPoint(x: 22, y: 25.67), controlPoint1: CGPoint(x: 25.67, y: 24.02), controlPoint2: CGPoint(x: 24.02, y: 25.67))
        settingsButtonPath.addLine(to: CGPoint(x: 22, y: 25.67))
        settingsButtonPath.close()
        settingsButtonPath.usesEvenOddFillRule = true
        settingsColor.setFill()
        settingsButtonPath.fill()
    }

    public dynamic class func drawLeftCanvas() {

        //// leftArrow Drawing
        let leftArrowPath = UIBezierPath()
        leftArrowPath.move(to: CGPoint(x: 0, y: 6))
        leftArrowPath.addLine(to: CGPoint(x: 12, y: 12))
        leftArrowPath.addLine(to: CGPoint(x: 12, y: 0))
        leftArrowPath.addLine(to: CGPoint(x: 0, y: 6))
        leftArrowPath.close()
        leftArrowPath.usesEvenOddFillRule = true
        UIGroover.popupElements.setFill()
        leftArrowPath.fill()
    }

    public dynamic class func drawRightCanvas() {

        //// rightButton Drawing
        let rightButtonPath = UIBezierPath()
        rightButtonPath.move(to: CGPoint(x: 12, y: 6))
        rightButtonPath.addLine(to: CGPoint(x: 0, y: 12))
        rightButtonPath.addLine(to: CGPoint(x: 0, y: 0))
        rightButtonPath.addLine(to: CGPoint(x: 12, y: 6))
        rightButtonPath.close()
        rightButtonPath.usesEvenOddFillRule = true
        UIGroover.popupElements.setFill()
        rightButtonPath.fill()
    }

    public dynamic class func drawMeasureCanvas(measureFrame: CGRect = CGRect(x: 0, y: 0, width: 77, height: 24), measureExists: Bool = true, measureActive: Bool = true, measureProgress: CGFloat = 19, measureHeight: CGFloat = 22) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Variable Declarations
        let inactiveBackgroundColor = measureExists ? UIGroover.measureDark : UIGroover.transparent
        let measureActiveColor = measureActive ? UIGroover.lightBlue : UIGroover.transparent

        //// measureBG Drawing
        let measureBGPath = UIBezierPath(roundedRect: CGRect(x: measureFrame.minX + fastFloor(measureFrame.width * 0.00000 + 0.5), y: measureFrame.minY + fastFloor(measureFrame.height * 0.00000 + 0.5), width: fastFloor(measureFrame.width * 1.00000 + 0.5) - fastFloor(measureFrame.width * 0.00000 + 0.5), height: fastFloor(measureFrame.height * 1.00000 + 0.5) - fastFloor(measureFrame.height * 0.00000 + 0.5)), cornerRadius: 2)
        inactiveBackgroundColor.setFill()
        measureBGPath.fill()


        //// measureBorder Drawing
        let measureBorderPath = UIBezierPath(roundedRect: CGRect(x: measureFrame.minX + fastFloor(measureFrame.width * 0.01299 + 0.5), y: measureFrame.minY + fastFloor(measureFrame.height * 0.04167 - 0.5) + 1, width: fastFloor(measureFrame.width * 0.98701 + 0.5) - fastFloor(measureFrame.width * 0.01299 + 0.5), height: fastFloor(measureFrame.height * 0.95833 - 0.5) - fastFloor(measureFrame.height * 0.04167 - 0.5)), cornerRadius: 2)
        measureActiveColor.setStroke()
        measureBorderPath.lineWidth = 2
        measureBorderPath.stroke()


        if (measureActive) {
            //// measureActiveFill Drawing
            let measureActiveFillPath = UIBezierPath(roundedRect: CGRect(x: 1, y: 1, width: measureProgress, height: measureHeight), cornerRadius: 2)
            UIGroover.lightBlue.setFill()
            measureActiveFillPath.fill()
        }
    }

    public dynamic class func drawSliderCanvas(sliderPosition: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let sliderPositionOffset: CGFloat = sliderPosition + 1

        //// sliderBasicBG Drawing
        let sliderBasicBGPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 9, width: 214, height: 8), cornerRadius: 2)
        UIGroover.popupContentLight.setFill()
        sliderBasicBGPath.fill()


        //// sliderBlue Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 9)
        context.scaleBy(x: sliderPosition, y: 1)

        let sliderBluePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 1, height: 8), cornerRadius: 0.5)
        UIGroover.lightBlue.setFill()
        sliderBluePath.fill()

        context.restoreGState()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: sliderPositionOffset, y: 1, width: 24, height: 24), cornerRadius: 6)
        color.setFill()
        rectangle2Path.fill()
        UIGroover.popupContentDark.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()
    }

    public dynamic class func drawPanSliderCanvas(panSliderPosition: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let panSliderPositionOffset: CGFloat = panSliderPosition + 95

        //// panSliderBasicBG Drawing
        let panSliderBasicBGPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 9, width: 214, height: 8), cornerRadius: 2)
        UIGroover.popupContentLight.setFill()
        panSliderBasicBGPath.fill()


        //// sliderPanBlue Drawing
        context.saveGState()
        context.translateBy(x: 107, y: 9)
        context.scaleBy(x: panSliderPosition, y: 1)

        let sliderPanBluePath = UIBezierPath()
        sliderPanBluePath.move(to: CGPoint(x: 0, y: 2))
        sliderPanBluePath.addCurve(to: CGPoint(x: 0.01, y: 0), controlPoint1: CGPoint(x: 0, y: 0.89), controlPoint2: CGPoint(x: 0, y: 0))
        sliderPanBluePath.addLine(to: CGPoint(x: 0.99, y: 0))
        sliderPanBluePath.addCurve(to: CGPoint(x: 1, y: 2), controlPoint1: CGPoint(x: 1, y: 0), controlPoint2: CGPoint(x: 1, y: 0.89))
        sliderPanBluePath.addLine(to: CGPoint(x: 1, y: 6))
        sliderPanBluePath.addCurve(to: CGPoint(x: 0.99, y: 8), controlPoint1: CGPoint(x: 1, y: 7.11), controlPoint2: CGPoint(x: 1, y: 8))
        sliderPanBluePath.addLine(to: CGPoint(x: 0.01, y: 8))
        sliderPanBluePath.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0, y: 8), controlPoint2: CGPoint(x: 0, y: 7.11))
        sliderPanBluePath.addLine(to: CGPoint(x: 0, y: 2))
        sliderPanBluePath.close()
        sliderPanBluePath.usesEvenOddFillRule = true
        UIGroover.lightBlue.setFill()
        sliderPanBluePath.fill()

        context.restoreGState()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: panSliderPositionOffset, y: 1, width: 24, height: 24), cornerRadius: 6)
        color.setFill()
        rectangle2Path.fill()
        UIGroover.popupContentDark.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()
    }

    public dynamic class func drawQuarterCanvas(quarterFrame: CGRect = CGRect(x: 0, y: 0, width: 54, height: 54), quarterSelected: Bool = false, quarterActive: Bool = false) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Variable Declarations
        let quarterDeselected = !quarterSelected


        //// Subframes
        let quarterIconFrame = CGRect(x: quarterFrame.minX + fastFloor(quarterFrame.width * 0.37037 + 0.5), y: quarterFrame.minY + fastFloor(quarterFrame.height * 0.25926 + 0.5), width: fastFloor(quarterFrame.width * 0.59259 + 0.5) - fastFloor(quarterFrame.width * 0.37037 + 0.5), height: fastFloor(quarterFrame.height * 0.72222 + 0.5) - fastFloor(quarterFrame.height * 0.25926 + 0.5))


        if (quarterSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRect(x: quarterFrame.minX + fastFloor(quarterFrame.width * 0.00000 + 0.5), y: quarterFrame.minY + fastFloor(quarterFrame.height * 0.00000 + 0.5), width: fastFloor(quarterFrame.width * 1.00000 + 0.5) - fastFloor(quarterFrame.width * 0.00000 + 0.5), height: fastFloor(quarterFrame.height * 1.00000 + 0.5) - fastFloor(quarterFrame.height * 0.00000 + 0.5)), cornerRadius: 6)
            UIGroover.lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (quarterDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRect(x: quarterFrame.minX + fastFloor(quarterFrame.width * 0.09259 + 0.5), y: quarterFrame.minY + fastFloor(quarterFrame.height * 0.09259 + 0.5), width: fastFloor(quarterFrame.width * 0.90741 + 0.5) - fastFloor(quarterFrame.width * 0.09259 + 0.5), height: fastFloor(quarterFrame.height * 0.90741 + 0.5) - fastFloor(quarterFrame.height * 0.09259 + 0.5)), cornerRadius: 6)
            UIGroover.black.setFill()
            buttonBlackPath.fill()
        }


        if (quarterActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRect(x: quarterFrame.minX + fastFloor(quarterFrame.width * 0.00000 + 0.5), y: quarterFrame.minY + fastFloor(quarterFrame.height * 0.00000 + 0.5), width: fastFloor(quarterFrame.width * 1.00000 + 0.5) - fastFloor(quarterFrame.width * 0.00000 + 0.5), height: fastFloor(quarterFrame.height * 1.00000 + 0.5) - fastFloor(quarterFrame.height * 0.00000 + 0.5)), cornerRadius: 6)
            UIGroover.lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (quarterDeselected) {
            //// quarterLight Drawing
            let quarterLightPath = UIBezierPath()
            quarterLightPath.move(to: CGPoint(x: quarterIconFrame.minX + 0.95501 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterLightPath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.54549 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.95455 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + 0.94687 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.85074 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.77776 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.91616 * quarterIconFrame.height))
            quarterLightPath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.00490 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.93814 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + 0.28439 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.99771 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.04236 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.99036 * quarterIconFrame.height))
            quarterLightPath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.40983 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.76545 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + -0.03256 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.88592 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.14874 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80860 * quarterIconFrame.height))
            quarterLightPath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.79016 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.73901 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + 0.55235 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.74189 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.68918 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.73339 * quarterIconFrame.height))
            quarterLightPath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.79016 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.00000 * quarterIconFrame.height))
            quarterLightPath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95683 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.00000 * quarterIconFrame.height))
            quarterLightPath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95683 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterLightPath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95501 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterLightPath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95501 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterLightPath.close()
            quarterLightPath.usesEvenOddFillRule = true
            UIGroover.noteGray.setFill()
            quarterLightPath.fill()
        }


        if (quarterActive) {
            //// quarterDark Drawing
            let quarterDarkPath = UIBezierPath()
            quarterDarkPath.move(to: CGPoint(x: quarterIconFrame.minX + 0.95501 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterDarkPath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.54549 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.95455 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + 0.94687 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.85074 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.77776 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.91616 * quarterIconFrame.height))
            quarterDarkPath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.00490 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.93814 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + 0.28439 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.99771 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.04236 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.99036 * quarterIconFrame.height))
            quarterDarkPath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.40983 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.76545 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + -0.03256 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.88592 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.14874 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80860 * quarterIconFrame.height))
            quarterDarkPath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.79016 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.73901 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + 0.55235 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.74189 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.68918 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.73339 * quarterIconFrame.height))
            quarterDarkPath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.79016 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.00000 * quarterIconFrame.height))
            quarterDarkPath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95683 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.00000 * quarterIconFrame.height))
            quarterDarkPath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95683 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterDarkPath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95501 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterDarkPath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95501 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterDarkPath.close()
            quarterDarkPath.usesEvenOddFillRule = true
            UIGroover.noteDark.setFill()
            quarterDarkPath.fill()
        }


        if (quarterSelected) {
            //// quarterBlue Drawing
            let quarterBluePath = UIBezierPath()
            quarterBluePath.move(to: CGPoint(x: quarterIconFrame.minX + 0.95501 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterBluePath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.54549 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.95455 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + 0.94687 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.85074 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.77776 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.91616 * quarterIconFrame.height))
            quarterBluePath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.00490 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.93814 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + 0.28439 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.99771 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.04236 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.99036 * quarterIconFrame.height))
            quarterBluePath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.40983 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.76545 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + -0.03256 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.88592 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.14874 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80860 * quarterIconFrame.height))
            quarterBluePath.addCurve(to: CGPoint(x: quarterIconFrame.minX + 0.79016 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.73901 * quarterIconFrame.height), controlPoint1: CGPoint(x: quarterIconFrame.minX + 0.55235 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.74189 * quarterIconFrame.height), controlPoint2: CGPoint(x: quarterIconFrame.minX + 0.68918 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.73339 * quarterIconFrame.height))
            quarterBluePath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.79016 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.00000 * quarterIconFrame.height))
            quarterBluePath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95683 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.00000 * quarterIconFrame.height))
            quarterBluePath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95683 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterBluePath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95501 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterBluePath.addLine(to: CGPoint(x: quarterIconFrame.minX + 0.95501 * quarterIconFrame.width, y: quarterIconFrame.minY + 0.80000 * quarterIconFrame.height))
            quarterBluePath.close()
            quarterBluePath.usesEvenOddFillRule = true
            UIGroover.lightBlue.setFill()
            quarterBluePath.fill()
        }
    }

    public dynamic class func drawEighthCanvas(eighthFrame: CGRect = CGRect(x: 0, y: 0, width: 54, height: 54), eighthSelected: Bool = false, eighthActive: Bool = false) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Variable Declarations
        let eighthDeselected = !eighthSelected


        //// Subframes
        let eightIconFrame = CGRect(x: eighthFrame.minX + fastFloor(eighthFrame.width * 0.37037 + 0.5), y: eighthFrame.minY + fastFloor(eighthFrame.height * 0.25926 + 0.5), width: fastFloor(eighthFrame.width * 0.70370 + 0.5) - fastFloor(eighthFrame.width * 0.37037 + 0.5), height: fastFloor(eighthFrame.height * 0.72222 + 0.5) - fastFloor(eighthFrame.height * 0.25926 + 0.5))


        if (eighthSelected) {
            //// buttonOutline 3 Drawing
            let buttonOutline3Path = UIBezierPath(roundedRect: CGRect(x: eighthFrame.minX + fastFloor(eighthFrame.width * 0.00000 + 0.5), y: eighthFrame.minY + fastFloor(eighthFrame.height * 0.00000 + 0.5), width: fastFloor(eighthFrame.width * 1.00000 + 0.5) - fastFloor(eighthFrame.width * 0.00000 + 0.5), height: fastFloor(eighthFrame.height * 1.00000 + 0.5) - fastFloor(eighthFrame.height * 0.00000 + 0.5)), cornerRadius: 6)
            UIGroover.lightBlue.setStroke()
            buttonOutline3Path.lineWidth = 2
            buttonOutline3Path.stroke()
        }


        if (eighthDeselected) {
            //// buttonBlack 3 Drawing
            let buttonBlack3Path = UIBezierPath(roundedRect: CGRect(x: eighthFrame.minX + fastFloor(eighthFrame.width * 0.09259 + 0.5), y: eighthFrame.minY + fastFloor(eighthFrame.height * 0.09259 + 0.5), width: fastFloor(eighthFrame.width * 0.90741 + 0.5) - fastFloor(eighthFrame.width * 0.09259 + 0.5), height: fastFloor(eighthFrame.height * 0.90741 + 0.5) - fastFloor(eighthFrame.height * 0.09259 + 0.5)), cornerRadius: 6)
            UIGroover.black.setFill()
            buttonBlack3Path.fill()
        }


        if (eighthActive) {
            //// buttonBlue 3 Drawing
            let buttonBlue3Path = UIBezierPath(roundedRect: CGRect(x: eighthFrame.minX + fastFloor(eighthFrame.width * 0.00000 + 0.5), y: eighthFrame.minY + fastFloor(eighthFrame.height * 0.00000 + 0.5), width: fastFloor(eighthFrame.width * 1.00000 + 0.5) - fastFloor(eighthFrame.width * 0.00000 + 0.5), height: fastFloor(eighthFrame.height * 1.00000 + 0.5) - fastFloor(eighthFrame.height * 0.00000 + 0.5)), cornerRadius: 6)
            UIGroover.lightBlue.setFill()
            buttonBlue3Path.fill()
        }


        if (eighthDeselected) {
            //// eighthLight Drawing
            let eighthLightPath = UIBezierPath()
            eighthLightPath.move(to: CGPoint(x: eightIconFrame.minX + 0.58927 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthLightPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.52677 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthLightPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.52677 * eightIconFrame.width, y: eightIconFrame.minY + 0.73901 * eightIconFrame.height))
            eighthLightPath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.27322 * eightIconFrame.width, y: eightIconFrame.minY + 0.76545 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.45945 * eightIconFrame.width, y: eightIconFrame.minY + 0.73339 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + 0.36823 * eightIconFrame.width, y: eightIconFrame.minY + 0.74189 * eightIconFrame.height))
            eighthLightPath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.00327 * eightIconFrame.width, y: eightIconFrame.minY + 0.93814 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.09916 * eightIconFrame.width, y: eightIconFrame.minY + 0.80860 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + -0.02171 * eightIconFrame.width, y: eightIconFrame.minY + 0.88592 * eightIconFrame.height))
            eighthLightPath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.36366 * eightIconFrame.width, y: eightIconFrame.minY + 0.95455 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.02824 * eightIconFrame.width, y: eightIconFrame.minY + 0.99036 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + 0.18959 * eightIconFrame.width, y: eightIconFrame.minY + 0.99771 * eightIconFrame.height))
            eighthLightPath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.63668 * eightIconFrame.width, y: eightIconFrame.minY + 0.80000 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.51850 * eightIconFrame.width, y: eightIconFrame.minY + 0.91616 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + 0.63125 * eightIconFrame.width, y: eightIconFrame.minY + 0.85074 * eightIconFrame.height))
            eighthLightPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.63668 * eightIconFrame.width, y: eightIconFrame.minY + 0.80000 * eightIconFrame.height))
            eighthLightPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.63789 * eightIconFrame.width, y: eightIconFrame.minY + 0.80000 * eightIconFrame.height))
            eighthLightPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.63789 * eightIconFrame.width, y: eightIconFrame.minY + 0.16000 * eightIconFrame.height))
            eighthLightPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.98511 * eightIconFrame.width, y: eightIconFrame.minY + 0.16000 * eightIconFrame.height))
            eighthLightPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.98511 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthLightPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.58927 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthLightPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.58927 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthLightPath.close()
            eighthLightPath.usesEvenOddFillRule = true
            UIGroover.noteGray.setFill()
            eighthLightPath.fill()
        }


        if (eighthActive) {
            //// eighthDark Drawing
            let eighthDarkPath = UIBezierPath()
            eighthDarkPath.move(to: CGPoint(x: eightIconFrame.minX + 0.58927 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthDarkPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.52677 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthDarkPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.52677 * eightIconFrame.width, y: eightIconFrame.minY + 0.73901 * eightIconFrame.height))
            eighthDarkPath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.27322 * eightIconFrame.width, y: eightIconFrame.minY + 0.76545 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.45945 * eightIconFrame.width, y: eightIconFrame.minY + 0.73339 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + 0.36823 * eightIconFrame.width, y: eightIconFrame.minY + 0.74189 * eightIconFrame.height))
            eighthDarkPath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.00327 * eightIconFrame.width, y: eightIconFrame.minY + 0.93814 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.09916 * eightIconFrame.width, y: eightIconFrame.minY + 0.80860 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + -0.02171 * eightIconFrame.width, y: eightIconFrame.minY + 0.88592 * eightIconFrame.height))
            eighthDarkPath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.36366 * eightIconFrame.width, y: eightIconFrame.minY + 0.95455 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.02824 * eightIconFrame.width, y: eightIconFrame.minY + 0.99036 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + 0.18959 * eightIconFrame.width, y: eightIconFrame.minY + 0.99771 * eightIconFrame.height))
            eighthDarkPath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.63668 * eightIconFrame.width, y: eightIconFrame.minY + 0.80000 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.51850 * eightIconFrame.width, y: eightIconFrame.minY + 0.91616 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + 0.63125 * eightIconFrame.width, y: eightIconFrame.minY + 0.85074 * eightIconFrame.height))
            eighthDarkPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.63668 * eightIconFrame.width, y: eightIconFrame.minY + 0.80000 * eightIconFrame.height))
            eighthDarkPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.63789 * eightIconFrame.width, y: eightIconFrame.minY + 0.80000 * eightIconFrame.height))
            eighthDarkPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.63789 * eightIconFrame.width, y: eightIconFrame.minY + 0.16000 * eightIconFrame.height))
            eighthDarkPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.98511 * eightIconFrame.width, y: eightIconFrame.minY + 0.16000 * eightIconFrame.height))
            eighthDarkPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.98511 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthDarkPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.58927 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthDarkPath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.58927 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthDarkPath.close()
            eighthDarkPath.usesEvenOddFillRule = true
            UIGroover.noteDark.setFill()
            eighthDarkPath.fill()
        }


        if (eighthSelected) {
            //// eighthBlue Drawing
            let eighthBluePath = UIBezierPath()
            eighthBluePath.move(to: CGPoint(x: eightIconFrame.minX + 0.58927 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthBluePath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.52677 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthBluePath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.52677 * eightIconFrame.width, y: eightIconFrame.minY + 0.73901 * eightIconFrame.height))
            eighthBluePath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.27322 * eightIconFrame.width, y: eightIconFrame.minY + 0.76545 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.45945 * eightIconFrame.width, y: eightIconFrame.minY + 0.73339 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + 0.36823 * eightIconFrame.width, y: eightIconFrame.minY + 0.74189 * eightIconFrame.height))
            eighthBluePath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.00327 * eightIconFrame.width, y: eightIconFrame.minY + 0.93814 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.09916 * eightIconFrame.width, y: eightIconFrame.minY + 0.80860 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + -0.02171 * eightIconFrame.width, y: eightIconFrame.minY + 0.88592 * eightIconFrame.height))
            eighthBluePath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.36366 * eightIconFrame.width, y: eightIconFrame.minY + 0.95455 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.02824 * eightIconFrame.width, y: eightIconFrame.minY + 0.99036 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + 0.18959 * eightIconFrame.width, y: eightIconFrame.minY + 0.99771 * eightIconFrame.height))
            eighthBluePath.addCurve(to: CGPoint(x: eightIconFrame.minX + 0.63668 * eightIconFrame.width, y: eightIconFrame.minY + 0.80000 * eightIconFrame.height), controlPoint1: CGPoint(x: eightIconFrame.minX + 0.51850 * eightIconFrame.width, y: eightIconFrame.minY + 0.91616 * eightIconFrame.height), controlPoint2: CGPoint(x: eightIconFrame.minX + 0.63125 * eightIconFrame.width, y: eightIconFrame.minY + 0.85074 * eightIconFrame.height))
            eighthBluePath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.63668 * eightIconFrame.width, y: eightIconFrame.minY + 0.80000 * eightIconFrame.height))
            eighthBluePath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.63789 * eightIconFrame.width, y: eightIconFrame.minY + 0.80000 * eightIconFrame.height))
            eighthBluePath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.63789 * eightIconFrame.width, y: eightIconFrame.minY + 0.16000 * eightIconFrame.height))
            eighthBluePath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.98511 * eightIconFrame.width, y: eightIconFrame.minY + 0.16000 * eightIconFrame.height))
            eighthBluePath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.98511 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthBluePath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.58927 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthBluePath.addLine(to: CGPoint(x: eightIconFrame.minX + 0.58927 * eightIconFrame.width, y: eightIconFrame.minY + 0.00000 * eightIconFrame.height))
            eighthBluePath.close()
            eighthBluePath.usesEvenOddFillRule = true
            UIGroover.lightBlue.setFill()
            eighthBluePath.fill()
        }
    }

    public dynamic class func drawSixteenthCanvas(sixteenthFrame: CGRect = CGRect(x: 0, y: 0, width: 54, height: 54), sixteenthSelected: Bool = false, sixteenthActive: Bool = false) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Variable Declarations
        let sixteenthDeselected = !sixteenthSelected


        //// Subframes
        let sixteenthIconFrame = CGRect(x: sixteenthFrame.minX + fastFloor(sixteenthFrame.width * 0.37037 + 0.5), y: sixteenthFrame.minY + fastFloor(sixteenthFrame.height * 0.25926 + 0.5), width: fastFloor(sixteenthFrame.width * 0.70370 + 0.5) - fastFloor(sixteenthFrame.width * 0.37037 + 0.5), height: fastFloor(sixteenthFrame.height * 0.72222 + 0.5) - fastFloor(sixteenthFrame.height * 0.25926 + 0.5))


        if (sixteenthSelected) {
            //// buttonOutline 4 Drawing
            let buttonOutline4Path = UIBezierPath(roundedRect: CGRect(x: sixteenthFrame.minX + fastFloor(sixteenthFrame.width * 0.00000 + 0.5), y: sixteenthFrame.minY + fastFloor(sixteenthFrame.height * 0.00000 + 0.5), width: fastFloor(sixteenthFrame.width * 1.00000 + 0.5) - fastFloor(sixteenthFrame.width * 0.00000 + 0.5), height: fastFloor(sixteenthFrame.height * 1.00000 + 0.5) - fastFloor(sixteenthFrame.height * 0.00000 + 0.5)), cornerRadius: 6)
            UIGroover.lightBlue.setStroke()
            buttonOutline4Path.lineWidth = 2
            buttonOutline4Path.stroke()
        }


        if (sixteenthDeselected) {
            //// buttonBlack 4 Drawing
            let buttonBlack4Path = UIBezierPath(roundedRect: CGRect(x: sixteenthFrame.minX + fastFloor(sixteenthFrame.width * 0.09259 + 0.5), y: sixteenthFrame.minY + fastFloor(sixteenthFrame.height * 0.09259 + 0.5), width: fastFloor(sixteenthFrame.width * 0.90741 + 0.5) - fastFloor(sixteenthFrame.width * 0.09259 + 0.5), height: fastFloor(sixteenthFrame.height * 0.90741 + 0.5) - fastFloor(sixteenthFrame.height * 0.09259 + 0.5)), cornerRadius: 6)
            UIGroover.black.setFill()
            buttonBlack4Path.fill()
        }


        if (sixteenthActive) {
            //// buttonBlue 4 Drawing
            let buttonBlue4Path = UIBezierPath(roundedRect: CGRect(x: sixteenthFrame.minX + fastFloor(sixteenthFrame.width * 0.00000 + 0.5), y: sixteenthFrame.minY + fastFloor(sixteenthFrame.height * 0.00000 + 0.5), width: fastFloor(sixteenthFrame.width * 1.00000 + 0.5) - fastFloor(sixteenthFrame.width * 0.00000 + 0.5), height: fastFloor(sixteenthFrame.height * 1.00000 + 0.5) - fastFloor(sixteenthFrame.height * 0.00000 + 0.5)), cornerRadius: 6)
            UIGroover.lightBlue.setFill()
            buttonBlue4Path.fill()
        }


        if (sixteenthDeselected) {
            //// sixteenthLight Drawing
            let sixteenthLightPath = UIBezierPath()
            sixteenthLightPath.move(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63668 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63668 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80000 * sixteenthIconFrame.height))
            sixteenthLightPath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.36366 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.95455 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + 0.63125 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.85074 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.51850 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.91616 * sixteenthIconFrame.height))
            sixteenthLightPath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.00327 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.93814 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + 0.18959 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.99771 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.02824 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.99036 * sixteenthIconFrame.height))
            sixteenthLightPath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.27322 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.76545 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + -0.02171 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.88592 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.09916 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80860 * sixteenthIconFrame.height))
            sixteenthLightPath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.52677 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.73901 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + 0.36823 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.74189 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.45945 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.73339 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.52677 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.58927 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.58927 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.16000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.16000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.28000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.28000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthLightPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthLightPath.close()
            sixteenthLightPath.usesEvenOddFillRule = true
            UIGroover.noteGray.setFill()
            sixteenthLightPath.fill()
        }


        if (sixteenthActive) {
            //// sixteenthDark Drawing
            let sixteenthDarkPath = UIBezierPath()
            sixteenthDarkPath.move(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63668 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63668 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.36366 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.95455 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + 0.63125 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.85074 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.51850 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.91616 * sixteenthIconFrame.height))
            sixteenthDarkPath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.00327 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.93814 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + 0.18959 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.99771 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.02824 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.99036 * sixteenthIconFrame.height))
            sixteenthDarkPath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.27322 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.76545 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + -0.02171 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.88592 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.09916 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80860 * sixteenthIconFrame.height))
            sixteenthDarkPath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.52677 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.73901 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + 0.36823 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.74189 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.45945 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.73339 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.52677 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.58927 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.58927 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.16000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.16000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.28000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.28000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthDarkPath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthDarkPath.close()
            sixteenthDarkPath.usesEvenOddFillRule = true
            UIGroover.noteDark.setFill()
            sixteenthDarkPath.fill()
        }


        if (sixteenthSelected) {
            //// sixteenthBlue Drawing
            let sixteenthBluePath = UIBezierPath()
            sixteenthBluePath.move(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63668 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63668 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80000 * sixteenthIconFrame.height))
            sixteenthBluePath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.36366 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.95455 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + 0.63125 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.85074 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.51850 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.91616 * sixteenthIconFrame.height))
            sixteenthBluePath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.00327 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.93814 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + 0.18959 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.99771 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.02824 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.99036 * sixteenthIconFrame.height))
            sixteenthBluePath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.27322 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.76545 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + -0.02171 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.88592 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.09916 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.80860 * sixteenthIconFrame.height))
            sixteenthBluePath.addCurve(to: CGPoint(x: sixteenthIconFrame.minX + 0.52677 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.73901 * sixteenthIconFrame.height), controlPoint1: CGPoint(x: sixteenthIconFrame.minX + 0.36823 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.74189 * sixteenthIconFrame.height), controlPoint2: CGPoint(x: sixteenthIconFrame.minX + 0.45945 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.73339 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.52677 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.58927 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.58927 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.00000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.16000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.16000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.28000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.28000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.98511 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthBluePath.addLine(to: CGPoint(x: sixteenthIconFrame.minX + 0.63789 * sixteenthIconFrame.width, y: sixteenthIconFrame.minY + 0.44000 * sixteenthIconFrame.height))
            sixteenthBluePath.close()
            sixteenthBluePath.usesEvenOddFillRule = true
            UIGroover.lightBlue.setFill()
            sixteenthBluePath.fill()
        }
    }

    public dynamic class func drawThirtysecondCanvas(thirtySecondFrame: CGRect = CGRect(x: 0, y: 0, width: 54, height: 54), thirtysecondSelected: Bool = false, thirtysecondActive: Bool = false) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Variable Declarations
        let thirtysecondDeselected = !thirtysecondSelected


        //// Subframes
        let frame = CGRect(x: thirtySecondFrame.minX + fastFloor(thirtySecondFrame.width * 0.37037 + 0.5), y: thirtySecondFrame.minY + fastFloor(thirtySecondFrame.height * 0.25926 + 0.5), width: fastFloor(thirtySecondFrame.width * 0.70370 + 0.5) - fastFloor(thirtySecondFrame.width * 0.37037 + 0.5), height: fastFloor(thirtySecondFrame.height * 0.72222 + 0.5) - fastFloor(thirtySecondFrame.height * 0.25926 + 0.5))


        if (thirtysecondSelected) {
            //// buttonOutline 5 Drawing
            let buttonOutline5Path = UIBezierPath(roundedRect: CGRect(x: thirtySecondFrame.minX + fastFloor(thirtySecondFrame.width * 0.00000 + 0.5), y: thirtySecondFrame.minY + fastFloor(thirtySecondFrame.height * 0.00000 + 0.5), width: fastFloor(thirtySecondFrame.width * 1.00000 + 0.5) - fastFloor(thirtySecondFrame.width * 0.00000 + 0.5), height: fastFloor(thirtySecondFrame.height * 1.00000 + 0.5) - fastFloor(thirtySecondFrame.height * 0.00000 + 0.5)), cornerRadius: 6)
            UIGroover.lightBlue.setStroke()
            buttonOutline5Path.lineWidth = 2
            buttonOutline5Path.stroke()
        }


        if (thirtysecondDeselected) {
            //// buttonBlack 5 Drawing
            let buttonBlack5Path = UIBezierPath(roundedRect: CGRect(x: thirtySecondFrame.minX + fastFloor(thirtySecondFrame.width * 0.09259 + 0.5), y: thirtySecondFrame.minY + fastFloor(thirtySecondFrame.height * 0.09259 + 0.5), width: fastFloor(thirtySecondFrame.width * 0.90741 + 0.5) - fastFloor(thirtySecondFrame.width * 0.09259 + 0.5), height: fastFloor(thirtySecondFrame.height * 0.90741 + 0.5) - fastFloor(thirtySecondFrame.height * 0.09259 + 0.5)), cornerRadius: 6)
            UIGroover.black.setFill()
            buttonBlack5Path.fill()
        }


        if (thirtysecondActive) {
            //// buttonBlue 5 Drawing
            let buttonBlue5Path = UIBezierPath(roundedRect: CGRect(x: thirtySecondFrame.minX + fastFloor(thirtySecondFrame.width * 0.00000 + 0.5), y: thirtySecondFrame.minY + fastFloor(thirtySecondFrame.height * 0.00000 + 0.5), width: fastFloor(thirtySecondFrame.width * 1.00000 + 0.5) - fastFloor(thirtySecondFrame.width * 0.00000 + 0.5), height: fastFloor(thirtySecondFrame.height * 1.00000 + 0.5) - fastFloor(thirtySecondFrame.height * 0.00000 + 0.5)), cornerRadius: 6)
            UIGroover.lightBlue.setFill()
            buttonBlue5Path.fill()
        }


        if (thirtysecondDeselected) {
            //// thirtysecondLight Drawing
            let thirtysecondLightPath = UIBezierPath()
            thirtysecondLightPath.move(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.32000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.32000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.20000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.20000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.16000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.16000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.12000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.12000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.61408 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.58927 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.58927 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.52677 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.52677 * frame.width, y: frame.minY + 0.73901 * frame.height))
            thirtysecondLightPath.addCurve(to: CGPoint(x: frame.minX + 0.27322 * frame.width, y: frame.minY + 0.76545 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.45945 * frame.width, y: frame.minY + 0.73339 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.36823 * frame.width, y: frame.minY + 0.74189 * frame.height))
            thirtysecondLightPath.addCurve(to: CGPoint(x: frame.minX + 0.00327 * frame.width, y: frame.minY + 0.93814 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.09916 * frame.width, y: frame.minY + 0.80860 * frame.height), controlPoint2: CGPoint(x: frame.minX + -0.02171 * frame.width, y: frame.minY + 0.88592 * frame.height))
            thirtysecondLightPath.addCurve(to: CGPoint(x: frame.minX + 0.36366 * frame.width, y: frame.minY + 0.95455 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.02824 * frame.width, y: frame.minY + 0.99036 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.18959 * frame.width, y: frame.minY + 0.99771 * frame.height))
            thirtysecondLightPath.addCurve(to: CGPoint(x: frame.minX + 0.63668 * frame.width, y: frame.minY + 0.80000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.51850 * frame.width, y: frame.minY + 0.91616 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.63125 * frame.width, y: frame.minY + 0.85074 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.63668 * frame.width, y: frame.minY + 0.80000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.80000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.52000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.52000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondLightPath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondLightPath.close()
            thirtysecondLightPath.usesEvenOddFillRule = true
            UIGroover.noteGray.setFill()
            thirtysecondLightPath.fill()
        }


        if (thirtysecondActive) {
            //// thirtysecondDark Drawing
            let thirtysecondDarkPath = UIBezierPath()
            thirtysecondDarkPath.move(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.32000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.32000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.20000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.20000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.16000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.16000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.12000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.12000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.61408 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.58927 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.58927 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.52677 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.52677 * frame.width, y: frame.minY + 0.73901 * frame.height))
            thirtysecondDarkPath.addCurve(to: CGPoint(x: frame.minX + 0.27322 * frame.width, y: frame.minY + 0.76545 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.45945 * frame.width, y: frame.minY + 0.73339 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.36823 * frame.width, y: frame.minY + 0.74189 * frame.height))
            thirtysecondDarkPath.addCurve(to: CGPoint(x: frame.minX + 0.00327 * frame.width, y: frame.minY + 0.93814 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.09916 * frame.width, y: frame.minY + 0.80860 * frame.height), controlPoint2: CGPoint(x: frame.minX + -0.02171 * frame.width, y: frame.minY + 0.88592 * frame.height))
            thirtysecondDarkPath.addCurve(to: CGPoint(x: frame.minX + 0.36366 * frame.width, y: frame.minY + 0.95455 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.02824 * frame.width, y: frame.minY + 0.99036 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.18959 * frame.width, y: frame.minY + 0.99771 * frame.height))
            thirtysecondDarkPath.addCurve(to: CGPoint(x: frame.minX + 0.63668 * frame.width, y: frame.minY + 0.80000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.51850 * frame.width, y: frame.minY + 0.91616 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.63125 * frame.width, y: frame.minY + 0.85074 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.63668 * frame.width, y: frame.minY + 0.80000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.80000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.52000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.52000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondDarkPath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondDarkPath.close()
            thirtysecondDarkPath.usesEvenOddFillRule = true
            UIGroover.noteDark.setFill()
            thirtysecondDarkPath.fill()
        }


        if (thirtysecondSelected) {
            //// thirtysecondBlue Drawing
            let thirtysecondBluePath = UIBezierPath()
            thirtysecondBluePath.move(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.32000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.32000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.20000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.20000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.16000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.16000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.12000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.12000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.61408 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.58927 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.58927 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.52677 * frame.width, y: frame.minY + -0.00000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.52677 * frame.width, y: frame.minY + 0.73901 * frame.height))
            thirtysecondBluePath.addCurve(to: CGPoint(x: frame.minX + 0.27322 * frame.width, y: frame.minY + 0.76545 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.45945 * frame.width, y: frame.minY + 0.73339 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.36823 * frame.width, y: frame.minY + 0.74189 * frame.height))
            thirtysecondBluePath.addCurve(to: CGPoint(x: frame.minX + 0.00327 * frame.width, y: frame.minY + 0.93814 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.09916 * frame.width, y: frame.minY + 0.80860 * frame.height), controlPoint2: CGPoint(x: frame.minX + -0.02171 * frame.width, y: frame.minY + 0.88592 * frame.height))
            thirtysecondBluePath.addCurve(to: CGPoint(x: frame.minX + 0.36366 * frame.width, y: frame.minY + 0.95455 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.02824 * frame.width, y: frame.minY + 0.99036 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.18959 * frame.width, y: frame.minY + 0.99771 * frame.height))
            thirtysecondBluePath.addCurve(to: CGPoint(x: frame.minX + 0.63668 * frame.width, y: frame.minY + 0.80000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.51850 * frame.width, y: frame.minY + 0.91616 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.63125 * frame.width, y: frame.minY + 0.85074 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.63668 * frame.width, y: frame.minY + 0.80000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.80000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.63789 * frame.width, y: frame.minY + 0.52000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.52000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.97222 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondBluePath.addLine(to: CGPoint(x: frame.minX + 0.63889 * frame.width, y: frame.minY + 0.40000 * frame.height))
            thirtysecondBluePath.close()
            thirtysecondBluePath.usesEvenOddFillRule = true
            UIGroover.lightBlue.setFill()
            thirtysecondBluePath.fill()
        }
    }

    public dynamic class func drawTripletCanvas(tripletFrame: CGRect = CGRect(x: 0, y: 0, width: 54, height: 54), tripletSelected: Bool = false, tripletActive: Bool = false) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Variable Declarations
        let tripletDeselected = !tripletSelected


        //// Subframes
        let tripletIconFrame = CGRect(x: tripletFrame.minX + fastFloor(tripletFrame.width * 0.38889 + 0.5), y: tripletFrame.minY + fastFloor(tripletFrame.height * 0.35185 + 0.5), width: fastFloor(tripletFrame.width * 0.62963 + 0.5) - fastFloor(tripletFrame.width * 0.38889 + 0.5), height: fastFloor(tripletFrame.height * 0.64815 + 0.5) - fastFloor(tripletFrame.height * 0.35185 + 0.5))


        if (tripletSelected) {
            //// buttonOutline 2 Drawing
            let buttonOutline2Path = UIBezierPath(roundedRect: CGRect(x: tripletFrame.minX + fastFloor(tripletFrame.width * 0.00000 + 0.5), y: tripletFrame.minY + fastFloor(tripletFrame.height * 0.00000 + 0.5), width: fastFloor(tripletFrame.width * 1.00000 + 0.5) - fastFloor(tripletFrame.width * 0.00000 + 0.5), height: fastFloor(tripletFrame.height * 1.00000 + 0.5) - fastFloor(tripletFrame.height * 0.00000 + 0.5)), cornerRadius: 6)
            UIGroover.lightBlue.setStroke()
            buttonOutline2Path.lineWidth = 2
            buttonOutline2Path.stroke()
        }


        if (tripletDeselected) {
            //// buttonBlack 2 Drawing
            let buttonBlack2Path = UIBezierPath(roundedRect: CGRect(x: tripletFrame.minX + fastFloor(tripletFrame.width * 0.09259 + 0.5), y: tripletFrame.minY + fastFloor(tripletFrame.height * 0.09259 + 0.5), width: fastFloor(tripletFrame.width * 0.90741 + 0.5) - fastFloor(tripletFrame.width * 0.09259 + 0.5), height: fastFloor(tripletFrame.height * 0.90741 + 0.5) - fastFloor(tripletFrame.height * 0.09259 + 0.5)), cornerRadius: 6)
            UIGroover.black.setFill()
            buttonBlack2Path.fill()
        }


        if (tripletActive) {
            //// buttonBlue 2 Drawing
            let buttonBlue2Path = UIBezierPath(roundedRect: CGRect(x: tripletFrame.minX + fastFloor(tripletFrame.width * 0.00000 + 0.5), y: tripletFrame.minY + fastFloor(tripletFrame.height * 0.00000 + 0.5), width: fastFloor(tripletFrame.width * 1.00000 + 0.5) - fastFloor(tripletFrame.width * 0.00000 + 0.5), height: fastFloor(tripletFrame.height * 1.00000 + 0.5) - fastFloor(tripletFrame.height * 0.00000 + 0.5)), cornerRadius: 6)
            UIGroover.lightBlue.setFill()
            buttonBlue2Path.fill()
        }


        if (tripletDeselected) {
            //// tripletLight Drawing
            let tripletLightPath = UIBezierPath()
            tripletLightPath.move(to: CGPoint(x: tripletIconFrame.minX + 0.34871 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.96881 * tripletIconFrame.height))
            tripletLightPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.34871 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletLightPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.00000 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletLightPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.00000 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.00000 * tripletIconFrame.height))
            tripletLightPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.94779 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.00000 * tripletIconFrame.height))
            tripletLightPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.94779 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletLightPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.59826 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletLightPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.59826 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.96881 * tripletIconFrame.height))
            tripletLightPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.34871 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.96881 * tripletIconFrame.height))
            tripletLightPath.close()
            tripletLightPath.usesEvenOddFillRule = true
            UIGroover.noteGray.setFill()
            tripletLightPath.fill()
        }


        if (tripletActive) {
            //// tripletDark Drawing
            let tripletDarkPath = UIBezierPath()
            tripletDarkPath.move(to: CGPoint(x: tripletIconFrame.minX + 0.34871 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.96881 * tripletIconFrame.height))
            tripletDarkPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.34871 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletDarkPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.00000 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletDarkPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.00000 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.00000 * tripletIconFrame.height))
            tripletDarkPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.94779 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.00000 * tripletIconFrame.height))
            tripletDarkPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.94779 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletDarkPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.59826 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletDarkPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.59826 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.96881 * tripletIconFrame.height))
            tripletDarkPath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.34871 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.96881 * tripletIconFrame.height))
            tripletDarkPath.close()
            tripletDarkPath.usesEvenOddFillRule = true
            UIGroover.noteDark.setFill()
            tripletDarkPath.fill()
        }


        if (tripletSelected) {
            //// tripletBlue Drawing
            let tripletBluePath = UIBezierPath()
            tripletBluePath.move(to: CGPoint(x: tripletIconFrame.minX + 0.34871 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.96881 * tripletIconFrame.height))
            tripletBluePath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.34871 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletBluePath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.00000 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletBluePath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.00000 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.00000 * tripletIconFrame.height))
            tripletBluePath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.94779 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.00000 * tripletIconFrame.height))
            tripletBluePath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.94779 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletBluePath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.59826 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.16718 * tripletIconFrame.height))
            tripletBluePath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.59826 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.96881 * tripletIconFrame.height))
            tripletBluePath.addLine(to: CGPoint(x: tripletIconFrame.minX + 0.34871 * tripletIconFrame.width, y: tripletIconFrame.minY + 0.96881 * tripletIconFrame.height))
            tripletBluePath.close()
            tripletBluePath.usesEvenOddFillRule = true
            UIGroover.lightBlue.setFill()
            tripletBluePath.fill()
        }
    }

    public dynamic class func drawPlayCanvas(playFrame: CGRect = CGRect(x: 0, y: 0, width: 87, height: 56), playSelected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Variable Declarations
        let playColor = playSelected ? UIGroover.transportGreen : UIGroover.transportDark

        //// playButton Drawing
        context.saveGState()
        context.translateBy(x: playFrame.minX + 0.50575 * playFrame.width, y: playFrame.minY + 0.51786 * playFrame.height)

        let playButtonPath = UIBezierPath()
        playButtonPath.move(to: CGPoint(x: -11, y: 11))
        playButtonPath.addLine(to: CGPoint(x: -11, y: -11))
        playButtonPath.addLine(to: CGPoint(x: 11, y: 0))
        playButtonPath.addLine(to: CGPoint(x: -11, y: 11))
        playButtonPath.close()
        playButtonPath.usesEvenOddFillRule = true
        playColor.setFill()
        playButtonPath.fill()

        context.restoreGState()
    }

    public dynamic class func drawRecordCanvas(recordFrame: CGRect = CGRect(x: 0, y: 0, width: 87, height: 56), recordSelected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Variable Declarations
        let recordColor = recordSelected ? UIGroover.transportRed : UIGroover.transportDark

        //// recordButton Drawing
        context.saveGState()
        context.translateBy(x: recordFrame.minX + 0.49425 * recordFrame.width, y: recordFrame.minY + 0.50000 * recordFrame.height)

        let recordButtonPath = UIBezierPath(ovalIn: CGRect(x: -11, y: -11, width: 22, height: 22))
        recordColor.setFill()
        recordButtonPath.fill()

        context.restoreGState()
    }

    public dynamic class func drawSongDeleteCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 75, height: 75), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 75, height: 75), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 75, y: resizedFrame.height / 75)


        //// Color Declarations
        let fillColor4 = UIColor(red: 0.620, green: 0.145, blue: 0.161, alpha: 1.000)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// deleteDot Drawing
        let deleteDotPath = UIBezierPath()
        deleteDotPath.move(to: CGPoint(x: 37, y: 52))
        deleteDotPath.addCurve(to: CGPoint(x: 51, y: 38), controlPoint1: CGPoint(x: 44.73, y: 52), controlPoint2: CGPoint(x: 51, y: 45.73))
        deleteDotPath.addCurve(to: CGPoint(x: 37, y: 24), controlPoint1: CGPoint(x: 51, y: 30.27), controlPoint2: CGPoint(x: 44.73, y: 24))
        deleteDotPath.addCurve(to: CGPoint(x: 23, y: 38), controlPoint1: CGPoint(x: 29.27, y: 24), controlPoint2: CGPoint(x: 23, y: 30.27))
        deleteDotPath.addCurve(to: CGPoint(x: 37, y: 52), controlPoint1: CGPoint(x: 23, y: 45.73), controlPoint2: CGPoint(x: 29.27, y: 52))
        deleteDotPath.close()
        deleteDotPath.usesEvenOddFillRule = true
        fillColor4.setFill()
        deleteDotPath.fill()


        //// deleteLine Drawing
        let deleteLinePath = UIBezierPath(rect: CGRect(x: 31, y: 37, width: 12, height: 2))
        fillColor5.setFill()
        deleteLinePath.fill()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
