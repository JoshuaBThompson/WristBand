//
//  UIGroover.swift
//  Groover
//
//  Created by Alex on 7/6/16.
//  Copyright (c) 2016 TCM. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class UIGroover : NSObject {

    //// Cache

    private struct Cache {
        static var fullBackground: UIImage?
        static var knobBG: UIImage?
        static var knobRotation: UIImage?

    }

    //// Images

    public class var fullBackground: UIImage {
        if Cache.fullBackground == nil {
            Cache.fullBackground = UIImage(named: "fullBackground.png")!
        }
        return Cache.fullBackground!
    }

    public class var knobBG: UIImage {
        if Cache.knobBG == nil {
            Cache.knobBG = UIImage(named: "knobBG.png")!
        }
        return Cache.knobBG!
    }

    public class var knobRotation: UIImage {
        if Cache.knobRotation == nil {
            Cache.knobRotation = UIImage(named: "knobRotation.png")!
        }
        return Cache.knobRotation!
    }

    //// Drawing Methods

    public class func drawQuarterCanvas(quarterSelected quarterSelected: Bool = false, quarterActive: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let noteGray = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        let noteDark = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let quarterDeselected = !quarterSelected

        if (quarterActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (quarterSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (quarterDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRectMake(5, 5, 44, 44), cornerRadius: 6)
            black.setFill()
            buttonBlackPath.fill()


            //// quarterLight Drawing
            let quarterLightPath = UIBezierPath()
            quarterLightPath.moveToPoint(CGPointMake(31.46, 34))
            quarterLightPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            quarterLightPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            quarterLightPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            quarterLightPath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            quarterLightPath.addLineToPoint(CGPointMake(29.48, 14))
            quarterLightPath.addLineToPoint(CGPointMake(31.48, 14))
            quarterLightPath.addLineToPoint(CGPointMake(31.48, 34))
            quarterLightPath.addLineToPoint(CGPointMake(31.46, 34))
            quarterLightPath.addLineToPoint(CGPointMake(31.46, 34))
            quarterLightPath.closePath()
            quarterLightPath.miterLimit = 4;

            quarterLightPath.usesEvenOddFillRule = true;

            noteGray.setFill()
            quarterLightPath.fill()
        }


        if (quarterActive) {
            //// quarterDark Drawing
            let quarterDarkPath = UIBezierPath()
            quarterDarkPath.moveToPoint(CGPointMake(31.46, 34))
            quarterDarkPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            quarterDarkPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            quarterDarkPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            quarterDarkPath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            quarterDarkPath.addLineToPoint(CGPointMake(29.48, 14))
            quarterDarkPath.addLineToPoint(CGPointMake(31.48, 14))
            quarterDarkPath.addLineToPoint(CGPointMake(31.48, 34))
            quarterDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            quarterDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            quarterDarkPath.closePath()
            quarterDarkPath.miterLimit = 4;

            quarterDarkPath.usesEvenOddFillRule = true;

            noteDark.setFill()
            quarterDarkPath.fill()
        }


        if (quarterSelected) {
            //// quarterBlue Drawing
            let quarterBluePath = UIBezierPath()
            quarterBluePath.moveToPoint(CGPointMake(31.46, 34))
            quarterBluePath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            quarterBluePath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            quarterBluePath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            quarterBluePath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            quarterBluePath.addLineToPoint(CGPointMake(29.48, 14))
            quarterBluePath.addLineToPoint(CGPointMake(31.48, 14))
            quarterBluePath.addLineToPoint(CGPointMake(31.48, 34))
            quarterBluePath.addLineToPoint(CGPointMake(31.46, 34))
            quarterBluePath.addLineToPoint(CGPointMake(31.46, 34))
            quarterBluePath.closePath()
            quarterBluePath.miterLimit = 4;

            quarterBluePath.usesEvenOddFillRule = true;

            lightBlue.setFill()
            quarterBluePath.fill()
        }
    }

    public class func drawEighthCanvas(eighthSelected eighthSelected: Bool = false, eighthActive: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let noteGray = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        let noteDark = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let eighthDeselected = !eighthSelected

        if (eighthActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (eighthSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (eighthDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRectMake(5, 5, 44, 44), cornerRadius: 6)
            black.setFill()
            buttonBlackPath.fill()


            //// eighthLight Drawing
            let eighthLightPath = UIBezierPath()
            eighthLightPath.moveToPoint(CGPointMake(30.61, 14))
            eighthLightPath.addLineToPoint(CGPointMake(29.48, 14))
            eighthLightPath.addLineToPoint(CGPointMake(29.48, 32.48))
            eighthLightPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            eighthLightPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            eighthLightPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            eighthLightPath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            eighthLightPath.addLineToPoint(CGPointMake(31.46, 34))
            eighthLightPath.addLineToPoint(CGPointMake(31.48, 34))
            eighthLightPath.addLineToPoint(CGPointMake(31.48, 18))
            eighthLightPath.addLineToPoint(CGPointMake(37.73, 18))
            eighthLightPath.addLineToPoint(CGPointMake(37.73, 14))
            eighthLightPath.addLineToPoint(CGPointMake(30.61, 14))
            eighthLightPath.addLineToPoint(CGPointMake(30.61, 14))
            eighthLightPath.closePath()
            eighthLightPath.miterLimit = 4;

            eighthLightPath.usesEvenOddFillRule = true;

            noteGray.setFill()
            eighthLightPath.fill()
        }


        if (eighthActive) {
            //// eighthDark Drawing
            let eighthDarkPath = UIBezierPath()
            eighthDarkPath.moveToPoint(CGPointMake(30.61, 14))
            eighthDarkPath.addLineToPoint(CGPointMake(29.48, 14))
            eighthDarkPath.addLineToPoint(CGPointMake(29.48, 32.48))
            eighthDarkPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            eighthDarkPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            eighthDarkPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            eighthDarkPath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            eighthDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            eighthDarkPath.addLineToPoint(CGPointMake(31.48, 34))
            eighthDarkPath.addLineToPoint(CGPointMake(31.48, 18))
            eighthDarkPath.addLineToPoint(CGPointMake(37.73, 18))
            eighthDarkPath.addLineToPoint(CGPointMake(37.73, 14))
            eighthDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            eighthDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            eighthDarkPath.closePath()
            eighthDarkPath.miterLimit = 4;

            eighthDarkPath.usesEvenOddFillRule = true;

            noteDark.setFill()
            eighthDarkPath.fill()
        }


        if (eighthSelected) {
            //// eighthBlue Drawing
            let eighthBluePath = UIBezierPath()
            eighthBluePath.moveToPoint(CGPointMake(30.61, 14))
            eighthBluePath.addLineToPoint(CGPointMake(29.48, 14))
            eighthBluePath.addLineToPoint(CGPointMake(29.48, 32.48))
            eighthBluePath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            eighthBluePath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            eighthBluePath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            eighthBluePath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            eighthBluePath.addLineToPoint(CGPointMake(31.46, 34))
            eighthBluePath.addLineToPoint(CGPointMake(31.48, 34))
            eighthBluePath.addLineToPoint(CGPointMake(31.48, 18))
            eighthBluePath.addLineToPoint(CGPointMake(37.73, 18))
            eighthBluePath.addLineToPoint(CGPointMake(37.73, 14))
            eighthBluePath.addLineToPoint(CGPointMake(30.61, 14))
            eighthBluePath.addLineToPoint(CGPointMake(30.61, 14))
            eighthBluePath.closePath()
            eighthBluePath.miterLimit = 4;

            eighthBluePath.usesEvenOddFillRule = true;

            lightBlue.setFill()
            eighthBluePath.fill()
        }
    }

    public class func drawSixteenthCanvas(sixteenthSelected sixteenthSelected: Bool = false, sixteenthActive: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let noteGray = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        let noteDark = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let sixteenthDeselected = !sixteenthSelected

        if (sixteenthActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (sixteenthSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (sixteenthDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRectMake(5, 5, 44, 44), cornerRadius: 6)
            black.setFill()
            buttonBlackPath.fill()


            //// sixteenthLight Drawing
            let sixteenthLightPath = UIBezierPath()
            sixteenthLightPath.moveToPoint(CGPointMake(31.48, 25))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.48, 34))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthLightPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            sixteenthLightPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            sixteenthLightPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            sixteenthLightPath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            sixteenthLightPath.addLineToPoint(CGPointMake(29.48, 14))
            sixteenthLightPath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthLightPath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthLightPath.addLineToPoint(CGPointMake(37.73, 14))
            sixteenthLightPath.addLineToPoint(CGPointMake(37.73, 18))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.48, 18))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.48, 21))
            sixteenthLightPath.addLineToPoint(CGPointMake(37.73, 21))
            sixteenthLightPath.addLineToPoint(CGPointMake(37.73, 25))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthLightPath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthLightPath.closePath()
            sixteenthLightPath.miterLimit = 4;

            sixteenthLightPath.usesEvenOddFillRule = true;

            noteGray.setFill()
            sixteenthLightPath.fill()
        }


        if (sixteenthActive) {
            //// sixteenthDark Drawing
            let sixteenthDarkPath = UIBezierPath()
            sixteenthDarkPath.moveToPoint(CGPointMake(31.48, 25))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.48, 34))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthDarkPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            sixteenthDarkPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            sixteenthDarkPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            sixteenthDarkPath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            sixteenthDarkPath.addLineToPoint(CGPointMake(29.48, 14))
            sixteenthDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthDarkPath.addLineToPoint(CGPointMake(37.73, 14))
            sixteenthDarkPath.addLineToPoint(CGPointMake(37.73, 18))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.48, 18))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.48, 21))
            sixteenthDarkPath.addLineToPoint(CGPointMake(37.73, 21))
            sixteenthDarkPath.addLineToPoint(CGPointMake(37.73, 25))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthDarkPath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthDarkPath.closePath()
            sixteenthDarkPath.miterLimit = 4;

            sixteenthDarkPath.usesEvenOddFillRule = true;

            noteDark.setFill()
            sixteenthDarkPath.fill()
        }


        if (sixteenthSelected) {
            //// sixteenthBlue Drawing
            let sixteenthBluePath = UIBezierPath()
            sixteenthBluePath.moveToPoint(CGPointMake(31.48, 25))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.48, 34))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.46, 34))
            sixteenthBluePath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(31.36, 35.27), controlPoint2: CGPointMake(29.33, 36.9))
            sixteenthBluePath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(23.41, 38.94), controlPoint2: CGPointMake(20.51, 38.76))
            sixteenthBluePath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(19.61, 36.15), controlPoint2: CGPointMake(21.78, 34.22))
            sixteenthBluePath.addCurveToPoint(CGPointMake(29.48, 32.48), controlPoint1: CGPointMake(26.63, 32.55), controlPoint2: CGPointMake(28.27, 32.33))
            sixteenthBluePath.addLineToPoint(CGPointMake(29.48, 14))
            sixteenthBluePath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthBluePath.addLineToPoint(CGPointMake(30.61, 14))
            sixteenthBluePath.addLineToPoint(CGPointMake(37.73, 14))
            sixteenthBluePath.addLineToPoint(CGPointMake(37.73, 18))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.48, 18))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.48, 21))
            sixteenthBluePath.addLineToPoint(CGPointMake(37.73, 21))
            sixteenthBluePath.addLineToPoint(CGPointMake(37.73, 25))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthBluePath.addLineToPoint(CGPointMake(31.48, 25))
            sixteenthBluePath.closePath()
            sixteenthBluePath.miterLimit = 4;

            sixteenthBluePath.usesEvenOddFillRule = true;

            lightBlue.setFill()
            sixteenthBluePath.fill()
        }
    }

    public class func drawThirtysecondCanvas(thirtysecondSelected thirtysecondSelected: Bool = false, thirtysecondActive: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let noteGray = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        let noteDark = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let thirtysecondDeselected = !thirtysecondSelected

        if (thirtysecondActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (thirtysecondSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (thirtysecondDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRectMake(5, 5, 44, 44), cornerRadius: 6)
            black.setFill()
            buttonBlackPath.fill()


            //// thirtysecondLight Drawing
            let thirtysecondLightPath = UIBezierPath()
            thirtysecondLightPath.moveToPoint(CGPointMake(31.5, 24))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.5, 22))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 22))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 19))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.48, 19))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.48, 18))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.5, 18))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.5, 17))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 17))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 14))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.05, 14))
            thirtysecondLightPath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondLightPath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondLightPath.addLineToPoint(CGPointMake(29.48, 14))
            thirtysecondLightPath.addLineToPoint(CGPointMake(29.48, 32.48))
            thirtysecondLightPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            thirtysecondLightPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            thirtysecondLightPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            thirtysecondLightPath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.46, 34))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.48, 34))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.48, 27))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 27))
            thirtysecondLightPath.addLineToPoint(CGPointMake(37.5, 24))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondLightPath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondLightPath.closePath()
            thirtysecondLightPath.miterLimit = 4;

            thirtysecondLightPath.usesEvenOddFillRule = true;

            noteGray.setFill()
            thirtysecondLightPath.fill()
        }


        if (thirtysecondActive) {
            //// thirtysecondDark Drawing
            let thirtysecondDarkPath = UIBezierPath()
            thirtysecondDarkPath.moveToPoint(CGPointMake(31.5, 24))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.5, 22))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 22))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 19))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.48, 19))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.48, 18))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.5, 18))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.5, 17))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 17))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 14))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.05, 14))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(29.48, 14))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(29.48, 32.48))
            thirtysecondDarkPath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            thirtysecondDarkPath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            thirtysecondDarkPath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            thirtysecondDarkPath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.46, 34))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.48, 34))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.48, 27))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 27))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(37.5, 24))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondDarkPath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondDarkPath.closePath()
            thirtysecondDarkPath.miterLimit = 4;

            thirtysecondDarkPath.usesEvenOddFillRule = true;

            noteDark.setFill()
            thirtysecondDarkPath.fill()
        }


        if (thirtysecondSelected) {
            //// thirtysecondBlue Drawing
            let thirtysecondBluePath = UIBezierPath()
            thirtysecondBluePath.moveToPoint(CGPointMake(31.5, 24))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.5, 22))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 22))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 19))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.48, 19))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.48, 18))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.5, 18))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.5, 17))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 17))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 14))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.05, 14))
            thirtysecondBluePath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondBluePath.addLineToPoint(CGPointMake(30.61, 14))
            thirtysecondBluePath.addLineToPoint(CGPointMake(29.48, 14))
            thirtysecondBluePath.addLineToPoint(CGPointMake(29.48, 32.48))
            thirtysecondBluePath.addCurveToPoint(CGPointMake(24.92, 33.14), controlPoint1: CGPointMake(28.27, 32.33), controlPoint2: CGPointMake(26.63, 32.55))
            thirtysecondBluePath.addCurveToPoint(CGPointMake(20.06, 37.45), controlPoint1: CGPointMake(21.78, 34.22), controlPoint2: CGPointMake(19.61, 36.15))
            thirtysecondBluePath.addCurveToPoint(CGPointMake(26.55, 37.86), controlPoint1: CGPointMake(20.51, 38.76), controlPoint2: CGPointMake(23.41, 38.94))
            thirtysecondBluePath.addCurveToPoint(CGPointMake(31.46, 34), controlPoint1: CGPointMake(29.33, 36.9), controlPoint2: CGPointMake(31.36, 35.27))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.46, 34))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.48, 34))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.48, 27))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 27))
            thirtysecondBluePath.addLineToPoint(CGPointMake(37.5, 24))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondBluePath.addLineToPoint(CGPointMake(31.5, 24))
            thirtysecondBluePath.closePath()
            thirtysecondBluePath.miterLimit = 4;

            thirtysecondBluePath.usesEvenOddFillRule = true;

            lightBlue.setFill()
            thirtysecondBluePath.fill()
        }
    }

    public class func drawTripletCanvas(tripletSelected tripletSelected: Bool = false, tripletActive: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let noteGray = UIColor(red: 0.345, green: 0.392, blue: 0.439, alpha: 1.000)
        let noteDark = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let tripletDeselected = !tripletSelected

        if (tripletActive) {
            //// buttonBlue Drawing
            let buttonBluePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setFill()
            buttonBluePath.fill()
        }


        if (tripletSelected) {
            //// buttonOutline Drawing
            let buttonOutlinePath = UIBezierPath(roundedRect: CGRectMake(0, 0, 54, 54), cornerRadius: 6)
            lightBlue.setStroke()
            buttonOutlinePath.lineWidth = 2
            buttonOutlinePath.stroke()
        }


        if (tripletDeselected) {
            //// buttonBlack Drawing
            let buttonBlackPath = UIBezierPath(roundedRect: CGRectMake(5, 5, 44, 44), cornerRadius: 6)
            black.setFill()
            buttonBlackPath.fill()


            //// tripletLight Drawing
            let tripletLightPath = UIBezierPath()
            tripletLightPath.moveToPoint(CGPointMake(25.53, 34.5))
            tripletLightPath.addLineToPoint(CGPointMake(25.53, 21.67))
            tripletLightPath.addLineToPoint(CGPointMake(21, 21.67))
            tripletLightPath.addLineToPoint(CGPointMake(21, 19))
            tripletLightPath.addLineToPoint(CGPointMake(33.32, 19))
            tripletLightPath.addLineToPoint(CGPointMake(33.32, 21.67))
            tripletLightPath.addLineToPoint(CGPointMake(28.78, 21.67))
            tripletLightPath.addLineToPoint(CGPointMake(28.78, 34.5))
            tripletLightPath.addLineToPoint(CGPointMake(25.53, 34.5))
            tripletLightPath.closePath()
            tripletLightPath.miterLimit = 4;

            tripletLightPath.usesEvenOddFillRule = true;

            noteGray.setFill()
            tripletLightPath.fill()
        }


        if (tripletActive) {
            //// tripletDark Drawing
            let tripletDarkPath = UIBezierPath()
            tripletDarkPath.moveToPoint(CGPointMake(25.53, 34.5))
            tripletDarkPath.addLineToPoint(CGPointMake(25.53, 21.67))
            tripletDarkPath.addLineToPoint(CGPointMake(21, 21.67))
            tripletDarkPath.addLineToPoint(CGPointMake(21, 19))
            tripletDarkPath.addLineToPoint(CGPointMake(33.32, 19))
            tripletDarkPath.addLineToPoint(CGPointMake(33.32, 21.67))
            tripletDarkPath.addLineToPoint(CGPointMake(28.78, 21.67))
            tripletDarkPath.addLineToPoint(CGPointMake(28.78, 34.5))
            tripletDarkPath.addLineToPoint(CGPointMake(25.53, 34.5))
            tripletDarkPath.closePath()
            tripletDarkPath.miterLimit = 4;

            tripletDarkPath.usesEvenOddFillRule = true;

            noteDark.setFill()
            tripletDarkPath.fill()
        }


        if (tripletSelected) {
            //// tripletBlue Drawing
            let tripletBluePath = UIBezierPath()
            tripletBluePath.moveToPoint(CGPointMake(25.53, 34.5))
            tripletBluePath.addLineToPoint(CGPointMake(25.53, 21.67))
            tripletBluePath.addLineToPoint(CGPointMake(21, 21.67))
            tripletBluePath.addLineToPoint(CGPointMake(21, 19))
            tripletBluePath.addLineToPoint(CGPointMake(33.32, 19))
            tripletBluePath.addLineToPoint(CGPointMake(33.32, 21.67))
            tripletBluePath.addLineToPoint(CGPointMake(28.78, 21.67))
            tripletBluePath.addLineToPoint(CGPointMake(28.78, 34.5))
            tripletBluePath.addLineToPoint(CGPointMake(25.53, 34.5))
            tripletBluePath.closePath()
            tripletBluePath.miterLimit = 4;

            tripletBluePath.usesEvenOddFillRule = true;

            lightBlue.setFill()
            tripletBluePath.fill()
        }
    }

    public class func drawSoundParametersCanvas(soundParametersSelected soundParametersSelected: Bool = false) {
        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let soundParamtersBG = UIColor(red: 0.094, green: 0.114, blue: 0.133, alpha: 1.000)
        let buttonsBGLight = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// soundParametersBase Drawing
        let soundParametersBasePath = UIBezierPath(ovalInRect: CGRectMake(1, 1, 40, 40))
        soundParamtersBG.setFill()
        soundParametersBasePath.fill()


        //// soundParametersOutline Drawing
        let soundParametersOutlinePath = UIBezierPath(ovalInRect: CGRectMake(3, 3, 36, 36))
        black.setStroke()
        soundParametersOutlinePath.lineWidth = 5
        soundParametersOutlinePath.stroke()


        //// soundParametersLight Drawing
        let soundParametersLightPath = UIBezierPath(ovalInRect: CGRectMake(11, 11, 20, 20))
        buttonsBGLight.setFill()
        soundParametersLightPath.fill()


        //// soundParametersBlue Drawing
        let soundParametersBluePath = UIBezierPath(roundedRect: CGRectMake(17, 17, 8, 8), cornerRadius: 2)
        lightBlue.setFill()
        soundParametersBluePath.fill()


        if (soundParametersSelected) {
            //// soundParametersBlueOutline Drawing
            let soundParametersBlueOutlinePath = UIBezierPath(ovalInRect: CGRectMake(11, 11, 20, 20))
            lightBlue.setStroke()
            soundParametersBlueOutlinePath.lineWidth = 2
            soundParametersBlueOutlinePath.stroke()
        }
    }

    public class func drawPositionsCanvas(position1Selected position1Selected: Bool = false, position2Selected: Bool = false, position3Selected: Bool = false, position4Selected: Bool = false, position5Selected: Bool = false, position6Selected: Bool = false, position7Selected: Bool = false, position8Selected: Bool = false, position9Selected: Bool = false, position10Selected: Bool = false, position11Selected: Bool = false, position12Selected: Bool = false, position13Selected: Bool = false, position14Selected: Bool = false, position15Selected: Bool = false, position16Selected: Bool = false, position17Selected: Bool = false, position18Selected: Bool = false) {
        //// Color Declarations
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let buttonsBGLight = UIColor(red: 0.173, green: 0.220, blue: 0.263, alpha: 1.000)

        //// Variable Declarations
        let position1Color = position1Selected ? lightBlue : buttonsBGLight
        let position2Color = position2Selected ? lightBlue : buttonsBGLight
        let position3Color = position3Selected ? lightBlue : buttonsBGLight
        let position4Color = position4Selected ? lightBlue : buttonsBGLight
        let position5Color = position5Selected ? lightBlue : buttonsBGLight
        let position6Color = position6Selected ? lightBlue : buttonsBGLight
        let position7Color = position7Selected ? lightBlue : buttonsBGLight
        let position8Color = position8Selected ? lightBlue : buttonsBGLight
        let position9Color = position9Selected ? lightBlue : buttonsBGLight
        let position10Color = position10Selected ? lightBlue : buttonsBGLight
        let position11Color = position11Selected ? lightBlue : buttonsBGLight
        let position12Color = position12Selected ? lightBlue : buttonsBGLight
        let position13Color = position13Selected ? lightBlue : buttonsBGLight
        let position14Color = position14Selected ? lightBlue : buttonsBGLight
        let position15Color = position15Selected ? lightBlue : buttonsBGLight
        let position16Color = position16Selected ? lightBlue : buttonsBGLight
        let position17Color = position17Selected ? lightBlue : buttonsBGLight
        let position18Color = position18Selected ? lightBlue : buttonsBGLight

        //// position1 Drawing
        let position1Path = UIBezierPath(roundedRect: CGRectMake(26, 0, 13, 13), cornerRadius: 2)
        position1Color.setFill()
        position1Path.fill()


        //// position2 Drawing
        let position2Path = UIBezierPath(roundedRect: CGRectMake(41, 0, 13, 13), cornerRadius: 2)
        position2Color.setFill()
        position2Path.fill()


        //// position3 Drawing
        let position3Path = UIBezierPath(roundedRect: CGRectMake(56, 0, 13, 13), cornerRadius: 2)
        position3Color.setFill()
        position3Path.fill()


        //// position4 Drawing
        let position4Path = UIBezierPath(roundedRect: CGRectMake(71, 0, 13, 13), cornerRadius: 2)
        position4Color.setFill()
        position4Path.fill()


        //// position5 Drawing
        let position5Path = UIBezierPath(roundedRect: CGRectMake(86, 0, 13, 13), cornerRadius: 2)
        position5Color.setFill()
        position5Path.fill()


        //// position6 Drawing
        let position6Path = UIBezierPath(roundedRect: CGRectMake(101, 0, 13, 13), cornerRadius: 2)
        position6Color.setFill()
        position6Path.fill()


        //// position7 Drawing
        let position7Path = UIBezierPath(roundedRect: CGRectMake(116, 0, 13, 13), cornerRadius: 2)
        position7Color.setFill()
        position7Path.fill()


        //// position8 Drawing
        let position8Path = UIBezierPath(roundedRect: CGRectMake(131, 0, 13, 13), cornerRadius: 2)
        position8Color.setFill()
        position8Path.fill()


        //// position9 Drawing
        let position9Path = UIBezierPath(roundedRect: CGRectMake(146, 0, 13, 13), cornerRadius: 2)
        position9Color.setFill()
        position9Path.fill()


        //// position10 Drawing
        let position10Path = UIBezierPath(roundedRect: CGRectMake(161, 0, 13, 13), cornerRadius: 2)
        position10Color.setFill()
        position10Path.fill()


        //// position11 Drawing
        let position11Path = UIBezierPath(roundedRect: CGRectMake(176, 0, 13, 13), cornerRadius: 2)
        position11Color.setFill()
        position11Path.fill()


        //// position12 Drawing
        let position12Path = UIBezierPath(roundedRect: CGRectMake(191, 0, 13, 13), cornerRadius: 2)
        position12Color.setFill()
        position12Path.fill()


        //// position13 Drawing
        let position13Path = UIBezierPath(roundedRect: CGRectMake(206, 0, 13, 13), cornerRadius: 2)
        position13Color.setFill()
        position13Path.fill()


        //// position14 Drawing
        let position14Path = UIBezierPath(roundedRect: CGRectMake(221, 0, 13, 13), cornerRadius: 2)
        position14Color.setFill()
        position14Path.fill()


        //// position15 Drawing
        let position15Path = UIBezierPath(roundedRect: CGRectMake(236, 0, 13, 13), cornerRadius: 2)
        position15Color.setFill()
        position15Path.fill()


        //// position16 Drawing
        let position16Path = UIBezierPath(roundedRect: CGRectMake(251, 0, 13, 13), cornerRadius: 2)
        position16Color.setFill()
        position16Path.fill()


        //// position17 Drawing
        let position17Path = UIBezierPath(roundedRect: CGRectMake(266, 0, 13, 13), cornerRadius: 2)
        position17Color.setFill()
        position17Path.fill()


        //// position18 Drawing
        let position18Path = UIBezierPath(roundedRect: CGRectMake(281, 0, 13, 13), cornerRadius: 2)
        position18Color.setFill()
        position18Path.fill()
    }

    public class func drawPlayCanvas(playSelected playSelected: Bool = false) {
        //// Color Declarations
        let transportDark = UIColor(red: 0.043, green: 0.082, blue: 0.157, alpha: 1.000)
        let transportGreen = UIColor(red: 0.078, green: 0.576, blue: 0.059, alpha: 1.000)

        //// Variable Declarations
        let playColor = playSelected ? transportGreen : transportDark

        //// playButton Drawing
        let playButtonPath = UIBezierPath()
        playButtonPath.moveToPoint(CGPointMake(0, 22))
        playButtonPath.addLineToPoint(CGPointMake(0, 0))
        playButtonPath.addLineToPoint(CGPointMake(22, 11))
        playButtonPath.addLineToPoint(CGPointMake(0, 22))
        playButtonPath.closePath()
        playButtonPath.miterLimit = 4;

        playButtonPath.usesEvenOddFillRule = true;

        playColor.setFill()
        playButtonPath.fill()
    }

    public class func drawRecordCanvas(recordSelected recordSelected: Bool = false) {
        //// Color Declarations
        let transportDark = UIColor(red: 0.043, green: 0.082, blue: 0.157, alpha: 1.000)
        let transportRed = UIColor(red: 0.616, green: 0.141, blue: 0.157, alpha: 1.000)

        //// Variable Declarations
        let recordColor = recordSelected ? transportRed : transportDark

        //// recordButton Drawing
        let recordButtonPath = UIBezierPath(ovalInRect: CGRectMake(0, 0, 22, 22))
        recordColor.setFill()
        recordButtonPath.fill()
    }

    public class func drawHamburgerCanvas(hamburgerSelected hamburgerSelected: Bool = false) {
        //// Color Declarations
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let menuGray = UIColor(red: 0.800, green: 0.847, blue: 0.890, alpha: 1.000)

        //// Variable Declarations
        let hamburgerColor = hamburgerSelected ? lightBlue : menuGray

        //// hamburgerBottom Drawing
        let hamburgerBottomPath = UIBezierPath(roundedRect: CGRectMake(0, 12, 22, 3), cornerRadius: 1)
        hamburgerColor.setFill()
        hamburgerBottomPath.fill()


        //// hamburgerMiddle Drawing
        let hamburgerMiddlePath = UIBezierPath(roundedRect: CGRectMake(0, 6, 22, 3), cornerRadius: 1)
        hamburgerColor.setFill()
        hamburgerMiddlePath.fill()


        //// hamburgerTop Drawing
        let hamburgerTopPath = UIBezierPath(roundedRect: CGRectMake(0, 0, 22, 3), cornerRadius: 1)
        hamburgerColor.setFill()
        hamburgerTopPath.fill()
    }

    public class func drawSettingsIconCanvas(settingsSelected settingsSelected: Bool = false) {
        //// Color Declarations
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let menuGray = UIColor(red: 0.800, green: 0.847, blue: 0.890, alpha: 1.000)

        //// Variable Declarations
        let settingsColor = settingsSelected ? lightBlue : menuGray

        //// settingsButton Drawing
        let settingsButtonPath = UIBezierPath()
        settingsButtonPath.moveToPoint(CGPointMake(22, 12.35))
        settingsButtonPath.addLineToPoint(CGPointMake(22, 9.6))
        settingsButtonPath.addLineToPoint(CGPointMake(18.73, 9.07))
        settingsButtonPath.addCurveToPoint(CGPointMake(17.83, 6.9), controlPoint1: CGPointMake(18.53, 8.29), controlPoint2: CGPointMake(18.23, 7.56))
        settingsButtonPath.addLineToPoint(CGPointMake(19.74, 4.18))
        settingsButtonPath.addLineToPoint(CGPointMake(17.79, 2.24))
        settingsButtonPath.addLineToPoint(CGPointMake(15.11, 4.17))
        settingsButtonPath.addCurveToPoint(CGPointMake(12.92, 3.26), controlPoint1: CGPointMake(14.44, 3.76), controlPoint2: CGPointMake(13.7, 3.45))
        settingsButtonPath.addLineToPoint(CGPointMake(12.35, 0))
        settingsButtonPath.addLineToPoint(CGPointMake(9.6, 0))
        settingsButtonPath.addLineToPoint(CGPointMake(9.07, 3.25))
        settingsButtonPath.addCurveToPoint(CGPointMake(6.88, 4.15), controlPoint1: CGPointMake(8.29, 3.44), controlPoint2: CGPointMake(7.56, 3.74))
        settingsButtonPath.addLineToPoint(CGPointMake(4.21, 2.23))
        settingsButtonPath.addLineToPoint(CGPointMake(2.26, 4.18))
        settingsButtonPath.addLineToPoint(CGPointMake(4.15, 6.87))
        settingsButtonPath.addCurveToPoint(CGPointMake(3.23, 9.07), controlPoint1: CGPointMake(3.74, 7.54), controlPoint2: CGPointMake(3.43, 8.28))
        settingsButtonPath.addLineToPoint(CGPointMake(0, 9.6))
        settingsButtonPath.addLineToPoint(CGPointMake(0, 12.35))
        settingsButtonPath.addLineToPoint(CGPointMake(3.23, 12.93))
        settingsButtonPath.addCurveToPoint(CGPointMake(4.14, 15.12), controlPoint1: CGPointMake(3.42, 13.71), controlPoint2: CGPointMake(3.73, 14.45))
        settingsButtonPath.addLineToPoint(CGPointMake(2.23, 17.79))
        settingsButtonPath.addLineToPoint(CGPointMake(4.18, 19.73))
        settingsButtonPath.addLineToPoint(CGPointMake(6.87, 17.85))
        settingsButtonPath.addCurveToPoint(CGPointMake(9.06, 18.75), controlPoint1: CGPointMake(7.55, 18.25), controlPoint2: CGPointMake(8.28, 18.56))
        settingsButtonPath.addLineToPoint(CGPointMake(9.6, 22))
        settingsButtonPath.addLineToPoint(CGPointMake(12.35, 22))
        settingsButtonPath.addLineToPoint(CGPointMake(12.93, 18.74))
        settingsButtonPath.addCurveToPoint(CGPointMake(15.11, 17.83), controlPoint1: CGPointMake(13.71, 18.55), controlPoint2: CGPointMake(14.44, 18.24))
        settingsButtonPath.addLineToPoint(CGPointMake(17.82, 19.73))
        settingsButtonPath.addLineToPoint(CGPointMake(19.77, 17.79))
        settingsButtonPath.addLineToPoint(CGPointMake(17.83, 15.1))
        settingsButtonPath.addCurveToPoint(CGPointMake(18.73, 12.93), controlPoint1: CGPointMake(18.23, 14.43), controlPoint2: CGPointMake(18.54, 13.7))
        settingsButtonPath.addLineToPoint(CGPointMake(22, 12.35))
        settingsButtonPath.addLineToPoint(CGPointMake(22, 12.35))
        settingsButtonPath.closePath()
        settingsButtonPath.moveToPoint(CGPointMake(11, 14.67))
        settingsButtonPath.addCurveToPoint(CGPointMake(7.33, 11), controlPoint1: CGPointMake(8.98, 14.67), controlPoint2: CGPointMake(7.33, 13.02))
        settingsButtonPath.addCurveToPoint(CGPointMake(11, 7.33), controlPoint1: CGPointMake(7.33, 8.98), controlPoint2: CGPointMake(8.98, 7.33))
        settingsButtonPath.addCurveToPoint(CGPointMake(14.67, 11), controlPoint1: CGPointMake(13.02, 7.33), controlPoint2: CGPointMake(14.67, 8.98))
        settingsButtonPath.addCurveToPoint(CGPointMake(11, 14.67), controlPoint1: CGPointMake(14.67, 13.02), controlPoint2: CGPointMake(13.02, 14.67))
        settingsButtonPath.addLineToPoint(CGPointMake(11, 14.67))
        settingsButtonPath.closePath()
        settingsButtonPath.miterLimit = 4;

        settingsButtonPath.usesEvenOddFillRule = true;

        settingsColor.setFill()
        settingsButtonPath.fill()
    }

    public class func drawKnobCanvas(rotation rotation: CGFloat = 0, clickSelected: Bool = false, clickRingActive: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let lightBlue = UIColor(red: 0.349, green: 0.733, blue: 0.961, alpha: 1.000)
        let clickGray = UIColor(red: 0.400, green: 0.435, blue: 0.471, alpha: 1.000)
        let clickDarkGray = UIColor(red: 0.329, green: 0.345, blue: 0.361, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.292, green: 0.673, blue: 0.950, alpha: 1.000)

        //// Variable Declarations
        let clickColor = clickSelected ? lightBlue : clickGray

        //// knobBGContainer Drawing
        let knobBGContainerPath = UIBezierPath(rect: CGRectMake(0, 0, 280, 280))
        CGContextSaveGState(context)
        knobBGContainerPath.addClip()
        UIGroover.knobBG.drawInRect(CGRectMake(0, 0, UIGroover.knobBG.size.width, UIGroover.knobBG.size.height))
        CGContextRestoreGState(context)


        //// knobRotationContainer Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 140, 140)
        CGContextRotateCTM(context, -rotation * CGFloat(M_PI) / 180)

        let knobRotationContainerPath = UIBezierPath(rect: CGRectMake(-140, -140, 280, 280))
        CGContextSaveGState(context)
        knobRotationContainerPath.addClip()
        UIGroover.knobRotation.drawInRect(CGRectMake(-140, -140, UIGroover.knobRotation.size.width, UIGroover.knobRotation.size.height))
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// clickButton
        //// clickOval7 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 140, 149)

        let clickOval7Path = UIBezierPath(ovalInRect: CGRectMake(-3, -3, 6, 6))
        clickColor.setFill()
        clickOval7Path.fill()
        clickDarkGray.setStroke()
        clickOval7Path.lineWidth = 1
        clickOval7Path.stroke()

        CGContextRestoreGState(context)


        //// clickOval6 Drawing
        let clickOval6Path = UIBezierPath(ovalInRect: CGRectMake(128, 146, 6, 6))
        clickColor.setFill()
        clickOval6Path.fill()
        clickDarkGray.setStroke()
        clickOval6Path.lineWidth = 1
        clickOval6Path.stroke()


        //// clickOval5 Drawing
        let clickOval5Path = UIBezierPath(ovalInRect: CGRectMake(146, 137, 6, 6))
        clickColor.setFill()
        clickOval5Path.fill()
        clickDarkGray.setStroke()
        clickOval5Path.lineWidth = 1
        clickOval5Path.stroke()


        //// clickOval4 Drawing
        let clickOval4Path = UIBezierPath(ovalInRect: CGRectMake(137, 137, 6, 6))
        clickColor.setFill()
        clickOval4Path.fill()
        clickDarkGray.setStroke()
        clickOval4Path.lineWidth = 1
        clickOval4Path.stroke()


        //// clickOval3 Drawing
        let clickOval3Path = UIBezierPath(ovalInRect: CGRectMake(128, 137, 6, 6))
        clickColor.setFill()
        clickOval3Path.fill()
        clickDarkGray.setStroke()
        clickOval3Path.lineWidth = 1
        clickOval3Path.stroke()


        //// clickOval2 Drawing
        let clickOval2Path = UIBezierPath(ovalInRect: CGRectMake(146, 128, 6, 6))
        clickColor.setFill()
        clickOval2Path.fill()
        clickDarkGray.setStroke()
        clickOval2Path.lineWidth = 1
        clickOval2Path.stroke()


        //// clickOval1 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 140, 131)

        let clickOval1Path = UIBezierPath(ovalInRect: CGRectMake(-3, -3, 6, 6))
        clickColor.setFill()
        clickOval1Path.fill()
        clickDarkGray.setStroke()
        clickOval1Path.lineWidth = 1
        clickOval1Path.stroke()

        CGContextRestoreGState(context)




        if (clickRingActive) {
            //// clickRing Drawing
            let clickRingPath = UIBezierPath(ovalInRect: CGRectMake(81, 81, 118, 118))
            strokeColor2.setStroke()
            clickRingPath.lineWidth = 2
            clickRingPath.stroke()
        }
    }

    public class func drawLeftCanvas() {
        //// Color Declarations
        let fillColor = UIColor(red: 0.276, green: 0.318, blue: 0.364, alpha: 1.000)

        //// leftArrow Drawing
        let leftArrowPath = UIBezierPath()
        leftArrowPath.moveToPoint(CGPointMake(0, 6))
        leftArrowPath.addLineToPoint(CGPointMake(12, 12))
        leftArrowPath.addLineToPoint(CGPointMake(12, 0))
        leftArrowPath.addLineToPoint(CGPointMake(0, 6))
        leftArrowPath.closePath()
        leftArrowPath.miterLimit = 4;

        leftArrowPath.usesEvenOddFillRule = true;

        fillColor.setFill()
        leftArrowPath.fill()
    }

    public class func drawRightCanvas() {
        //// Color Declarations
        let fillColor = UIColor(red: 0.276, green: 0.318, blue: 0.364, alpha: 1.000)

        //// rightButton Drawing
        let rightButtonPath = UIBezierPath()
        rightButtonPath.moveToPoint(CGPointMake(12, 6))
        rightButtonPath.addLineToPoint(CGPointMake(0, 12))
        rightButtonPath.addLineToPoint(CGPointMake(0, 0))
        rightButtonPath.addLineToPoint(CGPointMake(12, 6))
        rightButtonPath.closePath()
        rightButtonPath.miterLimit = 4;

        rightButtonPath.usesEvenOddFillRule = true;

        fillColor.setFill()
        rightButtonPath.fill()
    }

}
